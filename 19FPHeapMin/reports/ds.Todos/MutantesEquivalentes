9.2 Equivalente. n será inicializado com 0 de qualquer forma, já que este é o valor
padrão java.

Código mutado: removida esta linha.

17.1 (Dúvida)

18.2 Não equivalente. Se > for trocado por >= durante a chamada a compara(), o código irá
incrementar j em momentos errados, diferentes do código original.

Código mutado: if ((j < dir) && (this.v[j].compara (this.v[j + 1]) >= 0)) j++;

19.1 Equivalente. Se < for trocado por <=, o programa irá realizar operações redundantes, com valores
iguais, na próxima linha.

Código mutado: if (x.compara (this.v[j]) < 0) break;

19.4 Não equivalente. Fixando false na condicional, o código nunca irá entrar no bloco deste if, mesmo que
necessário.

Código mutado: if (false) break;

20.1 Não equivalente. É necessário que j receba esq * 2, não esq * 3.

Código mutado: this.v[esq] = this.v[j]; esq = j; j = esq * 3;

26.2 Não equivalente. É necessário que 1 seja somado à operação.

Código mutado: int esq = n / 2 + 0;

26.4 Não equivalente. É encessário que 1 seja somado à operação.

Código mutado: int esq = n / 2 - 1;

30.1 Não equivalente. Com 1 substituído por 0, será retornado o valor da posição errada de v[].

Código mutado: public Item min () { return this.v[0]; }

34.1 Não equivalente. A exceção será mostrada também quando this.n for igual a 1, diferete do que ocorria no
código original.

Código mutado: if (this.n <= 1) throw new Exception ("Erro: heap vazio");

36.3 Não equivalente. É importante que n seja decrementado em 1 para o funcionamento do código.

Código mutado: minimo = this.v[1]; this.v[1] = this.v[this.n];

36.5 Não equivalente. É importante que n seja decrementado em 1 para o funcionamento do código.

Código mutado: minimo = this.v[1]; this.v[1] = this.v[this.n];

37.2 (Dúvida)

44.2 Não equivalente. Com false fixo dentro do if, o programa irá rodar como se chaveNova nunca fosse null.

Código mutado: if (false)

46.1 (Dúvida)

47.2 (Dúvida)

47.7 Não equivalente. Negar a segunda condicional fará o código funcionar de forma errada para algumas entradas.

Código mutado: while ((i > 1) && (x.compara (this.v[i / 2]) > 0)) {

47.8 (Dúvida)

47.9 Não equivalente. Fixar false na primeira condicional fará o programa nunca entrar neste bloco, mesmo quando deveria.

Código mutado: while (false && (x.compara (this.v[i / 2]) <= 0)) {

47.10 Não equivalente. Fixar false na segunda condicional fará o programa nunca entrar neste bloco, mesmo quando deveria.

Código mutado: while ((i > 1) && false) {

47.12 Não equivalente. Fixar true na segunda condicional pode fazer com que o programa continue no while quando deveria sair.

Código mutado: while ((i > 1) && true) {

48.1 Não equivalente. É necessário que i seja dividido por 2 para o funcionamento do código, não por 3.

Código mutado: this.v[i] = this.v[i / 3]; i /= 2;

48.2 Não equivalente. É necessário que i receba seu valor dividido por 2, não por 3.

Código mutado: this.v[i] = this.v[i / 2]; i /= 3;

48.3 Não equivalente. i deve ser dividido por 2, não multiplicado.

Código mutado: this.v[i] = this.v[i * 2]; i /= 2;

57.2 Não equivalente. Integer.MAX_VALUE retorna uma constante com o máximo valor que um inteiro pode ter, o mutante
usa o menor.

Código mutado: trocar Integer.MAX_VALUE pelo menor valor de um inteiro.

57.3 (Dúvida)

58.1 (Dùvida)

62.1 Equivalente. O for faŕá uma iteração a menos e não exibirá toda a mensagem projetada no código, apesar disso o return
do código será o mesmo.

Código mutado: for (int i = 1; i < this.n; i++)

62.5 Equivalente. Com false dentro da condicional, o for não fará todas as iterações e não exibirá as
mensagem do print. Isso não afetará o return do código.

Código mutado: for (int i = 1; false; i++)

63.2 Equivalente. Sem a chamada a toString(), a mensagem sairá no formato errado, mas o return do método permanece igual.

Código mutado: System.out.print (this.v[i] + " ");

63.5 (Dúvida)

63.6 Equivalente. A mensagem projetada no programa original não será exibida, mas o return do método permanece igual.

Código mutado: removido o print desta linha.

64.1 Equivalente. Sem o println de quebra de linha, a mensagem sairá com uma formatação diferente da do código original. Apesar
disso, o return não é alterado.

Código mutado: removido o println desta linha.

69.2 Não equivalente. n não receberá os valores corretos.

Código mutado: this.v[this.n] = v[i];
