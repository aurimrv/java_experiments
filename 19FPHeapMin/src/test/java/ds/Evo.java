/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 24 18:27:51 GMT 2016
 */

package ds;

import org.junit.Test;
import static org.junit.Assert.*;
//import static org.evosuite.runtime.EvoAssertions.*;
import ds.FPHeapMin;
import ds.Item;
import ds.MeuItem;
//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
 
public class Evo{

  //Test case number: 0
  /*
   * 114 covered goals:
   * Goal 1. ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch
   * Goal 2. ds.FPHeapMin.refaz(II)V: I17 Branch 1 IF_ICMPGT L17 - false
   * Goal 3. ds.FPHeapMin.refaz(II)V: I22 Branch 2 IF_ICMPGE L18 - false
   * Goal 4. ds.FPHeapMin.refaz(II)V: I34 Branch 3 IFLE L18 - true
   * Goal 5. ds.FPHeapMin.refaz(II)V: I44 Branch 4 IFGT L19 - false
   * Goal 6. ds.FPHeapMin.retiraMin()Lds/Item;: I5 Branch 6 IF_ICMPGE L34 - true
   * Goal 7. Branch ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch in context: ds.FPHeapMin:<init>([Lds/Item;)V
   * Goal 8. Branch ds.FPHeapMin.retiraMin()Lds/Item;: I5 Branch 6 IF_ICMPGE L34 - true in context: ds.FPHeapMin:retiraMin()Lds/Item;
   * Goal 9. [Output]: ds.FPHeapMin.retiraMin()Lds/Item;:NonNull
   * Goal 10. ds.FPHeapMin.refaz(II)V: Line 15
   * Goal 11. ds.FPHeapMin.refaz(II)V: Line 16
   * Goal 12. ds.FPHeapMin.refaz(II)V: Line 17
   * Goal 13. ds.FPHeapMin.refaz(II)V: Line 18
   * Goal 14. ds.FPHeapMin.refaz(II)V: Line 19
   * Goal 15. ds.FPHeapMin.refaz(II)V: Line 22
   * Goal 16. ds.FPHeapMin.refaz(II)V: Line 23
   * Goal 17. ds.FPHeapMin.retiraMin()Lds/Item;: Line 34
   * Goal 18. ds.FPHeapMin.retiraMin()Lds/Item;: Line 36
   * Goal 19. ds.FPHeapMin.retiraMin()Lds/Item;: Line 37
   * Goal 20. ds.FPHeapMin.retiraMin()Lds/Item;: Line 39
   * Goal 21. [METHOD] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 22. [METHOD] ds.FPHeapMin.retiraMin()Lds/Item;
   * Goal 23. [METHODNOEX] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 24. [METHODNOEX] ds.FPHeapMin.retiraMin()Lds/Item;
   * Goal 25. Weak Mutation 9: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 26. Weak Mutation 10: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> +
   * Goal 27. Weak Mutation 11: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> %
   * Goal 28. Weak Mutation 12: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> *
   * Goal 29. Weak Mutation 13: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> /
   * Goal 30. Weak Mutation 14: ds.FPHeapMin.refaz(II)V:15 - ReplaceVariable esq -> dir
   * Goal 31. Weak Mutation 15: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp Negation of esq
   * Goal 32. Weak Mutation 16: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp IINC 1 esq
   * Goal 33. Weak Mutation 17: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp IINC -1 esq
   * Goal 34. Weak Mutation 18: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 0
   * Goal 35. Weak Mutation 19: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 1
   * Goal 36. Weak Mutation 20: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> -1
   * Goal 37. Weak Mutation 21: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 3
   * Goal 38. Weak Mutation 22: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> +
   * Goal 39. Weak Mutation 23: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> %
   * Goal 40. Weak Mutation 24: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> -
   * Goal 41. Weak Mutation 25: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> /
   * Goal 42. Weak Mutation 26: ds.FPHeapMin.refaz(II)V:16 - ReplaceVariable esq -> dir
   * Goal 43. Weak Mutation 27: ds.FPHeapMin.refaz(II)V:16 - ReplaceVariable esq -> j
   * Goal 44. Weak Mutation 28: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp Negation of esq
   * Goal 45. Weak Mutation 29: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp IINC 1 esq
   * Goal 46. Weak Mutation 30: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp IINC -1 esq
   * Goal 47. Weak Mutation 31: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable j -> dir
   * Goal 48. Weak Mutation 32: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable j -> esq
   * Goal 49. Weak Mutation 33: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp Negation of j
   * Goal 50. Weak Mutation 34: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC 1 j
   * Goal 51. Weak Mutation 35: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC -1 j
   * Goal 52. Weak Mutation 36: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable dir -> esq
   * Goal 53. Weak Mutation 37: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable dir -> j
   * Goal 54. Weak Mutation 38: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp Negation of dir
   * Goal 55. Weak Mutation 39: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC 1 dir
   * Goal 56. Weak Mutation 40: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC -1 dir
   * Goal 57. Weak Mutation 41: ds.FPHeapMin.refaz(II)V:17 - ReplaceComparisonOperator > -> !=
   * Goal 58. Weak Mutation 44: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 59. Weak Mutation 45: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 60. Weak Mutation 46: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 61. Weak Mutation 47: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 62. Weak Mutation 48: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 63. Weak Mutation 49: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable dir -> esq
   * Goal 64. Weak Mutation 50: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable dir -> j
   * Goal 65. Weak Mutation 51: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of dir
   * Goal 66. Weak Mutation 52: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 dir
   * Goal 67. Weak Mutation 53: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 dir
   * Goal 68. Weak Mutation 54: ds.FPHeapMin.refaz(II)V:18 - ReplaceComparisonOperator >= -> -1
   * Goal 69. Weak Mutation 57: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 70. Weak Mutation 58: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 71. Weak Mutation 59: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 72. Weak Mutation 60: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 73. Weak Mutation 61: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 74. Weak Mutation 62: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 75. Weak Mutation 63: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 76. Weak Mutation 64: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 77. Weak Mutation 65: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 78. Weak Mutation 66: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 79. Weak Mutation 67: ds.FPHeapMin.refaz(II)V:18 - ReplaceConstant - 1 -> 0
   * Goal 80. Weak Mutation 68: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> %
   * Goal 81. Weak Mutation 69: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> -
   * Goal 82. Weak Mutation 70: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> *
   * Goal 83. Weak Mutation 71: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> /
   * Goal 84. Weak Mutation 74: ds.FPHeapMin.refaz(II)V:18 - ReplaceComparisonOperator <= -> <
   * Goal 85. Weak Mutation 77: ds.FPHeapMin.refaz(II)V:19 - ReplaceVariable j -> dir
   * Goal 86. Weak Mutation 78: ds.FPHeapMin.refaz(II)V:19 - ReplaceVariable j -> esq
   * Goal 87. Weak Mutation 79: ds.FPHeapMin.refaz(II)V:19 - InsertUnaryOp Negation of j
   * Goal 88. Weak Mutation 80: ds.FPHeapMin.refaz(II)V:19 - InsertUnaryOp IINC 1 j
   * Goal 89. Weak Mutation 81: ds.FPHeapMin.refaz(II)V:19 - InsertUnaryOp IINC -1 j
   * Goal 90. Weak Mutation 84: ds.FPHeapMin.refaz(II)V:19 - ReplaceComparisonOperator > -> >=
   * Goal 91. Weak Mutation 113: ds.FPHeapMin.refaz(II)V:22 - ReplaceVariable esq -> dir
   * Goal 92. Weak Mutation 114: ds.FPHeapMin.refaz(II)V:22 - ReplaceVariable esq -> j
   * Goal 93. Weak Mutation 115: ds.FPHeapMin.refaz(II)V:22 - InsertUnaryOp Negation of esq
   * Goal 94. Weak Mutation 116: ds.FPHeapMin.refaz(II)V:22 - InsertUnaryOp IINC 1 esq
   * Goal 95. Weak Mutation 117: ds.FPHeapMin.refaz(II)V:22 - InsertUnaryOp IINC -1 esq
   * Goal 96. Weak Mutation 146: ds.FPHeapMin.retiraMin()Lds/Item;:34 - InsertUnaryOp Negation
   * Goal 97. Weak Mutation 147: ds.FPHeapMin.retiraMin()Lds/Item;:34 - InsertUnaryOp +1
   * Goal 98. Weak Mutation 148: ds.FPHeapMin.retiraMin()Lds/Item;:34 - InsertUnaryOp -1
   * Goal 99. Weak Mutation 149: ds.FPHeapMin.retiraMin()Lds/Item;:34 - ReplaceConstant - 1 -> 0
   * Goal 100. Weak Mutation 150: ds.FPHeapMin.retiraMin()Lds/Item;:34 - ReplaceComparisonOperator >= -> <
   * Goal 101. Weak Mutation 153: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceConstant - 1 -> 0
   * Goal 102. Weak Mutation 154: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceConstant - 1 -> 0
   * Goal 103. Weak Mutation 155: ds.FPHeapMin.retiraMin()Lds/Item;:36 - InsertUnaryOp Negation
   * Goal 104. Weak Mutation 156: ds.FPHeapMin.retiraMin()Lds/Item;:36 - InsertUnaryOp +1
   * Goal 105. Weak Mutation 157: ds.FPHeapMin.retiraMin()Lds/Item;:36 - InsertUnaryOp -1
   * Goal 106. Weak Mutation 158: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceConstant - 1 -> 0
   * Goal 107. Weak Mutation 159: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> +
   * Goal 108. Weak Mutation 160: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> %
   * Goal 109. Weak Mutation 161: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> *
   * Goal 110. Weak Mutation 162: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> /
   * Goal 111. Weak Mutation 163: ds.FPHeapMin.retiraMin()Lds/Item;:37 - ReplaceConstant - 1 -> 0
   * Goal 112. Weak Mutation 164: ds.FPHeapMin.retiraMin()Lds/Item;:37 - InsertUnaryOp Negation
   * Goal 113. Weak Mutation 165: ds.FPHeapMin.retiraMin()Lds/Item;:37 - InsertUnaryOp +1
   * Goal 114. Weak Mutation 166: ds.FPHeapMin.retiraMin()Lds/Item;:37 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MeuItem meuItem0 = new MeuItem((-1350));
      Item[] itemArray0 = new Item[5];
      itemArray0[1] = (Item) meuItem0;
      itemArray0[2] = (Item) meuItem0;
      itemArray0[3] = (Item) meuItem0;
      itemArray0[4] = (Item) meuItem0;
      FPHeapMin fPHeapMin0 = new FPHeapMin(itemArray0);
      MeuItem meuItem1 = (MeuItem)fPHeapMin0.retiraMin();
      assertSame(meuItem1, meuItem0);
  }

  //Test case number: 1
  /*
   * 16 covered goals:
   * Goal 1. ds.FPHeapMin.min()Lds/Item;: root-Branch
   * Goal 2. ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch
   * Goal 3. Branch ds.FPHeapMin.min()Lds/Item;: root-Branch in context: ds.FPHeapMin:min()Lds/Item;
   * Goal 4. Branch ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch in context: ds.FPHeapMin:<init>([Lds/Item;)V
   * Goal 5. [Output]: ds.FPHeapMin.min()Lds/Item;:NonNull
   * Goal 6. ds.FPHeapMin.min()Lds/Item;: Line 30
   * Goal 7. [METHOD] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 8. [METHOD] ds.FPHeapMin.min()Lds/Item;
   * Goal 9. [METHODNOEX] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 10. [METHODNOEX] ds.FPHeapMin.min()Lds/Item;
   * Goal 11. Weak Mutation 9: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 12. Weak Mutation 10: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> +
   * Goal 13. Weak Mutation 11: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> %
   * Goal 14. Weak Mutation 12: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> *
   * Goal 15. Weak Mutation 13: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> /
   * Goal 16. Weak Mutation 145: ds.FPHeapMin.min()Lds/Item;:30 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MeuItem meuItem0 = new MeuItem((-1350));
      Item[] itemArray0 = new Item[5];
      itemArray0[1] = (Item) meuItem0;
      FPHeapMin fPHeapMin0 = new FPHeapMin(itemArray0);
      MeuItem meuItem1 = (MeuItem)fPHeapMin0.min();
      assertEquals(4, meuItem1.tamanho());
  }

  //Test case number: 2
  /*
   * 72 covered goals:
   * Goal 1. ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch
   * Goal 2. ds.FPHeapMin.refaz(II)V: I17 Branch 1 IF_ICMPGT L17 - false
   * Goal 3. ds.FPHeapMin.refaz(II)V: I22 Branch 2 IF_ICMPGE L18 - false
   * Goal 4. Branch ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch in context: ds.FPHeapMin:<init>([Lds/Item;)V
   * Goal 5. Branch ds.FPHeapMin.refaz(II)V: I17 Branch 1 IF_ICMPGT L17 - false in context: ds.FPHeapMin:refaz(II)V
   * Goal 6. Branch ds.FPHeapMin.refaz(II)V: I22 Branch 2 IF_ICMPGE L18 - false in context: ds.FPHeapMin:refaz(II)V
   * Goal 7. refaz(II)V_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 8. ds.FPHeapMin.refaz(II)V: Line 15
   * Goal 9. ds.FPHeapMin.refaz(II)V: Line 16
   * Goal 10. ds.FPHeapMin.refaz(II)V: Line 17
   * Goal 11. ds.FPHeapMin.refaz(II)V: Line 18
   * Goal 12. [METHOD] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 13. [METHOD] ds.FPHeapMin.refaz(II)V
   * Goal 14. [METHODNOEX] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 15. Weak Mutation 9: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 16. Weak Mutation 10: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> +
   * Goal 17. Weak Mutation 11: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> %
   * Goal 18. Weak Mutation 12: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> *
   * Goal 19. Weak Mutation 13: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> /
   * Goal 20. Weak Mutation 14: ds.FPHeapMin.refaz(II)V:15 - ReplaceVariable esq -> dir
   * Goal 21. Weak Mutation 15: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp Negation of esq
   * Goal 22. Weak Mutation 16: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp IINC 1 esq
   * Goal 23. Weak Mutation 17: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp IINC -1 esq
   * Goal 24. Weak Mutation 18: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 0
   * Goal 25. Weak Mutation 19: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 1
   * Goal 26. Weak Mutation 20: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> -1
   * Goal 27. Weak Mutation 21: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 3
   * Goal 28. Weak Mutation 23: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> %
   * Goal 29. Weak Mutation 24: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> -
   * Goal 30. Weak Mutation 25: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> /
   * Goal 31. Weak Mutation 26: ds.FPHeapMin.refaz(II)V:16 - ReplaceVariable esq -> dir
   * Goal 32. Weak Mutation 27: ds.FPHeapMin.refaz(II)V:16 - ReplaceVariable esq -> j
   * Goal 33. Weak Mutation 28: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp Negation of esq
   * Goal 34. Weak Mutation 29: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp IINC 1 esq
   * Goal 35. Weak Mutation 30: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp IINC -1 esq
   * Goal 36. Weak Mutation 31: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable j -> dir
   * Goal 37. Weak Mutation 32: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable j -> esq
   * Goal 38. Weak Mutation 33: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp Negation of j
   * Goal 39. Weak Mutation 34: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC 1 j
   * Goal 40. Weak Mutation 35: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC -1 j
   * Goal 41. Weak Mutation 36: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable dir -> esq
   * Goal 42. Weak Mutation 37: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable dir -> j
   * Goal 43. Weak Mutation 38: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp Negation of dir
   * Goal 44. Weak Mutation 39: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC 1 dir
   * Goal 45. Weak Mutation 40: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC -1 dir
   * Goal 46. Weak Mutation 41: ds.FPHeapMin.refaz(II)V:17 - ReplaceComparisonOperator > -> !=
   * Goal 47. Weak Mutation 44: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 48. Weak Mutation 45: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 49. Weak Mutation 46: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 50. Weak Mutation 47: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 51. Weak Mutation 48: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 52. Weak Mutation 49: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable dir -> esq
   * Goal 53. Weak Mutation 50: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable dir -> j
   * Goal 54. Weak Mutation 51: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of dir
   * Goal 55. Weak Mutation 52: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 dir
   * Goal 56. Weak Mutation 53: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 dir
   * Goal 57. Weak Mutation 54: ds.FPHeapMin.refaz(II)V:18 - ReplaceComparisonOperator >= -> -1
   * Goal 58. Weak Mutation 57: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 59. Weak Mutation 58: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 60. Weak Mutation 59: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 61. Weak Mutation 60: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 62. Weak Mutation 61: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 63. Weak Mutation 62: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 64. Weak Mutation 63: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 65. Weak Mutation 64: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 66. Weak Mutation 65: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 67. Weak Mutation 66: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 68. Weak Mutation 67: ds.FPHeapMin.refaz(II)V:18 - ReplaceConstant - 1 -> 0
   * Goal 69. Weak Mutation 68: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> %
   * Goal 70. Weak Mutation 69: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> -
   * Goal 71. Weak Mutation 70: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> *
   * Goal 72. Weak Mutation 71: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Item[] itemArray0 = new Item[5];
      FPHeapMin fPHeapMin0 = new FPHeapMin(itemArray0);
      // Undeclared exception!
      try { 
        fPHeapMin0.refaz(2, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         assertTrue(true);
      }
  }

  //Test case number: 3
  /*
   * 31 covered goals:
   * Goal 1. ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch
   * Goal 2. ds.FPHeapMin.copia([Lds/Item;)V: I8 Branch 12 IF_ICMPGE L68 - false
   * Goal 3. Branch ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch in context: ds.FPHeapMin:<init>([Lds/Item;)V
   * Goal 4. Branch ds.FPHeapMin.copia([Lds/Item;)V: I8 Branch 12 IF_ICMPGE L68 - false in context: ds.FPHeapMin:copia([Lds/Item;)V
   * Goal 5. copia([Lds/Item;)V_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 6. ds.FPHeapMin.copia([Lds/Item;)V: Line 68
   * Goal 7. ds.FPHeapMin.copia([Lds/Item;)V: Line 69
   * Goal 8. [METHOD] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 9. [METHOD] ds.FPHeapMin.copia([Lds/Item;)V
   * Goal 10. [METHODNOEX] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 11. Weak Mutation 9: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 12. Weak Mutation 10: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> +
   * Goal 13. Weak Mutation 11: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> %
   * Goal 14. Weak Mutation 12: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> *
   * Goal 15. Weak Mutation 13: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> /
   * Goal 16. Weak Mutation 265: ds.FPHeapMin.copia([Lds/Item;)V:68 - ReplaceConstant - 1 -> 0
   * Goal 17. Weak Mutation 266: ds.FPHeapMin.copia([Lds/Item;)V:68 - InsertUnaryOp Negation of i
   * Goal 18. Weak Mutation 267: ds.FPHeapMin.copia([Lds/Item;)V:68 - InsertUnaryOp IINC 1 i
   * Goal 19. Weak Mutation 268: ds.FPHeapMin.copia([Lds/Item;)V:68 - InsertUnaryOp IINC -1 i
   * Goal 20. Weak Mutation 269: ds.FPHeapMin.copia([Lds/Item;)V:68 - ReplaceComparisonOperator >= -> -1
   * Goal 21. Weak Mutation 272: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 273: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp +1
   * Goal 23. Weak Mutation 274: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp -1
   * Goal 24. Weak Mutation 275: ds.FPHeapMin.copia([Lds/Item;)V:69 - ReplaceConstant - 1 -> 0
   * Goal 25. Weak Mutation 276: ds.FPHeapMin.copia([Lds/Item;)V:69 - ReplaceArithmeticOperator + -> %
   * Goal 26. Weak Mutation 277: ds.FPHeapMin.copia([Lds/Item;)V:69 - ReplaceArithmeticOperator + -> -
   * Goal 27. Weak Mutation 278: ds.FPHeapMin.copia([Lds/Item;)V:69 - ReplaceArithmeticOperator + -> *
   * Goal 28. Weak Mutation 279: ds.FPHeapMin.copia([Lds/Item;)V:69 - ReplaceArithmeticOperator + -> /
   * Goal 29. Weak Mutation 280: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp Negation of i
   * Goal 30. Weak Mutation 281: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp IINC 1 i
   * Goal 31. Weak Mutation 282: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp IINC -1 i
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Item[] itemArray0 = new Item[2];
      FPHeapMin fPHeapMin0 = new FPHeapMin(itemArray0);
      // Undeclared exception!
      try { 
        fPHeapMin0.copia(itemArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
    	  assertTrue(true);
      }
  }

  //Test case number: 4
  /*
   * 78 covered goals:
   * Goal 1. ds.FPHeapMin.<init>(I)V: root-Branch
   * Goal 2. ds.FPHeapMin.refaz(II)V: I17 Branch 1 IF_ICMPGT L17 - false
   * Goal 3. ds.FPHeapMin.refaz(II)V: I22 Branch 2 IF_ICMPGE L18 - false
   * Goal 4. Branch ds.FPHeapMin.<init>(I)V: root-Branch in context: ds.FPHeapMin:<init>(I)V
   * Goal 5. Branch ds.FPHeapMin.refaz(II)V: I17 Branch 1 IF_ICMPGT L17 - false in context: ds.FPHeapMin:refaz(II)V
   * Goal 6. Branch ds.FPHeapMin.refaz(II)V: I22 Branch 2 IF_ICMPGE L18 - false in context: ds.FPHeapMin:refaz(II)V
   * Goal 7. ds.FPHeapMin.<init>(I)V: Line 8
   * Goal 8. ds.FPHeapMin.<init>(I)V: Line 9
   * Goal 9. ds.FPHeapMin.<init>(I)V: Line 10
   * Goal 10. ds.FPHeapMin.refaz(II)V: Line 15
   * Goal 11. ds.FPHeapMin.refaz(II)V: Line 16
   * Goal 12. ds.FPHeapMin.refaz(II)V: Line 17
   * Goal 13. ds.FPHeapMin.refaz(II)V: Line 18
   * Goal 14. [METHOD] ds.FPHeapMin.<init>(I)V
   * Goal 15. [METHOD] ds.FPHeapMin.refaz(II)V
   * Goal 16. [METHODNOEX] ds.FPHeapMin.<init>(I)V
   * Goal 17. Weak Mutation 0: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp Negation of maxTam
   * Goal 18. Weak Mutation 1: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp IINC 1 maxTam
   * Goal 19. Weak Mutation 2: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp IINC -1 maxTam
   * Goal 20. Weak Mutation 3: ds.FPHeapMin.<init>(I)V:8 - ReplaceConstant - 1 -> 0
   * Goal 21. Weak Mutation 4: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> %
   * Goal 22. Weak Mutation 5: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> -
   * Goal 23. Weak Mutation 6: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> *
   * Goal 24. Weak Mutation 7: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> /
   * Goal 25. Weak Mutation 8: ds.FPHeapMin.<init>(I)V:9 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 14: ds.FPHeapMin.refaz(II)V:15 - ReplaceVariable esq -> dir
   * Goal 27. Weak Mutation 15: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp Negation of esq
   * Goal 28. Weak Mutation 16: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp IINC 1 esq
   * Goal 29. Weak Mutation 17: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp IINC -1 esq
   * Goal 30. Weak Mutation 18: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 0
   * Goal 31. Weak Mutation 19: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 1
   * Goal 32. Weak Mutation 20: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> -1
   * Goal 33. Weak Mutation 21: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 3
   * Goal 34. Weak Mutation 23: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> %
   * Goal 35. Weak Mutation 24: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> -
   * Goal 36. Weak Mutation 25: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> /
   * Goal 37. Weak Mutation 26: ds.FPHeapMin.refaz(II)V:16 - ReplaceVariable esq -> dir
   * Goal 38. Weak Mutation 27: ds.FPHeapMin.refaz(II)V:16 - ReplaceVariable esq -> j
   * Goal 39. Weak Mutation 28: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp Negation of esq
   * Goal 40. Weak Mutation 29: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp IINC 1 esq
   * Goal 41. Weak Mutation 30: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp IINC -1 esq
   * Goal 42. Weak Mutation 31: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable j -> dir
   * Goal 43. Weak Mutation 32: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable j -> esq
   * Goal 44. Weak Mutation 33: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp Negation of j
   * Goal 45. Weak Mutation 34: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC 1 j
   * Goal 46. Weak Mutation 35: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC -1 j
   * Goal 47. Weak Mutation 36: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable dir -> esq
   * Goal 48. Weak Mutation 37: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable dir -> j
   * Goal 49. Weak Mutation 38: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp Negation of dir
   * Goal 50. Weak Mutation 39: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC 1 dir
   * Goal 51. Weak Mutation 40: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC -1 dir
   * Goal 52. Weak Mutation 41: ds.FPHeapMin.refaz(II)V:17 - ReplaceComparisonOperator > -> !=
   * Goal 53. Weak Mutation 44: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 54. Weak Mutation 45: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 55. Weak Mutation 46: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 56. Weak Mutation 47: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 57. Weak Mutation 48: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 58. Weak Mutation 49: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable dir -> esq
   * Goal 59. Weak Mutation 50: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable dir -> j
   * Goal 60. Weak Mutation 51: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of dir
   * Goal 61. Weak Mutation 52: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 dir
   * Goal 62. Weak Mutation 53: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 dir
   * Goal 63. Weak Mutation 54: ds.FPHeapMin.refaz(II)V:18 - ReplaceComparisonOperator >= -> -1
   * Goal 64. Weak Mutation 57: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 65. Weak Mutation 58: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 66. Weak Mutation 59: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 67. Weak Mutation 60: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 68. Weak Mutation 61: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 69. Weak Mutation 62: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 70. Weak Mutation 63: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 71. Weak Mutation 64: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 72. Weak Mutation 65: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 73. Weak Mutation 66: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 74. Weak Mutation 67: ds.FPHeapMin.refaz(II)V:18 - ReplaceConstant - 1 -> 0
   * Goal 75. Weak Mutation 68: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> %
   * Goal 76. Weak Mutation 69: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> -
   * Goal 77. Weak Mutation 70: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> *
   * Goal 78. Weak Mutation 71: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FPHeapMin fPHeapMin0 = new FPHeapMin(2258);
      // Undeclared exception!
      try { 
        fPHeapMin0.refaz(2, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
    	  assertTrue(true);
      }
  }

  //Test case number: 5
  /*
   * 42 covered goals:
   * Goal 1. ds.FPHeapMin.<init>(I)V: root-Branch
   * Goal 2. ds.FPHeapMin.copia([Lds/Item;)V: I8 Branch 12 IF_ICMPGE L68 - true
   * Goal 3. ds.FPHeapMin.copia([Lds/Item;)V: I8 Branch 12 IF_ICMPGE L68 - false
   * Goal 4. Branch ds.FPHeapMin.<init>(I)V: root-Branch in context: ds.FPHeapMin:<init>(I)V
   * Goal 5. Branch ds.FPHeapMin.copia([Lds/Item;)V: I8 Branch 12 IF_ICMPGE L68 - false in context: ds.FPHeapMin:copia([Lds/Item;)V
   * Goal 6. Branch ds.FPHeapMin.copia([Lds/Item;)V: I8 Branch 12 IF_ICMPGE L68 - true in context: ds.FPHeapMin:copia([Lds/Item;)V
   * Goal 7. ds.FPHeapMin.<init>(I)V: Line 8
   * Goal 8. ds.FPHeapMin.<init>(I)V: Line 9
   * Goal 9. ds.FPHeapMin.<init>(I)V: Line 10
   * Goal 10. ds.FPHeapMin.copia([Lds/Item;)V: Line 68
   * Goal 11. ds.FPHeapMin.copia([Lds/Item;)V: Line 69
   * Goal 12. ds.FPHeapMin.copia([Lds/Item;)V: Line 70
   * Goal 13. [METHOD] ds.FPHeapMin.<init>(I)V
   * Goal 14. [METHOD] ds.FPHeapMin.copia([Lds/Item;)V
   * Goal 15. [METHODNOEX] ds.FPHeapMin.<init>(I)V
   * Goal 16. [METHODNOEX] ds.FPHeapMin.copia([Lds/Item;)V
   * Goal 17. Weak Mutation 0: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp Negation of maxTam
   * Goal 18. Weak Mutation 1: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp IINC 1 maxTam
   * Goal 19. Weak Mutation 2: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp IINC -1 maxTam
   * Goal 20. Weak Mutation 3: ds.FPHeapMin.<init>(I)V:8 - ReplaceConstant - 1 -> 0
   * Goal 21. Weak Mutation 4: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> %
   * Goal 22. Weak Mutation 5: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> -
   * Goal 23. Weak Mutation 6: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> *
   * Goal 24. Weak Mutation 7: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> /
   * Goal 25. Weak Mutation 8: ds.FPHeapMin.<init>(I)V:9 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 265: ds.FPHeapMin.copia([Lds/Item;)V:68 - ReplaceConstant - 1 -> 0
   * Goal 27. Weak Mutation 266: ds.FPHeapMin.copia([Lds/Item;)V:68 - InsertUnaryOp Negation of i
   * Goal 28. Weak Mutation 267: ds.FPHeapMin.copia([Lds/Item;)V:68 - InsertUnaryOp IINC 1 i
   * Goal 29. Weak Mutation 268: ds.FPHeapMin.copia([Lds/Item;)V:68 - InsertUnaryOp IINC -1 i
   * Goal 30. Weak Mutation 269: ds.FPHeapMin.copia([Lds/Item;)V:68 - ReplaceComparisonOperator >= -> -1
   * Goal 31. Weak Mutation 270: ds.FPHeapMin.copia([Lds/Item;)V:68 - ReplaceComparisonOperator >= -> >
   * Goal 32. Weak Mutation 272: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp Negation
   * Goal 33. Weak Mutation 273: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp +1
   * Goal 34. Weak Mutation 274: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp -1
   * Goal 35. Weak Mutation 275: ds.FPHeapMin.copia([Lds/Item;)V:69 - ReplaceConstant - 1 -> 0
   * Goal 36. Weak Mutation 276: ds.FPHeapMin.copia([Lds/Item;)V:69 - ReplaceArithmeticOperator + -> %
   * Goal 37. Weak Mutation 277: ds.FPHeapMin.copia([Lds/Item;)V:69 - ReplaceArithmeticOperator + -> -
   * Goal 38. Weak Mutation 278: ds.FPHeapMin.copia([Lds/Item;)V:69 - ReplaceArithmeticOperator + -> *
   * Goal 39. Weak Mutation 279: ds.FPHeapMin.copia([Lds/Item;)V:69 - ReplaceArithmeticOperator + -> /
   * Goal 40. Weak Mutation 280: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp Negation of i
   * Goal 41. Weak Mutation 281: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp IINC 1 i
   * Goal 42. Weak Mutation 282: ds.FPHeapMin.copia([Lds/Item;)V:69 - InsertUnaryOp IINC -1 i
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Item[] itemArray0 = new Item[2];
      FPHeapMin fPHeapMin0 = new FPHeapMin(1607);
      fPHeapMin0.copia(itemArray0);
  }

  //Test case number: 6
  /*
   * 20 covered goals:
   * Goal 1. ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch
   * Goal 2. ds.FPHeapMin.copia([Lds/Item;)V: I8 Branch 12 IF_ICMPGE L68 - true
   * Goal 3. Branch ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch in context: ds.FPHeapMin:<init>([Lds/Item;)V
   * Goal 4. Branch ds.FPHeapMin.copia([Lds/Item;)V: I8 Branch 12 IF_ICMPGE L68 - true in context: ds.FPHeapMin:copia([Lds/Item;)V
   * Goal 5. ds.FPHeapMin.copia([Lds/Item;)V: Line 68
   * Goal 6. ds.FPHeapMin.copia([Lds/Item;)V: Line 70
   * Goal 7. [METHOD] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 8. [METHOD] ds.FPHeapMin.copia([Lds/Item;)V
   * Goal 9. [METHODNOEX] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 10. [METHODNOEX] ds.FPHeapMin.copia([Lds/Item;)V
   * Goal 11. Weak Mutation 9: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 12. Weak Mutation 10: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> +
   * Goal 13. Weak Mutation 11: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> %
   * Goal 14. Weak Mutation 12: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> *
   * Goal 15. Weak Mutation 13: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> /
   * Goal 16. Weak Mutation 265: ds.FPHeapMin.copia([Lds/Item;)V:68 - ReplaceConstant - 1 -> 0
   * Goal 17. Weak Mutation 266: ds.FPHeapMin.copia([Lds/Item;)V:68 - InsertUnaryOp Negation of i
   * Goal 18. Weak Mutation 267: ds.FPHeapMin.copia([Lds/Item;)V:68 - InsertUnaryOp IINC 1 i
   * Goal 19. Weak Mutation 268: ds.FPHeapMin.copia([Lds/Item;)V:68 - InsertUnaryOp IINC -1 i
   * Goal 20. Weak Mutation 271: ds.FPHeapMin.copia([Lds/Item;)V:68 - ReplaceComparisonOperator >= -> ==
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Item[] itemArray0 = new Item[0];
      FPHeapMin fPHeapMin0 = new FPHeapMin(itemArray0);
      fPHeapMin0.copia(itemArray0);
  }

  //Test case number: 7
  /*
   * 34 covered goals:
   * Goal 1. ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch
   * Goal 2. ds.FPHeapMin.imprime()V: I8 Branch 11 IF_ICMPGT L62 - true
   * Goal 3. ds.FPHeapMin.imprime()V: I8 Branch 11 IF_ICMPGT L62 - false
   * Goal 4. Branch ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch in context: ds.FPHeapMin:<init>([Lds/Item;)V
   * Goal 5. Branch ds.FPHeapMin.imprime()V: I8 Branch 11 IF_ICMPGT L62 - false in context: ds.FPHeapMin:imprime()V
   * Goal 6. Branch ds.FPHeapMin.imprime()V: I8 Branch 11 IF_ICMPGT L62 - true in context: ds.FPHeapMin:imprime()V
   * Goal 7. ds.FPHeapMin.imprime()V: Line 62
   * Goal 8. ds.FPHeapMin.imprime()V: Line 63
   * Goal 9. ds.FPHeapMin.imprime()V: Line 64
   * Goal 10. ds.FPHeapMin.imprime()V: Line 65
   * Goal 11. [METHOD] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 12. [METHOD] ds.FPHeapMin.imprime()V
   * Goal 13. [METHODNOEX] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 14. [METHODNOEX] ds.FPHeapMin.imprime()V
   * Goal 15. Weak Mutation 9: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 16. Weak Mutation 10: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> +
   * Goal 17. Weak Mutation 11: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> %
   * Goal 18. Weak Mutation 12: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> *
   * Goal 19. Weak Mutation 13: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> /
   * Goal 20. Weak Mutation 250: ds.FPHeapMin.imprime()V:62 - ReplaceConstant - 1 -> 0
   * Goal 21. Weak Mutation 251: ds.FPHeapMin.imprime()V:62 - InsertUnaryOp Negation of i
   * Goal 22. Weak Mutation 252: ds.FPHeapMin.imprime()V:62 - InsertUnaryOp IINC 1 i
   * Goal 23. Weak Mutation 253: ds.FPHeapMin.imprime()V:62 - InsertUnaryOp IINC -1 i
   * Goal 24. Weak Mutation 254: ds.FPHeapMin.imprime()V:62 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 255: ds.FPHeapMin.imprime()V:62 - InsertUnaryOp +1
   * Goal 26. Weak Mutation 256: ds.FPHeapMin.imprime()V:62 - InsertUnaryOp -1
   * Goal 27. Weak Mutation 257: ds.FPHeapMin.imprime()V:62 - ReplaceComparisonOperator > -> !=
   * Goal 28. Weak Mutation 258: ds.FPHeapMin.imprime()V:62 - ReplaceComparisonOperator > -> -2
   * Goal 29. Weak Mutation 259: ds.FPHeapMin.imprime()V:62 - ReplaceComparisonOperator > -> >=
   * Goal 30. Weak Mutation 260: ds.FPHeapMin.imprime()V:63 - InsertUnaryOp Negation of i
   * Goal 31. Weak Mutation 261: ds.FPHeapMin.imprime()V:63 - InsertUnaryOp IINC 1 i
   * Goal 32. Weak Mutation 262: ds.FPHeapMin.imprime()V:63 - InsertUnaryOp IINC -1 i
   * Goal 33. Weak Mutation 263: ds.FPHeapMin.imprime()V:63 - ReplaceComparisonOperator == -> !=
   * Goal 34. Weak Mutation 264: ds.FPHeapMin.imprime()V:63 - ReplaceConstant -   -> 
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MeuItem meuItem0 = new MeuItem((-1350));
      Item[] itemArray0 = new Item[5];
      itemArray0[1] = (Item) meuItem0;
      itemArray0[2] = (Item) meuItem0;
      itemArray0[3] = (Item) meuItem0;
      itemArray0[4] = (Item) meuItem0;
      FPHeapMin fPHeapMin0 = new FPHeapMin(itemArray0);
      fPHeapMin0.imprime();
  }

  //Test case number: 8
  /*
   * 112 covered goals:
   * Goal 1. ds.FPHeapMin.<init>(I)V: root-Branch
   * Goal 2. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: I10 Branch 7 IFNONNULL L44 - true
   * Goal 3. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: I40 Branch 8 IF_ICMPLE L47 - true
   * Goal 4. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: I40 Branch 8 IF_ICMPLE L47 - false
   * Goal 5. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: I49 Branch 9 IFGT L47 - false
   * Goal 6. ds.FPHeapMin.insere(Lds/Item;)V: I15 Branch 10 IF_ICMPNE L55 - true
   * Goal 7. Branch ds.FPHeapMin.<init>(I)V: root-Branch in context: ds.FPHeapMin:<init>(I)V
   * Goal 8. Branch ds.FPHeapMin.insere(Lds/Item;)V: I15 Branch 10 IF_ICMPNE L55 - true in context: ds.FPHeapMin:insere(Lds/Item;)V
   * Goal 9. ds.FPHeapMin.<init>(I)V: Line 8
   * Goal 10. ds.FPHeapMin.<init>(I)V: Line 9
   * Goal 11. ds.FPHeapMin.<init>(I)V: Line 10
   * Goal 12. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: Line 43
   * Goal 13. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: Line 44
   * Goal 14. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: Line 46
   * Goal 15. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: Line 47
   * Goal 16. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: Line 48
   * Goal 17. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: Line 50
   * Goal 18. ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V: Line 51
   * Goal 19. ds.FPHeapMin.insere(Lds/Item;)V: Line 54
   * Goal 20. ds.FPHeapMin.insere(Lds/Item;)V: Line 55
   * Goal 21. ds.FPHeapMin.insere(Lds/Item;)V: Line 56
   * Goal 22. ds.FPHeapMin.insere(Lds/Item;)V: Line 57
   * Goal 23. ds.FPHeapMin.insere(Lds/Item;)V: Line 58
   * Goal 24. ds.FPHeapMin.insere(Lds/Item;)V: Line 59
   * Goal 25. [METHOD] ds.FPHeapMin.<init>(I)V
   * Goal 26. [METHOD] ds.FPHeapMin.insere(Lds/Item;)V
   * Goal 27. [METHODNOEX] ds.FPHeapMin.<init>(I)V
   * Goal 28. [METHODNOEX] ds.FPHeapMin.insere(Lds/Item;)V
   * Goal 29. Weak Mutation 0: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp Negation of maxTam
   * Goal 30. Weak Mutation 1: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp IINC 1 maxTam
   * Goal 31. Weak Mutation 2: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp IINC -1 maxTam
   * Goal 32. Weak Mutation 3: ds.FPHeapMin.<init>(I)V:8 - ReplaceConstant - 1 -> 0
   * Goal 33. Weak Mutation 4: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> %
   * Goal 34. Weak Mutation 5: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> -
   * Goal 35. Weak Mutation 6: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> *
   * Goal 36. Weak Mutation 7: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> /
   * Goal 37. Weak Mutation 8: ds.FPHeapMin.<init>(I)V:9 - ReplaceConstant - 0 -> 1
   * Goal 38. Weak Mutation 167: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:43 - InsertUnaryOp Negation of i
   * Goal 39. Weak Mutation 168: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:43 - InsertUnaryOp IINC 1 i
   * Goal 40. Weak Mutation 169: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:43 - InsertUnaryOp IINC -1 i
   * Goal 41. Weak Mutation 170: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:44 - ReplaceComparisonOperator != null -> = null
   * Goal 42. Weak Mutation 173: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - InsertUnaryOp Negation of i
   * Goal 43. Weak Mutation 174: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - InsertUnaryOp IINC 1 i
   * Goal 44. Weak Mutation 175: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - InsertUnaryOp IINC -1 i
   * Goal 45. Weak Mutation 176: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceConstant - 1 -> 0
   * Goal 46. Weak Mutation 177: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceComparisonOperator <= -> >
   * Goal 47. Weak Mutation 178: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - InsertUnaryOp Negation of i
   * Goal 48. Weak Mutation 179: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - InsertUnaryOp IINC 1 i
   * Goal 49. Weak Mutation 180: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - InsertUnaryOp IINC -1 i
   * Goal 50. Weak Mutation 181: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceConstant - 2 -> 0
   * Goal 51. Weak Mutation 182: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceConstant - 2 -> 1
   * Goal 52. Weak Mutation 183: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceConstant - 2 -> -1
   * Goal 53. Weak Mutation 184: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceConstant - 2 -> 3
   * Goal 54. Weak Mutation 185: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceArithmeticOperator / -> +
   * Goal 55. Weak Mutation 186: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceArithmeticOperator / -> %
   * Goal 56. Weak Mutation 187: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceArithmeticOperator / -> -
   * Goal 57. Weak Mutation 188: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceArithmeticOperator / -> *
   * Goal 58. Weak Mutation 191: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:47 - ReplaceComparisonOperator > -> >=
   * Goal 59. Weak Mutation 192: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - InsertUnaryOp Negation of i
   * Goal 60. Weak Mutation 193: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - InsertUnaryOp IINC 1 i
   * Goal 61. Weak Mutation 194: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - InsertUnaryOp IINC -1 i
   * Goal 62. Weak Mutation 195: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - InsertUnaryOp Negation of i
   * Goal 63. Weak Mutation 196: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - InsertUnaryOp IINC 1 i
   * Goal 64. Weak Mutation 197: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - InsertUnaryOp IINC -1 i
   * Goal 65. Weak Mutation 198: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceConstant - 2 -> 0
   * Goal 66. Weak Mutation 199: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceConstant - 2 -> 1
   * Goal 67. Weak Mutation 200: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceConstant - 2 -> -1
   * Goal 68. Weak Mutation 201: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceConstant - 2 -> 3
   * Goal 69. Weak Mutation 202: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceArithmeticOperator / -> +
   * Goal 70. Weak Mutation 203: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceArithmeticOperator / -> %
   * Goal 71. Weak Mutation 204: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceArithmeticOperator / -> -
   * Goal 72. Weak Mutation 205: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceArithmeticOperator / -> *
   * Goal 73. Weak Mutation 206: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - InsertUnaryOp Negation of i
   * Goal 74. Weak Mutation 207: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - InsertUnaryOp IINC 1 i
   * Goal 75. Weak Mutation 208: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - InsertUnaryOp IINC -1 i
   * Goal 76. Weak Mutation 209: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceConstant - 2 -> 0
   * Goal 77. Weak Mutation 210: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceConstant - 2 -> 1
   * Goal 78. Weak Mutation 211: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceConstant - 2 -> -1
   * Goal 79. Weak Mutation 212: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceConstant - 2 -> 3
   * Goal 80. Weak Mutation 213: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceArithmeticOperator / -> +
   * Goal 81. Weak Mutation 214: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceArithmeticOperator / -> %
   * Goal 82. Weak Mutation 215: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceArithmeticOperator / -> -
   * Goal 83. Weak Mutation 216: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:48 - ReplaceArithmeticOperator / -> *
   * Goal 84. Weak Mutation 217: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:50 - InsertUnaryOp Negation of i
   * Goal 85. Weak Mutation 218: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:50 - InsertUnaryOp IINC 1 i
   * Goal 86. Weak Mutation 219: ds.FPHeapMin.diminuiChave(ILjava/lang/Object;)V:50 - InsertUnaryOp IINC -1 i
   * Goal 87. Weak Mutation 220: ds.FPHeapMin.insere(Lds/Item;)V:54 - InsertUnaryOp Negation
   * Goal 88. Weak Mutation 221: ds.FPHeapMin.insere(Lds/Item;)V:54 - InsertUnaryOp +1
   * Goal 89. Weak Mutation 222: ds.FPHeapMin.insere(Lds/Item;)V:54 - InsertUnaryOp -1
   * Goal 90. Weak Mutation 223: ds.FPHeapMin.insere(Lds/Item;)V:54 - ReplaceConstant - 1 -> 0
   * Goal 91. Weak Mutation 224: ds.FPHeapMin.insere(Lds/Item;)V:54 - ReplaceArithmeticOperator + -> %
   * Goal 92. Weak Mutation 225: ds.FPHeapMin.insere(Lds/Item;)V:54 - ReplaceArithmeticOperator + -> -
   * Goal 93. Weak Mutation 226: ds.FPHeapMin.insere(Lds/Item;)V:54 - ReplaceArithmeticOperator + -> *
   * Goal 94. Weak Mutation 227: ds.FPHeapMin.insere(Lds/Item;)V:54 - ReplaceArithmeticOperator + -> /
   * Goal 95. Weak Mutation 228: ds.FPHeapMin.insere(Lds/Item;)V:55 - InsertUnaryOp Negation
   * Goal 96. Weak Mutation 229: ds.FPHeapMin.insere(Lds/Item;)V:55 - InsertUnaryOp +1
   * Goal 97. Weak Mutation 230: ds.FPHeapMin.insere(Lds/Item;)V:55 - InsertUnaryOp -1
   * Goal 98. Weak Mutation 233: ds.FPHeapMin.insere(Lds/Item;)V:55 - ReplaceComparisonOperator != -> >
   * Goal 99. Weak Mutation 236: ds.FPHeapMin.insere(Lds/Item;)V:56 - InsertUnaryOp Negation
   * Goal 100. Weak Mutation 237: ds.FPHeapMin.insere(Lds/Item;)V:56 - InsertUnaryOp +1
   * Goal 101. Weak Mutation 238: ds.FPHeapMin.insere(Lds/Item;)V:56 - InsertUnaryOp -1
   * Goal 102. Weak Mutation 239: ds.FPHeapMin.insere(Lds/Item;)V:57 - InsertUnaryOp Negation
   * Goal 103. Weak Mutation 240: ds.FPHeapMin.insere(Lds/Item;)V:57 - InsertUnaryOp +1
   * Goal 104. Weak Mutation 241: ds.FPHeapMin.insere(Lds/Item;)V:57 - InsertUnaryOp -1
   * Goal 105. Weak Mutation 242: ds.FPHeapMin.insere(Lds/Item;)V:57 - ReplaceConstant - 2147483647 -> 0
   * Goal 106. Weak Mutation 243: ds.FPHeapMin.insere(Lds/Item;)V:57 - ReplaceConstant - 2147483647 -> 1
   * Goal 107. Weak Mutation 244: ds.FPHeapMin.insere(Lds/Item;)V:57 - ReplaceConstant - 2147483647 -> -1
   * Goal 108. Weak Mutation 245: ds.FPHeapMin.insere(Lds/Item;)V:57 - ReplaceConstant - 2147483647 -> 2147483646
   * Goal 109. Weak Mutation 246: ds.FPHeapMin.insere(Lds/Item;)V:57 - ReplaceConstant - 2147483647 -> -2147483648
   * Goal 110. Weak Mutation 247: ds.FPHeapMin.insere(Lds/Item;)V:58 - InsertUnaryOp Negation
   * Goal 111. Weak Mutation 248: ds.FPHeapMin.insere(Lds/Item;)V:58 - InsertUnaryOp +1
   * Goal 112. Weak Mutation 249: ds.FPHeapMin.insere(Lds/Item;)V:58 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FPHeapMin fPHeapMin0 = new FPHeapMin(3070);
      MeuItem meuItem0 = new MeuItem(3070);
      fPHeapMin0.insere(meuItem0);
      fPHeapMin0.insere(meuItem0);
      assertEquals(4, meuItem0.tamanho());
  }

  //Test case number: 9
  /*
   * 37 covered goals:
   * Goal 1. ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch
   * Goal 2. ds.FPHeapMin.constroi()V: I13 Branch 5 IF_ICMPLE L27 - true
   * Goal 3. Branch ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch in context: ds.FPHeapMin:<init>([Lds/Item;)V
   * Goal 4. Branch ds.FPHeapMin.constroi()V: I13 Branch 5 IF_ICMPLE L27 - true in context: ds.FPHeapMin:constroi()V
   * Goal 5. ds.FPHeapMin.constroi()V: Line 26
   * Goal 6. ds.FPHeapMin.constroi()V: Line 27
   * Goal 7. ds.FPHeapMin.constroi()V: Line 28
   * Goal 8. [METHOD] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 9. [METHOD] ds.FPHeapMin.constroi()V
   * Goal 10. [METHODNOEX] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 11. [METHODNOEX] ds.FPHeapMin.constroi()V
   * Goal 12. Weak Mutation 9: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 13. Weak Mutation 10: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> +
   * Goal 14. Weak Mutation 11: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> %
   * Goal 15. Weak Mutation 12: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> *
   * Goal 16. Weak Mutation 13: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> /
   * Goal 17. Weak Mutation 118: ds.FPHeapMin.constroi()V:26 - InsertUnaryOp Negation
   * Goal 18. Weak Mutation 119: ds.FPHeapMin.constroi()V:26 - InsertUnaryOp +1
   * Goal 19. Weak Mutation 120: ds.FPHeapMin.constroi()V:26 - InsertUnaryOp -1
   * Goal 20. Weak Mutation 121: ds.FPHeapMin.constroi()V:26 - ReplaceConstant - 2 -> 0
   * Goal 21. Weak Mutation 122: ds.FPHeapMin.constroi()V:26 - ReplaceConstant - 2 -> 1
   * Goal 22. Weak Mutation 123: ds.FPHeapMin.constroi()V:26 - ReplaceConstant - 2 -> -1
   * Goal 23. Weak Mutation 124: ds.FPHeapMin.constroi()V:26 - ReplaceConstant - 2 -> 3
   * Goal 24. Weak Mutation 125: ds.FPHeapMin.constroi()V:26 - ReplaceArithmeticOperator / -> +
   * Goal 25. Weak Mutation 126: ds.FPHeapMin.constroi()V:26 - ReplaceArithmeticOperator / -> %
   * Goal 26. Weak Mutation 127: ds.FPHeapMin.constroi()V:26 - ReplaceArithmeticOperator / -> -
   * Goal 27. Weak Mutation 128: ds.FPHeapMin.constroi()V:26 - ReplaceArithmeticOperator / -> *
   * Goal 28. Weak Mutation 129: ds.FPHeapMin.constroi()V:26 - ReplaceConstant - 1 -> 0
   * Goal 29. Weak Mutation 130: ds.FPHeapMin.constroi()V:26 - ReplaceArithmeticOperator + -> %
   * Goal 30. Weak Mutation 131: ds.FPHeapMin.constroi()V:26 - ReplaceArithmeticOperator + -> -
   * Goal 31. Weak Mutation 132: ds.FPHeapMin.constroi()V:26 - ReplaceArithmeticOperator + -> *
   * Goal 32. Weak Mutation 133: ds.FPHeapMin.constroi()V:26 - ReplaceArithmeticOperator + -> /
   * Goal 33. Weak Mutation 134: ds.FPHeapMin.constroi()V:27 - InsertUnaryOp Negation of esq
   * Goal 34. Weak Mutation 135: ds.FPHeapMin.constroi()V:27 - InsertUnaryOp IINC 1 esq
   * Goal 35. Weak Mutation 136: ds.FPHeapMin.constroi()V:27 - InsertUnaryOp IINC -1 esq
   * Goal 36. Weak Mutation 137: ds.FPHeapMin.constroi()V:27 - ReplaceConstant - 1 -> 0
   * Goal 37. Weak Mutation 138: ds.FPHeapMin.constroi()V:27 - ReplaceComparisonOperator <= -> >
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Item[] itemArray0 = new Item[0];
      FPHeapMin fPHeapMin0 = new FPHeapMin(itemArray0);
      fPHeapMin0.constroi();
  }

  //Test case number: 10
  /*
   * 114 covered goals:
   * Goal 1. ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch
   * Goal 2. ds.FPHeapMin.refaz(II)V: I17 Branch 1 IF_ICMPGT L17 - false
   * Goal 3. ds.FPHeapMin.refaz(II)V: I22 Branch 2 IF_ICMPGE L18 - false
   * Goal 4. ds.FPHeapMin.refaz(II)V: I34 Branch 3 IFLE L18 - true
   * Goal 5. ds.FPHeapMin.refaz(II)V: I44 Branch 4 IFGT L19 - false
   * Goal 6. ds.FPHeapMin.retiraMin()Lds/Item;: I5 Branch 6 IF_ICMPGE L34 - true
   * Goal 7. Branch ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch in context: ds.FPHeapMin:<init>([Lds/Item;)V
   * Goal 8. Branch ds.FPHeapMin.retiraMin()Lds/Item;: I5 Branch 6 IF_ICMPGE L34 - true in context: ds.FPHeapMin:retiraMin()Lds/Item;
   * Goal 9. [Output]: ds.FPHeapMin.retiraMin()Lds/Item;:Null
   * Goal 10. ds.FPHeapMin.refaz(II)V: Line 15
   * Goal 11. ds.FPHeapMin.refaz(II)V: Line 16
   * Goal 12. ds.FPHeapMin.refaz(II)V: Line 17
   * Goal 13. ds.FPHeapMin.refaz(II)V: Line 18
   * Goal 14. ds.FPHeapMin.refaz(II)V: Line 19
   * Goal 15. ds.FPHeapMin.refaz(II)V: Line 22
   * Goal 16. ds.FPHeapMin.refaz(II)V: Line 23
   * Goal 17. ds.FPHeapMin.retiraMin()Lds/Item;: Line 34
   * Goal 18. ds.FPHeapMin.retiraMin()Lds/Item;: Line 36
   * Goal 19. ds.FPHeapMin.retiraMin()Lds/Item;: Line 37
   * Goal 20. ds.FPHeapMin.retiraMin()Lds/Item;: Line 39
   * Goal 21. [METHOD] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 22. [METHOD] ds.FPHeapMin.retiraMin()Lds/Item;
   * Goal 23. [METHODNOEX] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 24. [METHODNOEX] ds.FPHeapMin.retiraMin()Lds/Item;
   * Goal 25. Weak Mutation 9: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 26. Weak Mutation 10: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> +
   * Goal 27. Weak Mutation 11: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> %
   * Goal 28. Weak Mutation 12: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> *
   * Goal 29. Weak Mutation 13: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> /
   * Goal 30. Weak Mutation 14: ds.FPHeapMin.refaz(II)V:15 - ReplaceVariable esq -> dir
   * Goal 31. Weak Mutation 15: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp Negation of esq
   * Goal 32. Weak Mutation 16: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp IINC 1 esq
   * Goal 33. Weak Mutation 17: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp IINC -1 esq
   * Goal 34. Weak Mutation 18: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 0
   * Goal 35. Weak Mutation 19: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 1
   * Goal 36. Weak Mutation 20: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> -1
   * Goal 37. Weak Mutation 21: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 3
   * Goal 38. Weak Mutation 22: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> +
   * Goal 39. Weak Mutation 23: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> %
   * Goal 40. Weak Mutation 24: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> -
   * Goal 41. Weak Mutation 25: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> /
   * Goal 42. Weak Mutation 26: ds.FPHeapMin.refaz(II)V:16 - ReplaceVariable esq -> dir
   * Goal 43. Weak Mutation 27: ds.FPHeapMin.refaz(II)V:16 - ReplaceVariable esq -> j
   * Goal 44. Weak Mutation 28: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp Negation of esq
   * Goal 45. Weak Mutation 29: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp IINC 1 esq
   * Goal 46. Weak Mutation 30: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp IINC -1 esq
   * Goal 47. Weak Mutation 31: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable j -> dir
   * Goal 48. Weak Mutation 32: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable j -> esq
   * Goal 49. Weak Mutation 33: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp Negation of j
   * Goal 50. Weak Mutation 34: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC 1 j
   * Goal 51. Weak Mutation 35: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC -1 j
   * Goal 52. Weak Mutation 36: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable dir -> esq
   * Goal 53. Weak Mutation 37: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable dir -> j
   * Goal 54. Weak Mutation 38: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp Negation of dir
   * Goal 55. Weak Mutation 39: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC 1 dir
   * Goal 56. Weak Mutation 40: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC -1 dir
   * Goal 57. Weak Mutation 41: ds.FPHeapMin.refaz(II)V:17 - ReplaceComparisonOperator > -> !=
   * Goal 58. Weak Mutation 44: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 59. Weak Mutation 45: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 60. Weak Mutation 46: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 61. Weak Mutation 47: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 62. Weak Mutation 48: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 63. Weak Mutation 49: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable dir -> esq
   * Goal 64. Weak Mutation 50: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable dir -> j
   * Goal 65. Weak Mutation 51: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of dir
   * Goal 66. Weak Mutation 52: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 dir
   * Goal 67. Weak Mutation 53: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 dir
   * Goal 68. Weak Mutation 54: ds.FPHeapMin.refaz(II)V:18 - ReplaceComparisonOperator >= -> -1
   * Goal 69. Weak Mutation 57: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 70. Weak Mutation 58: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 71. Weak Mutation 59: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 72. Weak Mutation 60: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 73. Weak Mutation 61: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 74. Weak Mutation 62: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 75. Weak Mutation 63: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 76. Weak Mutation 64: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 77. Weak Mutation 65: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 78. Weak Mutation 66: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 79. Weak Mutation 67: ds.FPHeapMin.refaz(II)V:18 - ReplaceConstant - 1 -> 0
   * Goal 80. Weak Mutation 68: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> %
   * Goal 81. Weak Mutation 69: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> -
   * Goal 82. Weak Mutation 70: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> *
   * Goal 83. Weak Mutation 71: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> /
   * Goal 84. Weak Mutation 74: ds.FPHeapMin.refaz(II)V:18 - ReplaceComparisonOperator <= -> <
   * Goal 85. Weak Mutation 77: ds.FPHeapMin.refaz(II)V:19 - ReplaceVariable j -> dir
   * Goal 86. Weak Mutation 78: ds.FPHeapMin.refaz(II)V:19 - ReplaceVariable j -> esq
   * Goal 87. Weak Mutation 79: ds.FPHeapMin.refaz(II)V:19 - InsertUnaryOp Negation of j
   * Goal 88. Weak Mutation 80: ds.FPHeapMin.refaz(II)V:19 - InsertUnaryOp IINC 1 j
   * Goal 89. Weak Mutation 81: ds.FPHeapMin.refaz(II)V:19 - InsertUnaryOp IINC -1 j
   * Goal 90. Weak Mutation 84: ds.FPHeapMin.refaz(II)V:19 - ReplaceComparisonOperator > -> >=
   * Goal 91. Weak Mutation 113: ds.FPHeapMin.refaz(II)V:22 - ReplaceVariable esq -> dir
   * Goal 92. Weak Mutation 114: ds.FPHeapMin.refaz(II)V:22 - ReplaceVariable esq -> j
   * Goal 93. Weak Mutation 115: ds.FPHeapMin.refaz(II)V:22 - InsertUnaryOp Negation of esq
   * Goal 94. Weak Mutation 116: ds.FPHeapMin.refaz(II)V:22 - InsertUnaryOp IINC 1 esq
   * Goal 95. Weak Mutation 117: ds.FPHeapMin.refaz(II)V:22 - InsertUnaryOp IINC -1 esq
   * Goal 96. Weak Mutation 146: ds.FPHeapMin.retiraMin()Lds/Item;:34 - InsertUnaryOp Negation
   * Goal 97. Weak Mutation 147: ds.FPHeapMin.retiraMin()Lds/Item;:34 - InsertUnaryOp +1
   * Goal 98. Weak Mutation 148: ds.FPHeapMin.retiraMin()Lds/Item;:34 - InsertUnaryOp -1
   * Goal 99. Weak Mutation 149: ds.FPHeapMin.retiraMin()Lds/Item;:34 - ReplaceConstant - 1 -> 0
   * Goal 100. Weak Mutation 150: ds.FPHeapMin.retiraMin()Lds/Item;:34 - ReplaceComparisonOperator >= -> <
   * Goal 101. Weak Mutation 153: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceConstant - 1 -> 0
   * Goal 102. Weak Mutation 154: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceConstant - 1 -> 0
   * Goal 103. Weak Mutation 155: ds.FPHeapMin.retiraMin()Lds/Item;:36 - InsertUnaryOp Negation
   * Goal 104. Weak Mutation 156: ds.FPHeapMin.retiraMin()Lds/Item;:36 - InsertUnaryOp +1
   * Goal 105. Weak Mutation 157: ds.FPHeapMin.retiraMin()Lds/Item;:36 - InsertUnaryOp -1
   * Goal 106. Weak Mutation 158: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceConstant - 1 -> 0
   * Goal 107. Weak Mutation 159: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> +
   * Goal 108. Weak Mutation 160: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> %
   * Goal 109. Weak Mutation 161: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> *
   * Goal 110. Weak Mutation 162: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> /
   * Goal 111. Weak Mutation 163: ds.FPHeapMin.retiraMin()Lds/Item;:37 - ReplaceConstant - 1 -> 0
   * Goal 112. Weak Mutation 164: ds.FPHeapMin.retiraMin()Lds/Item;:37 - InsertUnaryOp Negation
   * Goal 113. Weak Mutation 165: ds.FPHeapMin.retiraMin()Lds/Item;:37 - InsertUnaryOp +1
   * Goal 114. Weak Mutation 166: ds.FPHeapMin.retiraMin()Lds/Item;:37 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MeuItem meuItem0 = new MeuItem((-1350));
      Item[] itemArray0 = new Item[5];
      itemArray0[2] = (Item) meuItem0;
      itemArray0[3] = (Item) meuItem0;
      itemArray0[4] = (Item) meuItem0;
      FPHeapMin fPHeapMin0 = new FPHeapMin(itemArray0);
      MeuItem meuItem1 = (MeuItem)fPHeapMin0.retiraMin();
      assertNull(meuItem1);
  }

  //Test case number: 11
  /*
   * 143 covered goals:
   * Goal 1. ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch
   * Goal 2. ds.FPHeapMin.refaz(II)V: I17 Branch 1 IF_ICMPGT L17 - true
   * Goal 3. ds.FPHeapMin.refaz(II)V: I17 Branch 1 IF_ICMPGT L17 - false
   * Goal 4. ds.FPHeapMin.refaz(II)V: I22 Branch 2 IF_ICMPGE L18 - false
   * Goal 5. ds.FPHeapMin.refaz(II)V: I34 Branch 3 IFLE L18 - true
   * Goal 6. ds.FPHeapMin.refaz(II)V: I44 Branch 4 IFGT L19 - true
   * Goal 7. ds.FPHeapMin.retiraMin()Lds/Item;: I5 Branch 6 IF_ICMPGE L34 - true
   * Goal 8. Branch ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch in context: ds.FPHeapMin:<init>([Lds/Item;)V
   * Goal 9. Branch ds.FPHeapMin.retiraMin()Lds/Item;: I5 Branch 6 IF_ICMPGE L34 - true in context: ds.FPHeapMin:retiraMin()Lds/Item;
   * Goal 10. [Output]: ds.FPHeapMin.retiraMin()Lds/Item;:Null
   * Goal 11. ds.FPHeapMin.refaz(II)V: Line 15
   * Goal 12. ds.FPHeapMin.refaz(II)V: Line 16
   * Goal 13. ds.FPHeapMin.refaz(II)V: Line 17
   * Goal 14. ds.FPHeapMin.refaz(II)V: Line 18
   * Goal 15. ds.FPHeapMin.refaz(II)V: Line 19
   * Goal 16. ds.FPHeapMin.refaz(II)V: Line 20
   * Goal 17. ds.FPHeapMin.refaz(II)V: Line 22
   * Goal 18. ds.FPHeapMin.refaz(II)V: Line 23
   * Goal 19. ds.FPHeapMin.retiraMin()Lds/Item;: Line 34
   * Goal 20. ds.FPHeapMin.retiraMin()Lds/Item;: Line 36
   * Goal 21. ds.FPHeapMin.retiraMin()Lds/Item;: Line 37
   * Goal 22. ds.FPHeapMin.retiraMin()Lds/Item;: Line 39
   * Goal 23. [METHOD] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 24. [METHOD] ds.FPHeapMin.retiraMin()Lds/Item;
   * Goal 25. [METHODNOEX] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 26. [METHODNOEX] ds.FPHeapMin.retiraMin()Lds/Item;
   * Goal 27. Weak Mutation 9: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 28. Weak Mutation 10: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> +
   * Goal 29. Weak Mutation 11: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> %
   * Goal 30. Weak Mutation 12: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> *
   * Goal 31. Weak Mutation 13: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> /
   * Goal 32. Weak Mutation 14: ds.FPHeapMin.refaz(II)V:15 - ReplaceVariable esq -> dir
   * Goal 33. Weak Mutation 15: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp Negation of esq
   * Goal 34. Weak Mutation 16: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp IINC 1 esq
   * Goal 35. Weak Mutation 17: ds.FPHeapMin.refaz(II)V:15 - InsertUnaryOp IINC -1 esq
   * Goal 36. Weak Mutation 18: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 0
   * Goal 37. Weak Mutation 19: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 1
   * Goal 38. Weak Mutation 20: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> -1
   * Goal 39. Weak Mutation 21: ds.FPHeapMin.refaz(II)V:15 - ReplaceConstant - 2 -> 3
   * Goal 40. Weak Mutation 22: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> +
   * Goal 41. Weak Mutation 23: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> %
   * Goal 42. Weak Mutation 24: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> -
   * Goal 43. Weak Mutation 25: ds.FPHeapMin.refaz(II)V:15 - ReplaceArithmeticOperator * -> /
   * Goal 44. Weak Mutation 26: ds.FPHeapMin.refaz(II)V:16 - ReplaceVariable esq -> dir
   * Goal 45. Weak Mutation 27: ds.FPHeapMin.refaz(II)V:16 - ReplaceVariable esq -> j
   * Goal 46. Weak Mutation 28: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp Negation of esq
   * Goal 47. Weak Mutation 29: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp IINC 1 esq
   * Goal 48. Weak Mutation 30: ds.FPHeapMin.refaz(II)V:16 - InsertUnaryOp IINC -1 esq
   * Goal 49. Weak Mutation 31: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable j -> dir
   * Goal 50. Weak Mutation 32: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable j -> esq
   * Goal 51. Weak Mutation 33: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp Negation of j
   * Goal 52. Weak Mutation 34: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC 1 j
   * Goal 53. Weak Mutation 35: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC -1 j
   * Goal 54. Weak Mutation 36: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable dir -> esq
   * Goal 55. Weak Mutation 37: ds.FPHeapMin.refaz(II)V:17 - ReplaceVariable dir -> j
   * Goal 56. Weak Mutation 38: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp Negation of dir
   * Goal 57. Weak Mutation 39: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC 1 dir
   * Goal 58. Weak Mutation 40: ds.FPHeapMin.refaz(II)V:17 - InsertUnaryOp IINC -1 dir
   * Goal 59. Weak Mutation 41: ds.FPHeapMin.refaz(II)V:17 - ReplaceComparisonOperator > -> !=
   * Goal 60. Weak Mutation 42: ds.FPHeapMin.refaz(II)V:17 - ReplaceComparisonOperator > -> -2
   * Goal 61. Weak Mutation 44: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 62. Weak Mutation 45: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 63. Weak Mutation 46: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 64. Weak Mutation 47: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 65. Weak Mutation 48: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 66. Weak Mutation 49: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable dir -> esq
   * Goal 67. Weak Mutation 50: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable dir -> j
   * Goal 68. Weak Mutation 51: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of dir
   * Goal 69. Weak Mutation 52: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 dir
   * Goal 70. Weak Mutation 53: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 dir
   * Goal 71. Weak Mutation 54: ds.FPHeapMin.refaz(II)V:18 - ReplaceComparisonOperator >= -> -1
   * Goal 72. Weak Mutation 57: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 73. Weak Mutation 58: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 74. Weak Mutation 59: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 75. Weak Mutation 60: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 76. Weak Mutation 61: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 77. Weak Mutation 62: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> dir
   * Goal 78. Weak Mutation 63: ds.FPHeapMin.refaz(II)V:18 - ReplaceVariable j -> esq
   * Goal 79. Weak Mutation 64: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp Negation of j
   * Goal 80. Weak Mutation 65: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC 1 j
   * Goal 81. Weak Mutation 66: ds.FPHeapMin.refaz(II)V:18 - InsertUnaryOp IINC -1 j
   * Goal 82. Weak Mutation 67: ds.FPHeapMin.refaz(II)V:18 - ReplaceConstant - 1 -> 0
   * Goal 83. Weak Mutation 68: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> %
   * Goal 84. Weak Mutation 69: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> -
   * Goal 85. Weak Mutation 70: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> *
   * Goal 86. Weak Mutation 71: ds.FPHeapMin.refaz(II)V:18 - ReplaceArithmeticOperator + -> /
   * Goal 87. Weak Mutation 73: ds.FPHeapMin.refaz(II)V:18 - ReplaceComparisonOperator <= -> ==
   * Goal 88. Weak Mutation 77: ds.FPHeapMin.refaz(II)V:19 - ReplaceVariable j -> dir
   * Goal 89. Weak Mutation 78: ds.FPHeapMin.refaz(II)V:19 - ReplaceVariable j -> esq
   * Goal 90. Weak Mutation 79: ds.FPHeapMin.refaz(II)V:19 - InsertUnaryOp Negation of j
   * Goal 91. Weak Mutation 80: ds.FPHeapMin.refaz(II)V:19 - InsertUnaryOp IINC 1 j
   * Goal 92. Weak Mutation 81: ds.FPHeapMin.refaz(II)V:19 - InsertUnaryOp IINC -1 j
   * Goal 93. Weak Mutation 82: ds.FPHeapMin.refaz(II)V:19 - ReplaceComparisonOperator > -> -2
   * Goal 94. Weak Mutation 85: ds.FPHeapMin.refaz(II)V:20 - ReplaceVariable esq -> dir
   * Goal 95. Weak Mutation 86: ds.FPHeapMin.refaz(II)V:20 - ReplaceVariable esq -> j
   * Goal 96. Weak Mutation 87: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp Negation of esq
   * Goal 97. Weak Mutation 88: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp IINC 1 esq
   * Goal 98. Weak Mutation 89: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp IINC -1 esq
   * Goal 99. Weak Mutation 90: ds.FPHeapMin.refaz(II)V:20 - ReplaceVariable j -> dir
   * Goal 100. Weak Mutation 91: ds.FPHeapMin.refaz(II)V:20 - ReplaceVariable j -> esq
   * Goal 101. Weak Mutation 92: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp Negation of j
   * Goal 102. Weak Mutation 93: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp IINC 1 j
   * Goal 103. Weak Mutation 94: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp IINC -1 j
   * Goal 104. Weak Mutation 95: ds.FPHeapMin.refaz(II)V:20 - ReplaceVariable j -> dir
   * Goal 105. Weak Mutation 96: ds.FPHeapMin.refaz(II)V:20 - ReplaceVariable j -> esq
   * Goal 106. Weak Mutation 97: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp Negation of j
   * Goal 107. Weak Mutation 98: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp IINC 1 j
   * Goal 108. Weak Mutation 99: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp IINC -1 j
   * Goal 109. Weak Mutation 100: ds.FPHeapMin.refaz(II)V:20 - ReplaceVariable esq -> dir
   * Goal 110. Weak Mutation 102: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp Negation of esq
   * Goal 111. Weak Mutation 103: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp IINC 1 esq
   * Goal 112. Weak Mutation 104: ds.FPHeapMin.refaz(II)V:20 - InsertUnaryOp IINC -1 esq
   * Goal 113. Weak Mutation 105: ds.FPHeapMin.refaz(II)V:20 - ReplaceConstant - 2 -> 0
   * Goal 114. Weak Mutation 106: ds.FPHeapMin.refaz(II)V:20 - ReplaceConstant - 2 -> 1
   * Goal 115. Weak Mutation 107: ds.FPHeapMin.refaz(II)V:20 - ReplaceConstant - 2 -> -1
   * Goal 116. Weak Mutation 108: ds.FPHeapMin.refaz(II)V:20 - ReplaceConstant - 2 -> 3
   * Goal 117. Weak Mutation 110: ds.FPHeapMin.refaz(II)V:20 - ReplaceArithmeticOperator * -> %
   * Goal 118. Weak Mutation 111: ds.FPHeapMin.refaz(II)V:20 - ReplaceArithmeticOperator * -> -
   * Goal 119. Weak Mutation 112: ds.FPHeapMin.refaz(II)V:20 - ReplaceArithmeticOperator * -> /
   * Goal 120. Weak Mutation 113: ds.FPHeapMin.refaz(II)V:22 - ReplaceVariable esq -> dir
   * Goal 121. Weak Mutation 114: ds.FPHeapMin.refaz(II)V:22 - ReplaceVariable esq -> j
   * Goal 122. Weak Mutation 115: ds.FPHeapMin.refaz(II)V:22 - InsertUnaryOp Negation of esq
   * Goal 123. Weak Mutation 116: ds.FPHeapMin.refaz(II)V:22 - InsertUnaryOp IINC 1 esq
   * Goal 124. Weak Mutation 117: ds.FPHeapMin.refaz(II)V:22 - InsertUnaryOp IINC -1 esq
   * Goal 125. Weak Mutation 146: ds.FPHeapMin.retiraMin()Lds/Item;:34 - InsertUnaryOp Negation
   * Goal 126. Weak Mutation 147: ds.FPHeapMin.retiraMin()Lds/Item;:34 - InsertUnaryOp +1
   * Goal 127. Weak Mutation 148: ds.FPHeapMin.retiraMin()Lds/Item;:34 - InsertUnaryOp -1
   * Goal 128. Weak Mutation 149: ds.FPHeapMin.retiraMin()Lds/Item;:34 - ReplaceConstant - 1 -> 0
   * Goal 129. Weak Mutation 150: ds.FPHeapMin.retiraMin()Lds/Item;:34 - ReplaceComparisonOperator >= -> <
   * Goal 130. Weak Mutation 153: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceConstant - 1 -> 0
   * Goal 131. Weak Mutation 154: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceConstant - 1 -> 0
   * Goal 132. Weak Mutation 155: ds.FPHeapMin.retiraMin()Lds/Item;:36 - InsertUnaryOp Negation
   * Goal 133. Weak Mutation 156: ds.FPHeapMin.retiraMin()Lds/Item;:36 - InsertUnaryOp +1
   * Goal 134. Weak Mutation 157: ds.FPHeapMin.retiraMin()Lds/Item;:36 - InsertUnaryOp -1
   * Goal 135. Weak Mutation 158: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceConstant - 1 -> 0
   * Goal 136. Weak Mutation 159: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> +
   * Goal 137. Weak Mutation 160: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> %
   * Goal 138. Weak Mutation 161: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> *
   * Goal 139. Weak Mutation 162: ds.FPHeapMin.retiraMin()Lds/Item;:36 - ReplaceArithmeticOperator - -> /
   * Goal 140. Weak Mutation 163: ds.FPHeapMin.retiraMin()Lds/Item;:37 - ReplaceConstant - 1 -> 0
   * Goal 141. Weak Mutation 164: ds.FPHeapMin.retiraMin()Lds/Item;:37 - InsertUnaryOp Negation
   * Goal 142. Weak Mutation 165: ds.FPHeapMin.retiraMin()Lds/Item;:37 - InsertUnaryOp +1
   * Goal 143. Weak Mutation 166: ds.FPHeapMin.retiraMin()Lds/Item;:37 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MeuItem meuItem0 = new MeuItem((-1350));
      MeuItem meuItem1 = new MeuItem(3071);
      Item[] itemArray0 = new Item[5];
      itemArray0[2] = (Item) meuItem0;
      itemArray0[3] = (Item) meuItem1;
      itemArray0[4] = (Item) meuItem1;
      FPHeapMin fPHeapMin0 = new FPHeapMin(itemArray0);
      MeuItem meuItem2 = (MeuItem)fPHeapMin0.retiraMin();
      assertNull(meuItem2);
  }

  //Test case number: 12
  /*
   * 23 covered goals:
   * Goal 1. ds.FPHeapMin.min()Lds/Item;: root-Branch
   * Goal 2. ds.FPHeapMin.<init>(I)V: root-Branch
   * Goal 3. Branch ds.FPHeapMin.min()Lds/Item;: root-Branch in context: ds.FPHeapMin:min()Lds/Item;
   * Goal 4. Branch ds.FPHeapMin.<init>(I)V: root-Branch in context: ds.FPHeapMin:<init>(I)V
   * Goal 5. [Output]: ds.FPHeapMin.min()Lds/Item;:Null
   * Goal 6. ds.FPHeapMin.<init>(I)V: Line 8
   * Goal 7. ds.FPHeapMin.<init>(I)V: Line 9
   * Goal 8. ds.FPHeapMin.<init>(I)V: Line 10
   * Goal 9. ds.FPHeapMin.min()Lds/Item;: Line 30
   * Goal 10. [METHOD] ds.FPHeapMin.<init>(I)V
   * Goal 11. [METHOD] ds.FPHeapMin.min()Lds/Item;
   * Goal 12. [METHODNOEX] ds.FPHeapMin.<init>(I)V
   * Goal 13. [METHODNOEX] ds.FPHeapMin.min()Lds/Item;
   * Goal 14. Weak Mutation 0: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp Negation of maxTam
   * Goal 15. Weak Mutation 1: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp IINC 1 maxTam
   * Goal 16. Weak Mutation 2: ds.FPHeapMin.<init>(I)V:8 - InsertUnaryOp IINC -1 maxTam
   * Goal 17. Weak Mutation 3: ds.FPHeapMin.<init>(I)V:8 - ReplaceConstant - 1 -> 0
   * Goal 18. Weak Mutation 4: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> %
   * Goal 19. Weak Mutation 5: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> -
   * Goal 20. Weak Mutation 6: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> *
   * Goal 21. Weak Mutation 7: ds.FPHeapMin.<init>(I)V:8 - ReplaceArithmeticOperator + -> /
   * Goal 22. Weak Mutation 8: ds.FPHeapMin.<init>(I)V:9 - ReplaceConstant - 0 -> 1
   * Goal 23. Weak Mutation 145: ds.FPHeapMin.min()Lds/Item;:30 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FPHeapMin fPHeapMin0 = new FPHeapMin(1607);
      Item item0 = fPHeapMin0.min();
      assertNull(item0);
  }

  //Test case number: 13
  /*
   * 15 covered goals:
   * Goal 1. ds.FPHeapMin.min()Lds/Item;: root-Branch
   * Goal 2. ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch
   * Goal 3. Branch ds.FPHeapMin.min()Lds/Item;: root-Branch in context: ds.FPHeapMin:min()Lds/Item;
   * Goal 4. Branch ds.FPHeapMin.<init>([Lds/Item;)V: root-Branch in context: ds.FPHeapMin:<init>([Lds/Item;)V
   * Goal 5. min()Lds/Item;_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 6. ds.FPHeapMin.min()Lds/Item;: Line 30
   * Goal 7. [METHOD] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 8. [METHOD] ds.FPHeapMin.min()Lds/Item;
   * Goal 9. [METHODNOEX] ds.FPHeapMin.<init>([Lds/Item;)V
   * Goal 10. Weak Mutation 9: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 11. Weak Mutation 10: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> +
   * Goal 12. Weak Mutation 11: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> %
   * Goal 13. Weak Mutation 12: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> *
   * Goal 14. Weak Mutation 13: ds.FPHeapMin.<init>([Lds/Item;)V:12 - ReplaceArithmeticOperator - -> /
   * Goal 15. Weak Mutation 145: ds.FPHeapMin.min()Lds/Item;:30 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Item[] itemArray0 = new Item[0];
      FPHeapMin fPHeapMin0 = new FPHeapMin(itemArray0);
      // Undeclared exception!
      try { 
        fPHeapMin0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
    	  assertTrue(true);
      }
  }
}
