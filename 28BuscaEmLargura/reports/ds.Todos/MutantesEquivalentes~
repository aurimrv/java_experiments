32.1 Não equivalente. item será inicializado com null padrão do Java, ao invés do resultado do construtor Celula()

Código mutado: removido new Celula()

32.2 Não equivalente. O construtor Celula() será chamado com valores errados como parãmetros.

Código mutado: Celula item = new Celula (v2, 1);

33.1 (Dúvida)

33.2 (Dúvida)

33.3 (Dúvida)

33.4 Não equivalente. Negando a condicional, o método irá retornar o valor oposto ao correto para
todas as entradas.

Código mutado: return (this.adj[v1].pesquisa (item) == null);

33.5 (Dúvida)

33.6 Não equivalente. O programa sempre irá retornar false, mesmo quando deveria retornar true.

Código mutado: return (false);

33.7 Não equivalente. O programa sempre irá retornar true, mesmo quando deveria retornar false.

Código mutado: return (true);

33.8 (Dúvida)

47.1 Não equivalente. item será inicializado com o valor null padrão java. No código original, ele é
inicializado por this.adj[v].proximo().

Código mutado: removida a chamada a this.ajd[v].proximo.

48.1 Não equivalente. Se a chamada a Aresta() for removida, o código retornará null quando a condicional desta
linha for tanto true quanto false.

Código mutado: removida a chamada a Aresta().

48.3 Não equivalente. Se false for fixado na condicional, ela sempre retornará null, mesmo quando deveria chamar
new Aresta().

Código mutado: return false ? new Aresta (v, item.vertice, item.peso) : null;

51.1 Não equivalente. chave será inicializada com o valor padrão java. No código original, ela é inicializada por
new Celula().

Código mutado: removida a chamada a new Celula().

51.2 Não equivalente. O segundo parâmetro de Celula() está diferente do original.

Código mutado: Celula chave = new Celula (v2, 1);

52.1 (Dúvida)

52.2 Não equivalente. item será inicializado com o valor padrão java, ao invés do retorno de this.adj[v1].retira(chave).

Código mutado: removida a chamada a this.adj[v1].retira(chave)

53.1 Não equivalente. Sem a chamada a new Aresta() o método retornará null tanto para false quanto para true na condicional.

Código mutado: removida a chamada a new Aresta()

53.2 Não equivalente. O método irá retornar o valor contrário ao esperado para todas as chamadas.

Código mutado: return item == null ? new Aresta (v1, v2, item.peso) : null;

53.3 Não equivalente. O método irá retornar sempre null, mesmo quando deveria chamar new Aresta().

Código mutado: return false ? new Aresta (v1, v2, item.peso) : null;

53.4 Não equivalente. O método irá retornar sempre chamar new Areta(), mesmo quando deveria retornar null.

Código mutado: return true ? new Aresta (v1, v2, item.peso) : null;

53.5 (Dúvida)

56.3 Não equivalente. O laço irá pular a posição i = 0 e fará uma iteração a menos.

Código mutado: for (int i = 1; i < this.numVertices; i++) { 

56.5 Não equivalente. Com false dentro da condicional, o laço não fará o número total de iterações.

Código mutado: for (int i = 0; false; i++) { 

57.5 (Dúvida)

57.6 Não equivalente. Removendo o println desta linha, o código não irá imprimir a mensagem projetada no
programa original.

Código mutado: removido o println desta linha.

58.1 Não equivalente. item será inicializado com o valor padrão java, ao invés da chamada a this.adj[i].primeiro().

Código mutado: removida a chamada a this.adj[i].primeiro.

59.2 Não equivalente. Com false na condicional do while, o programa nunca entrará neste bloco de código, mesmo que necessário.

Código mutado: while (false) {

69.2 (Dúvida)

69.4 Não equivalente. O código sempre considerará que a lista não está fazia.

Código mutado: if (true) {

71.3 Não equivalente. Com true dentro da condicional, o bloco while será executado até ocorrer, provavelmente, uma exceção.

Código mutado: while (true) {

72.2 (Dúvida)

72.3 (Dúvida)

73.1 Não equivalente. adj será inicializado com o valor padrão java, ao invés de this.proxAdj(v).

Código mutado: removida a chamada a this.proxAdj(v).
