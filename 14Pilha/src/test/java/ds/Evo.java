/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 03 19:57:16 GMT 2016
 */

package ds;

import org.junit.Test;
import static org.junit.Assert.*;

//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import ds.Pilha;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Evo {

  //Test case number: 0
  /*
   * 34 covered goals:
   * Goal 1. cap3.autoreferencia.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: root-Branch
   * Goal 3. cap3.autoreferencia.Pilha.tamanho()I: root-Branch
   * Goal 4. Branch cap3.autoreferencia.Pilha.tamanho()I: root-Branch in context: cap3.autoreferencia.Pilha:tamanho()I
   * Goal 5. Branch cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: root-Branch in context: cap3.autoreferencia.Pilha:empilha(Ljava/lang/Object;)V
   * Goal 6. Branch cap3.autoreferencia.Pilha.<init>()V: root-Branch in context: cap3.autoreferencia.Pilha:<init>()V
   * Goal 7. [Output]: cap3.autoreferencia.Pilha.tamanho()I:Positive
   * Goal 8. cap3.autoreferencia.Pilha.<init>()V: Line 11
   * Goal 9. cap3.autoreferencia.Pilha.<init>()V: Line 12
   * Goal 10. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 14
   * Goal 11. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 15
   * Goal 12. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 16
   * Goal 13. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 17
   * Goal 14. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 18
   * Goal 15. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 19
   * Goal 16. cap3.autoreferencia.Pilha.tamanho()I: Line 32
   * Goal 17. [METHOD] cap3.autoreferencia.Pilha.<init>()V
   * Goal 18. [METHOD] cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 19. [METHOD] cap3.autoreferencia.Pilha.tamanho()I
   * Goal 20. [METHODNOEX] cap3.autoreferencia.Pilha.<init>()V
   * Goal 21. [METHODNOEX] cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 22. [METHODNOEX] cap3.autoreferencia.Pilha.tamanho()I
   * Goal 23. Weak Mutation 0: cap3.autoreferencia.Pilha.<init>()V:11 - ReplaceConstant - 0 -> 1
   * Goal 24. Weak Mutation 1: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 2: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - InsertUnaryOp +1
   * Goal 26. Weak Mutation 3: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - InsertUnaryOp -1
   * Goal 27. Weak Mutation 4: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceConstant - 1 -> 0
   * Goal 28. Weak Mutation 5: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> %
   * Goal 29. Weak Mutation 6: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> -
   * Goal 30. Weak Mutation 7: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> *
   * Goal 31. Weak Mutation 8: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> /
   * Goal 32. Weak Mutation 23: cap3.autoreferencia.Pilha.tamanho()I:32 - InsertUnaryOp Negation
   * Goal 33. Weak Mutation 24: cap3.autoreferencia.Pilha.tamanho()I:32 - InsertUnaryOp +1
   * Goal 34. Weak Mutation 25: cap3.autoreferencia.Pilha.tamanho()I:32 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      Object object0 = new Object();
      pilha0.empilha(object0);
      int int0 = pilha0.tamanho();
      assertEquals(1, int0);
  }

  //Test case number: 1
  /*
   * 33 covered goals:
   * Goal 1. cap3.autoreferencia.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: root-Branch
   * Goal 3. cap3.autoreferencia.Pilha.vazia()Z: I4 Branch 2 IFNONNULL L29 - true
   * Goal 4. Branch cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: root-Branch in context: cap3.autoreferencia.Pilha:empilha(Ljava/lang/Object;)V
   * Goal 5. Branch cap3.autoreferencia.Pilha.<init>()V: root-Branch in context: cap3.autoreferencia.Pilha:<init>()V
   * Goal 6. Branch cap3.autoreferencia.Pilha.vazia()Z: I4 Branch 2 IFNONNULL L29 - true in context: cap3.autoreferencia.Pilha:vazia()Z
   * Goal 7. [Output]: cap3.autoreferencia.Pilha.vazia()Z:False
   * Goal 8. cap3.autoreferencia.Pilha.<init>()V: Line 11
   * Goal 9. cap3.autoreferencia.Pilha.<init>()V: Line 12
   * Goal 10. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 14
   * Goal 11. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 15
   * Goal 12. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 16
   * Goal 13. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 17
   * Goal 14. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 18
   * Goal 15. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 19
   * Goal 16. cap3.autoreferencia.Pilha.vazia()Z: Line 29
   * Goal 17. [METHOD] cap3.autoreferencia.Pilha.<init>()V
   * Goal 18. [METHOD] cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 19. [METHOD] cap3.autoreferencia.Pilha.vazia()Z
   * Goal 20. [METHODNOEX] cap3.autoreferencia.Pilha.<init>()V
   * Goal 21. [METHODNOEX] cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 22. [METHODNOEX] cap3.autoreferencia.Pilha.vazia()Z
   * Goal 23. Weak Mutation 0: cap3.autoreferencia.Pilha.<init>()V:11 - ReplaceConstant - 0 -> 1
   * Goal 24. Weak Mutation 1: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 2: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - InsertUnaryOp +1
   * Goal 26. Weak Mutation 3: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - InsertUnaryOp -1
   * Goal 27. Weak Mutation 4: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceConstant - 1 -> 0
   * Goal 28. Weak Mutation 5: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> %
   * Goal 29. Weak Mutation 6: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> -
   * Goal 30. Weak Mutation 7: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> *
   * Goal 31. Weak Mutation 8: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> /
   * Goal 32. Weak Mutation 20: cap3.autoreferencia.Pilha.vazia()Z:29 - ReplaceComparisonOperator != null -> = null
   * Goal 33. Weak Mutation 22: cap3.autoreferencia.Pilha.vazia()Z:29 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      Object object0 = new Object();
      pilha0.empilha(object0);
      pilha0.vazia();
      assertEquals(1, pilha0.tamanho());
  }

  //Test case number: 2
  /*
   * 20 covered goals:
   * Goal 1. cap3.autoreferencia.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 1 IFEQ L21 - false
   * Goal 3. cap3.autoreferencia.Pilha.vazia()Z: I4 Branch 2 IFNONNULL L29 - false
   * Goal 4. Branch cap3.autoreferencia.Pilha.<init>()V: root-Branch in context: cap3.autoreferencia.Pilha:<init>()V
   * Goal 5. Branch cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 1 IFEQ L21 - false in context: cap3.autoreferencia.Pilha:desempilha()Ljava/lang/Object;
   * Goal 6. desempilha()Ljava/lang/Object;_java.lang.Exception_DECLARED
   * Goal 7. cap3.autoreferencia.Pilha.<init>()V: Line 11
   * Goal 8. cap3.autoreferencia.Pilha.<init>()V: Line 12
   * Goal 9. cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: Line 21
   * Goal 10. cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: Line 22
   * Goal 11. cap3.autoreferencia.Pilha.vazia()Z: Line 29
   * Goal 12. [METHOD] cap3.autoreferencia.Pilha.<init>()V
   * Goal 13. [METHOD] cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;
   * Goal 14. [METHODNOEX] cap3.autoreferencia.Pilha.<init>()V
   * Goal 15. Weak Mutation 0: cap3.autoreferencia.Pilha.<init>()V:11 - ReplaceConstant - 0 -> 1
   * Goal 16. Weak Mutation 9: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:21 - ReplaceComparisonOperator == -> !=
   * Goal 17. Weak Mutation 10: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:22 - ReplaceConstant - Erro: A pilha esta vazia -> 
   * Goal 18. Weak Mutation 11: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:22 - ReplaceComparisonOperator == -> !=
   * Goal 19. Weak Mutation 20: cap3.autoreferencia.Pilha.vazia()Z:29 - ReplaceComparisonOperator != null -> = null
   * Goal 20. Weak Mutation 21: cap3.autoreferencia.Pilha.vazia()Z:29 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      try { 
        pilha0.desempilha();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Erro: A pilha esta vazia
         //
    	  assertTrue(true);//assertThrownBy("cap3.autoreferencia.Pilha", e);
      }
  }

  //Test case number: 3
  /*
   * 16 covered goals:
   * Goal 1. cap3.autoreferencia.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.autoreferencia.Pilha.tamanho()I: root-Branch
   * Goal 3. Branch cap3.autoreferencia.Pilha.tamanho()I: root-Branch in context: cap3.autoreferencia.Pilha:tamanho()I
   * Goal 4. Branch cap3.autoreferencia.Pilha.<init>()V: root-Branch in context: cap3.autoreferencia.Pilha:<init>()V
   * Goal 5. [Output]: cap3.autoreferencia.Pilha.tamanho()I:Zero
   * Goal 6. cap3.autoreferencia.Pilha.<init>()V: Line 11
   * Goal 7. cap3.autoreferencia.Pilha.<init>()V: Line 12
   * Goal 8. cap3.autoreferencia.Pilha.tamanho()I: Line 32
   * Goal 9. [METHOD] cap3.autoreferencia.Pilha.<init>()V
   * Goal 10. [METHOD] cap3.autoreferencia.Pilha.tamanho()I
   * Goal 11. [METHODNOEX] cap3.autoreferencia.Pilha.<init>()V
   * Goal 12. [METHODNOEX] cap3.autoreferencia.Pilha.tamanho()I
   * Goal 13. Weak Mutation 0: cap3.autoreferencia.Pilha.<init>()V:11 - ReplaceConstant - 0 -> 1
   * Goal 14. Weak Mutation 23: cap3.autoreferencia.Pilha.tamanho()I:32 - InsertUnaryOp Negation
   * Goal 15. Weak Mutation 24: cap3.autoreferencia.Pilha.tamanho()I:32 - InsertUnaryOp +1
   * Goal 16. Weak Mutation 25: cap3.autoreferencia.Pilha.tamanho()I:32 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      int int0 = pilha0.tamanho();
      assertEquals(0, int0);
  }

  //Test case number: 4
  /*
   * 55 covered goals:
   * Goal 1. cap3.autoreferencia.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: root-Branch
   * Goal 3. cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 1 IFEQ L21 - true
   * Goal 4. cap3.autoreferencia.Pilha.vazia()Z: I4 Branch 2 IFNONNULL L29 - true
   * Goal 5. cap3.autoreferencia.Pilha.vazia()Z: I4 Branch 2 IFNONNULL L29 - false
   * Goal 6. Branch cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: root-Branch in context: cap3.autoreferencia.Pilha:empilha(Ljava/lang/Object;)V
   * Goal 7. Branch cap3.autoreferencia.Pilha.<init>()V: root-Branch in context: cap3.autoreferencia.Pilha:<init>()V
   * Goal 8. Branch cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 1 IFEQ L21 - true in context: cap3.autoreferencia.Pilha:desempilha()Ljava/lang/Object;
   * Goal 9. Branch cap3.autoreferencia.Pilha.vazia()Z: I4 Branch 2 IFNONNULL L29 - false in context: cap3.autoreferencia.Pilha:vazia()Z
   * Goal 10. [Output]: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:NonNull
   * Goal 11. [Output]: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:Null
   * Goal 12. [Output]: cap3.autoreferencia.Pilha.vazia()Z:True
   * Goal 13. cap3.autoreferencia.Pilha.<init>()V: Line 11
   * Goal 14. cap3.autoreferencia.Pilha.<init>()V: Line 12
   * Goal 15. cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: Line 21
   * Goal 16. cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: Line 23
   * Goal 17. cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: Line 24
   * Goal 18. cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: Line 25
   * Goal 19. cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;: Line 26
   * Goal 20. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 14
   * Goal 21. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 15
   * Goal 22. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 16
   * Goal 23. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 17
   * Goal 24. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 18
   * Goal 25. cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V: Line 19
   * Goal 26. cap3.autoreferencia.Pilha.vazia()Z: Line 29
   * Goal 27. [METHOD] cap3.autoreferencia.Pilha.<init>()V
   * Goal 28. [METHOD] cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;
   * Goal 29. [METHOD] cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 30. [METHOD] cap3.autoreferencia.Pilha.vazia()Z
   * Goal 31. [METHODNOEX] cap3.autoreferencia.Pilha.<init>()V
   * Goal 32. [METHODNOEX] cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;
   * Goal 33. [METHODNOEX] cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 34. [METHODNOEX] cap3.autoreferencia.Pilha.vazia()Z
   * Goal 35. Weak Mutation 0: cap3.autoreferencia.Pilha.<init>()V:11 - ReplaceConstant - 0 -> 1
   * Goal 36. Weak Mutation 1: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 2: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - InsertUnaryOp +1
   * Goal 38. Weak Mutation 3: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - InsertUnaryOp -1
   * Goal 39. Weak Mutation 4: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceConstant - 1 -> 0
   * Goal 40. Weak Mutation 5: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> %
   * Goal 41. Weak Mutation 6: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> -
   * Goal 42. Weak Mutation 7: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> *
   * Goal 43. Weak Mutation 8: cap3.autoreferencia.Pilha.empilha(Ljava/lang/Object;)V:18 - ReplaceArithmeticOperator + -> /
   * Goal 44. Weak Mutation 9: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:21 - ReplaceComparisonOperator == -> !=
   * Goal 45. Weak Mutation 12: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:25 - InsertUnaryOp Negation
   * Goal 46. Weak Mutation 13: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:25 - InsertUnaryOp +1
   * Goal 47. Weak Mutation 14: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:25 - InsertUnaryOp -1
   * Goal 48. Weak Mutation 15: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:25 - ReplaceConstant - 1 -> 0
   * Goal 49. Weak Mutation 16: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:25 - ReplaceArithmeticOperator - -> +
   * Goal 50. Weak Mutation 17: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:25 - ReplaceArithmeticOperator - -> %
   * Goal 51. Weak Mutation 18: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:25 - ReplaceArithmeticOperator - -> *
   * Goal 52. Weak Mutation 19: cap3.autoreferencia.Pilha.desempilha()Ljava/lang/Object;:25 - ReplaceArithmeticOperator - -> /
   * Goal 53. Weak Mutation 20: cap3.autoreferencia.Pilha.vazia()Z:29 - ReplaceComparisonOperator != null -> = null
   * Goal 54. Weak Mutation 21: cap3.autoreferencia.Pilha.vazia()Z:29 - ReplaceConstant - 1 -> 0
   * Goal 55. Weak Mutation 22: cap3.autoreferencia.Pilha.vazia()Z:29 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      Object object0 = new Object();
      pilha0.empilha(object0);
      Object object1 = pilha0.desempilha();
      pilha0.empilha((Object) null);
      pilha0.empilha((Object) null);
      pilha0.empilha(object1);
      pilha0.desempilha();
      pilha0.desempilha();
      pilha0.desempilha();
      boolean boolean0 = pilha0.vazia();
      assertEquals(0, pilha0.tamanho());
      assertTrue(boolean0);
  }
}
