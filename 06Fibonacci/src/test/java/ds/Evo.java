/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 03 19:30:58 GMT 2016
 */

package ds;

import org.junit.Test;
import static org.junit.Assert.*;

//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import ds.Fibonacci;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Evo {

  //Test case number: 0
  /*
   * 26 covered goals:
   * Goal 1. cap2.Fibonacci.fibIter(I)I: I31 Branch 1 IF_ICMPLE L5 - false
   * Goal 2. Branch cap2.Fibonacci.fibIter(I)I: I31 Branch 1 IF_ICMPLE L5 - false in context: cap2.Fibonacci:fibIter(I)I
   * Goal 3. [Output]: cap2.Fibonacci.fibIter(I)I:Zero
   * Goal 4. cap2.Fibonacci.fibIter(I)I: Line 4
   * Goal 5. cap2.Fibonacci.fibIter(I)I: Line 5
   * Goal 6. cap2.Fibonacci.fibIter(I)I: Line 9
   * Goal 7. [METHOD] cap2.Fibonacci.fibIter(I)I
   * Goal 8. [METHODNOEX] cap2.Fibonacci.fibIter(I)I
   * Goal 9. Weak Mutation 0: cap2.Fibonacci.fibIter(I)I:4 - ReplaceConstant - 1 -> 0
   * Goal 10. Weak Mutation 1: cap2.Fibonacci.fibIter(I)I:4 - ReplaceConstant - 0 -> 1
   * Goal 11. Weak Mutation 2: cap2.Fibonacci.fibIter(I)I:5 - ReplaceConstant - 1 -> 0
   * Goal 12. Weak Mutation 39: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> f
   * Goal 13. Weak Mutation 40: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> n
   * Goal 14. Weak Mutation 41: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp Negation of k
   * Goal 15. Weak Mutation 42: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC 1 k
   * Goal 16. Weak Mutation 43: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC -1 k
   * Goal 17. Weak Mutation 44: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable n -> i
   * Goal 18. Weak Mutation 45: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable n -> k
   * Goal 19. Weak Mutation 47: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp Negation of n
   * Goal 20. Weak Mutation 48: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC 1 n
   * Goal 21. Weak Mutation 49: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC -1 n
   * Goal 22. Weak Mutation 50: cap2.Fibonacci.fibIter(I)I:5 - ReplaceComparisonOperator <= -> -1
   * Goal 23. Weak Mutation 53: cap2.Fibonacci.fibIter(I)I:9 - ReplaceVariable f -> i
   * Goal 24. Weak Mutation 55: cap2.Fibonacci.fibIter(I)I:9 - InsertUnaryOp Negation of f
   * Goal 25. Weak Mutation 56: cap2.Fibonacci.fibIter(I)I:9 - InsertUnaryOp IINC 1 f
   * Goal 26. Weak Mutation 57: cap2.Fibonacci.fibIter(I)I:9 - InsertUnaryOp IINC -1 f
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = Fibonacci.fibIter(0);
      assertEquals(0, int0);
  }

  //Test case number: 1
  /*
   * 70 covered goals:
   * Goal 1. cap2.Fibonacci.fibIter(I)I: I31 Branch 1 IF_ICMPLE L5 - true
   * Goal 2. cap2.Fibonacci.fibIter(I)I: I31 Branch 1 IF_ICMPLE L5 - false
   * Goal 3. Branch cap2.Fibonacci.fibIter(I)I: I31 Branch 1 IF_ICMPLE L5 - false in context: cap2.Fibonacci:fibIter(I)I
   * Goal 4. Branch cap2.Fibonacci.fibIter(I)I: I31 Branch 1 IF_ICMPLE L5 - true in context: cap2.Fibonacci:fibIter(I)I
   * Goal 5. [Output]: cap2.Fibonacci.fibIter(I)I:Negative
   * Goal 6. cap2.Fibonacci.fibIter(I)I: Line 4
   * Goal 7. cap2.Fibonacci.fibIter(I)I: Line 5
   * Goal 8. cap2.Fibonacci.fibIter(I)I: Line 6
   * Goal 9. cap2.Fibonacci.fibIter(I)I: Line 7
   * Goal 10. cap2.Fibonacci.fibIter(I)I: Line 9
   * Goal 11. [METHOD] cap2.Fibonacci.fibIter(I)I
   * Goal 12. [METHODNOEX] cap2.Fibonacci.fibIter(I)I
   * Goal 13. Weak Mutation 0: cap2.Fibonacci.fibIter(I)I:4 - ReplaceConstant - 1 -> 0
   * Goal 14. Weak Mutation 1: cap2.Fibonacci.fibIter(I)I:4 - ReplaceConstant - 0 -> 1
   * Goal 15. Weak Mutation 2: cap2.Fibonacci.fibIter(I)I:5 - ReplaceConstant - 1 -> 0
   * Goal 16. Weak Mutation 35: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> i
   * Goal 17. Weak Mutation 36: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> f
   * Goal 18. Weak Mutation 37: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> n
   * Goal 19. Weak Mutation 38: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> i
   * Goal 20. Weak Mutation 39: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> f
   * Goal 21. Weak Mutation 40: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> n
   * Goal 22. Weak Mutation 41: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp Negation of k
   * Goal 23. Weak Mutation 42: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC 1 k
   * Goal 24. Weak Mutation 43: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC -1 k
   * Goal 25. Weak Mutation 44: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable n -> i
   * Goal 26. Weak Mutation 45: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable n -> k
   * Goal 27. Weak Mutation 46: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable n -> f
   * Goal 28. Weak Mutation 47: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp Negation of n
   * Goal 29. Weak Mutation 48: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC 1 n
   * Goal 30. Weak Mutation 49: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC -1 n
   * Goal 31. Weak Mutation 50: cap2.Fibonacci.fibIter(I)I:5 - ReplaceComparisonOperator <= -> -1
   * Goal 32. Weak Mutation 51: cap2.Fibonacci.fibIter(I)I:5 - ReplaceComparisonOperator <= -> <
   * Goal 33. Weak Mutation 52: cap2.Fibonacci.fibIter(I)I:5 - ReplaceComparisonOperator <= -> ==
   * Goal 34. Weak Mutation 3: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable i -> k
   * Goal 35. Weak Mutation 4: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable i -> f
   * Goal 36. Weak Mutation 5: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable i -> n
   * Goal 37. Weak Mutation 6: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp Negation of i
   * Goal 38. Weak Mutation 7: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp IINC 1 i
   * Goal 39. Weak Mutation 8: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp IINC -1 i
   * Goal 40. Weak Mutation 9: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable f -> i
   * Goal 41. Weak Mutation 10: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable f -> k
   * Goal 42. Weak Mutation 11: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable f -> n
   * Goal 43. Weak Mutation 12: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp Negation of f
   * Goal 44. Weak Mutation 13: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp IINC 1 f
   * Goal 45. Weak Mutation 14: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp IINC -1 f
   * Goal 46. Weak Mutation 15: cap2.Fibonacci.fibIter(I)I:6 - ReplaceArithmeticOperator + -> %
   * Goal 47. Weak Mutation 16: cap2.Fibonacci.fibIter(I)I:6 - ReplaceArithmeticOperator + -> -
   * Goal 48. Weak Mutation 17: cap2.Fibonacci.fibIter(I)I:6 - ReplaceArithmeticOperator + -> *
   * Goal 49. Weak Mutation 18: cap2.Fibonacci.fibIter(I)I:6 - ReplaceArithmeticOperator + -> /
   * Goal 50. Weak Mutation 19: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable f -> i
   * Goal 51. Weak Mutation 20: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable f -> k
   * Goal 52. Weak Mutation 21: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable f -> n
   * Goal 53. Weak Mutation 22: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp Negation of f
   * Goal 54. Weak Mutation 23: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp IINC 1 f
   * Goal 55. Weak Mutation 24: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp IINC -1 f
   * Goal 56. Weak Mutation 25: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable i -> k
   * Goal 57. Weak Mutation 26: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable i -> f
   * Goal 58. Weak Mutation 27: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable i -> n
   * Goal 59. Weak Mutation 28: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp Negation of i
   * Goal 60. Weak Mutation 29: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp IINC 1 i
   * Goal 61. Weak Mutation 30: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp IINC -1 i
   * Goal 62. Weak Mutation 31: cap2.Fibonacci.fibIter(I)I:7 - ReplaceArithmeticOperator - -> +
   * Goal 63. Weak Mutation 32: cap2.Fibonacci.fibIter(I)I:7 - ReplaceArithmeticOperator - -> %
   * Goal 64. Weak Mutation 33: cap2.Fibonacci.fibIter(I)I:7 - ReplaceArithmeticOperator - -> *
   * Goal 65. Weak Mutation 34: cap2.Fibonacci.fibIter(I)I:7 - ReplaceArithmeticOperator - -> /
   * Goal 66. Weak Mutation 53: cap2.Fibonacci.fibIter(I)I:9 - ReplaceVariable f -> i
   * Goal 67. Weak Mutation 54: cap2.Fibonacci.fibIter(I)I:9 - ReplaceVariable f -> n
   * Goal 68. Weak Mutation 55: cap2.Fibonacci.fibIter(I)I:9 - InsertUnaryOp Negation of f
   * Goal 69. Weak Mutation 56: cap2.Fibonacci.fibIter(I)I:9 - InsertUnaryOp IINC 1 f
   * Goal 70. Weak Mutation 57: cap2.Fibonacci.fibIter(I)I:9 - InsertUnaryOp IINC -1 f
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = Fibonacci.fibIter(2563);
      assertEquals((-1739976587), int0);
  }

  //Test case number: 2
  /*
   * 70 covered goals:
   * Goal 1. cap2.Fibonacci.fibIter(I)I: I31 Branch 1 IF_ICMPLE L5 - true
   * Goal 2. cap2.Fibonacci.fibIter(I)I: I31 Branch 1 IF_ICMPLE L5 - false
   * Goal 3. Branch cap2.Fibonacci.fibIter(I)I: I31 Branch 1 IF_ICMPLE L5 - false in context: cap2.Fibonacci:fibIter(I)I
   * Goal 4. Branch cap2.Fibonacci.fibIter(I)I: I31 Branch 1 IF_ICMPLE L5 - true in context: cap2.Fibonacci:fibIter(I)I
   * Goal 5. [Output]: cap2.Fibonacci.fibIter(I)I:Positive
   * Goal 6. cap2.Fibonacci.fibIter(I)I: Line 4
   * Goal 7. cap2.Fibonacci.fibIter(I)I: Line 5
   * Goal 8. cap2.Fibonacci.fibIter(I)I: Line 6
   * Goal 9. cap2.Fibonacci.fibIter(I)I: Line 7
   * Goal 10. cap2.Fibonacci.fibIter(I)I: Line 9
   * Goal 11. [METHOD] cap2.Fibonacci.fibIter(I)I
   * Goal 12. [METHODNOEX] cap2.Fibonacci.fibIter(I)I
   * Goal 13. Weak Mutation 0: cap2.Fibonacci.fibIter(I)I:4 - ReplaceConstant - 1 -> 0
   * Goal 14. Weak Mutation 1: cap2.Fibonacci.fibIter(I)I:4 - ReplaceConstant - 0 -> 1
   * Goal 15. Weak Mutation 2: cap2.Fibonacci.fibIter(I)I:5 - ReplaceConstant - 1 -> 0
   * Goal 16. Weak Mutation 35: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> i
   * Goal 17. Weak Mutation 36: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> f
   * Goal 18. Weak Mutation 37: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> n
   * Goal 19. Weak Mutation 38: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> i
   * Goal 20. Weak Mutation 39: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> f
   * Goal 21. Weak Mutation 40: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable k -> n
   * Goal 22. Weak Mutation 41: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp Negation of k
   * Goal 23. Weak Mutation 42: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC 1 k
   * Goal 24. Weak Mutation 43: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC -1 k
   * Goal 25. Weak Mutation 44: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable n -> i
   * Goal 26. Weak Mutation 45: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable n -> k
   * Goal 27. Weak Mutation 46: cap2.Fibonacci.fibIter(I)I:5 - ReplaceVariable n -> f
   * Goal 28. Weak Mutation 47: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp Negation of n
   * Goal 29. Weak Mutation 48: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC 1 n
   * Goal 30. Weak Mutation 49: cap2.Fibonacci.fibIter(I)I:5 - InsertUnaryOp IINC -1 n
   * Goal 31. Weak Mutation 50: cap2.Fibonacci.fibIter(I)I:5 - ReplaceComparisonOperator <= -> -1
   * Goal 32. Weak Mutation 51: cap2.Fibonacci.fibIter(I)I:5 - ReplaceComparisonOperator <= -> <
   * Goal 33. Weak Mutation 52: cap2.Fibonacci.fibIter(I)I:5 - ReplaceComparisonOperator <= -> ==
   * Goal 34. Weak Mutation 3: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable i -> k
   * Goal 35. Weak Mutation 4: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable i -> f
   * Goal 36. Weak Mutation 5: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable i -> n
   * Goal 37. Weak Mutation 6: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp Negation of i
   * Goal 38. Weak Mutation 7: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp IINC 1 i
   * Goal 39. Weak Mutation 8: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp IINC -1 i
   * Goal 40. Weak Mutation 9: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable f -> i
   * Goal 41. Weak Mutation 10: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable f -> k
   * Goal 42. Weak Mutation 11: cap2.Fibonacci.fibIter(I)I:6 - ReplaceVariable f -> n
   * Goal 43. Weak Mutation 12: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp Negation of f
   * Goal 44. Weak Mutation 13: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp IINC 1 f
   * Goal 45. Weak Mutation 14: cap2.Fibonacci.fibIter(I)I:6 - InsertUnaryOp IINC -1 f
   * Goal 46. Weak Mutation 15: cap2.Fibonacci.fibIter(I)I:6 - ReplaceArithmeticOperator + -> %
   * Goal 47. Weak Mutation 16: cap2.Fibonacci.fibIter(I)I:6 - ReplaceArithmeticOperator + -> -
   * Goal 48. Weak Mutation 17: cap2.Fibonacci.fibIter(I)I:6 - ReplaceArithmeticOperator + -> *
   * Goal 49. Weak Mutation 18: cap2.Fibonacci.fibIter(I)I:6 - ReplaceArithmeticOperator + -> /
   * Goal 50. Weak Mutation 19: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable f -> i
   * Goal 51. Weak Mutation 20: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable f -> k
   * Goal 52. Weak Mutation 21: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable f -> n
   * Goal 53. Weak Mutation 22: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp Negation of f
   * Goal 54. Weak Mutation 23: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp IINC 1 f
   * Goal 55. Weak Mutation 24: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp IINC -1 f
   * Goal 56. Weak Mutation 25: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable i -> k
   * Goal 57. Weak Mutation 26: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable i -> f
   * Goal 58. Weak Mutation 27: cap2.Fibonacci.fibIter(I)I:7 - ReplaceVariable i -> n
   * Goal 59. Weak Mutation 28: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp Negation of i
   * Goal 60. Weak Mutation 29: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp IINC 1 i
   * Goal 61. Weak Mutation 30: cap2.Fibonacci.fibIter(I)I:7 - InsertUnaryOp IINC -1 i
   * Goal 62. Weak Mutation 31: cap2.Fibonacci.fibIter(I)I:7 - ReplaceArithmeticOperator - -> +
   * Goal 63. Weak Mutation 32: cap2.Fibonacci.fibIter(I)I:7 - ReplaceArithmeticOperator - -> %
   * Goal 64. Weak Mutation 33: cap2.Fibonacci.fibIter(I)I:7 - ReplaceArithmeticOperator - -> *
   * Goal 65. Weak Mutation 34: cap2.Fibonacci.fibIter(I)I:7 - ReplaceArithmeticOperator - -> /
   * Goal 66. Weak Mutation 53: cap2.Fibonacci.fibIter(I)I:9 - ReplaceVariable f -> i
   * Goal 67. Weak Mutation 54: cap2.Fibonacci.fibIter(I)I:9 - ReplaceVariable f -> n
   * Goal 68. Weak Mutation 55: cap2.Fibonacci.fibIter(I)I:9 - InsertUnaryOp Negation of f
   * Goal 69. Weak Mutation 56: cap2.Fibonacci.fibIter(I)I:9 - InsertUnaryOp IINC 1 f
   * Goal 70. Weak Mutation 57: cap2.Fibonacci.fibIter(I)I:9 - InsertUnaryOp IINC -1 f
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = Fibonacci.fibIter(33);
      assertEquals(3524578, int0);
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * Goal 1. cap2.Fibonacci.<init>()V: root-Branch
   * Goal 2. Branch cap2.Fibonacci.<init>()V: root-Branch in context: cap2.Fibonacci:<init>()V
   * Goal 3. [METHOD] cap2.Fibonacci.<init>()V
   * Goal 4. [METHODNOEX] cap2.Fibonacci.<init>()V
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Fibonacci fibonacci0 = new Fibonacci();
  }
}
