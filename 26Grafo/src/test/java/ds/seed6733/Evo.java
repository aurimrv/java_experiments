/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 04 20:54:57 GMT 2020
 */

package ds.seed6733;

import org.junit.Ignore;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ds.Grafo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Evo extends Grafo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Grafo grafo0 = new Grafo(1);
      grafo0.insereAresta(4484, 1, 4484);
      grafo0.grafoTransposto();
      grafo0.insereAresta(1, 4484, (-3762));
      grafo0.existeAresta(1, 4492);
      assertEquals(1, grafo0.numVertices());
      
      grafo0.existeAresta(1, (-3762));
      grafo0.existeAresta(1, 4484);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Grafo grafo0 = new Grafo(1);
      grafo0.insereAresta(4484, 1, 4484);
      grafo0.insereAresta(1, 1889, (-3762));
      Grafo grafo1 = grafo0.grafoTransposto();
      grafo1.retiraAresta(1, 1);
      grafo0.existeAresta(1, 4492);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Grafo grafo0 = new Grafo(1218);
      grafo0.primeiroListaAdj(1);
      grafo0.insereAresta(1, 5269, 1);
      grafo0.retiraAresta(1, 2063);
  }

  @Ignore
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      Grafo grafo0 = new Grafo(1);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      grafo0.insereAresta(1, 1, 1);
      grafo0.prox = intArray0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      grafo0.prox = intArray0;
      grafo0.retiraAresta(0, 1);
      grafo0.cab = intArray0;
      grafo0.grafoTransposto();
      grafo0.retiraAresta(intArray0[0], intArray0[4]);
      grafo0.imprime();
      grafo0.proxAdj(int0);
      grafo0.numVertices();
      grafo0.imprime();
      Grafo grafo1 = grafo0.grafoTransposto();
      int int1 = 1;
      grafo1.retiraAresta(int1, intArray0[3]);
      grafo1.cab = grafo0.prox;
      int int2 = 2301;
      int int3 = 0;
      int int4 = 1;
      grafo1.insereAresta(int2, int3, int4);
      grafo1.listaAdjVazia(intArray0[3]);
      int int5 = 1;
      grafo0.existeAresta(intArray0[2], int5);
      int int6 = 0;
      grafo0.retiraAresta(int0, int6);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Grafo.Aresta grafo_Aresta0 = new Grafo.Aresta(1734, 1734, 710);
      Grafo grafo0 = new Grafo(1734);
      Grafo grafo1 = grafo0.grafoTransposto();
      grafo0.peso = grafo1.prox;
      grafo0.prox = grafo1.cab;
      grafo1.cab = grafo0.prox;
      int int0 = 0;
      grafo1.insereAresta(1734, 0, 0);
      grafo1.retiraAresta(710, 0);
      // Undeclared exception!
      try { 
        grafo0.grafoTransposto();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Ignore
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Grafo grafo0 = new Grafo(1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      grafo0.prox = intArray0;
      // Undeclared exception!
      grafo0.imprime();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Grafo.Aresta grafo_Aresta0 = new Grafo.Aresta(1029, 1, 1);
      grafo_Aresta0.v1();
      grafo_Aresta0.peso();
      Grafo grafo0 = new Grafo(1);
      Grafo grafo1 = grafo0.grafoTransposto();
      grafo1.insereAresta(1029, 95, (-2691));
      grafo1.grafoTransposto();
      // Undeclared exception!
      try { 
        grafo1.proxAdj(2464);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Grafo.Aresta grafo_Aresta0 = new Grafo.Aresta(0, 1678, 0);
      int int0 = grafo_Aresta0.peso();
      assertEquals(1678, grafo_Aresta0.v2());
      assertEquals(0, int0);
      assertEquals(0, grafo_Aresta0.v1());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Grafo.Aresta grafo_Aresta0 = new Grafo.Aresta(772, 282, 4500);
      int int0 = grafo_Aresta0.v2();
      assertEquals(4500, grafo_Aresta0.peso());
      assertEquals(772, grafo_Aresta0.v1());
      assertEquals(282, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Grafo grafo0 = new Grafo(4500);
      int int0 = grafo0.numVertices();
      assertEquals(4500, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Grafo grafo0 = new Grafo(2027);
      Grafo.Aresta grafo_Aresta0 = grafo0.retiraAresta(1215, 0);
      assertEquals(1215, grafo_Aresta0.v1());
      assertEquals(0, grafo_Aresta0.v2());
      assertEquals(0, grafo_Aresta0.peso());
      assertEquals(2027, grafo0.numVertices());
      assertNotNull(grafo_Aresta0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Grafo grafo0 = new Grafo(2041);
      Grafo grafo1 = grafo0.grafoTransposto();
      grafo1.insereAresta(2041, 2041, (-1));
      assertNotSame(grafo1, grafo0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Grafo grafo0 = new Grafo(0);
      Grafo grafo1 = grafo0.grafoTransposto();
      // Undeclared exception!
      try { 
        grafo1.primeiroListaAdj((-1668));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1668
         //
         verifyException("ds.Grafo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Grafo grafo0 = new Grafo(0);
      Grafo.Aresta grafo_Aresta0 = grafo0.retiraAresta(569, 569);
      assertEquals(0, grafo0.numVertices());
      assertNull(grafo_Aresta0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-2661);
      Grafo grafo0 = null;
      try {
        grafo0 = new Grafo((-46));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ds.Grafo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      Grafo grafo0 = new Grafo(0);
      int int1 = (-1953);
      int int2 = (-29);
      // Undeclared exception!
      try { 
        grafo0.insereAresta((-1953), (-1953), (-29));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Grafo.Aresta grafo_Aresta0 = new Grafo.Aresta(455, 455, 455);
      int int0 = grafo_Aresta0.v1();
      assertEquals(455, int0);
      assertEquals(455, grafo_Aresta0.v2());
      assertEquals(455, grafo_Aresta0.peso());
      
      Grafo grafo0 = new Grafo(4500);
      Grafo.Aresta grafo_Aresta1 = grafo0.proxAdj(1384);
      assertNull(grafo_Aresta1);
      
      boolean boolean0 = grafo0.existeAresta(1384, 4500);
      assertFalse(boolean0);
      
      grafo0.retiraAresta(1384, 4500);
      grafo0.imprime();
      grafo0.imprime();
      assertEquals(4500, grafo0.numVertices());
  }
}
