17.1 Equivalente. O Código funciona para qualquer número de arestas.

Código mutado: int numArestas = 4501;

18.1 Não equivalente (Dúvida). Alterar 2 por 3 foge o estabelecido na Teoria de Grafos para
o cálculo do tamanho.

Código mutado: int tam = numVertices + 3*numArestas;

22.3 Equivalente. this.cab[0], this.pos[0], this.prox[0] e this.peso[0] serão preenchidos com
0, o valor padrão Java, assim como no código original.

Código mutado: for (int i = 1; i < this.numVertices; i++) {

41.1 Equivalente. Com a remoção do println, o programa não imprimirá a mensage de erro
dizendo que não há espaço disponível na aresta. Não alterará o return.

Código mutado: Removido o println desta linha.

43.2 Não equivalente. Com a trocade ++ por -- é passado o índice errado para os arrays deste
trecho do código.

Código mutado: int ind = this.proxDisponivel--;

51.4 Não equivalente. Com a alteração, o código retornará true para todas as entradas, e nunca
false.

Código mutado: if (true) return true;

73.2 Não equivalente. Com false dentro do for, não haverá o número de iterações necessário e o valor
de i passado ao resto do método não estará correto.

Código mutado: for (i = v1; false; i = this.prox[i])

74.3 Não equivalente. Com true dentro da condicional, o código sempre irá sair do for na primeira iteração,
passando o valor errado de i para o resto do métedo.

Código mutado: if (true) break;

77.1 Não equivalente. Com a remoção da chamada da função de inicialização de aresta, ela será inicializada com
o valor padrão java, null.

Código mutado: removida esta linha com a chamada new Aresta()

79.1 Não equivalente. Negando a condicional, o programa irá entrar neste bloco para entradas erradas, opostas as
quais deveria.

Código mutado: if (this.prox[ind] != 0) this.cab[v1] = i; // @{\it \'ultimo v\'ertice}@

79.2 Não equivalente. Sempre colocar false na condicional fará com que this.cab[v1] nunca receba i, mesmo quando
necessário.

Código mutado: if (false) this.cab[v1] = i; // @{\it \'ultimo v\'ertice}@

79.3 Não equivalente. Sempre colocar true na condicional fará com que this.cab[v1] sempre receba i, inclusive
quando não deveria.

Código mutado: if (true) this.cab[v1] = i; // @{\it \'ultimo v\'ertice}@

81.1 (Dúvida)

86.5 (Dúvida)

86.6 Não equivalente. Removendo o println, o método não irá imprimir a mensagem projetada no código original.

Código mutado: removido o pritln desta linha.

87.2 Não equivalente. Colocar false dentro da condicional fará com que não sejam feitas as iterações necessárias.

Código mutado: for (int j = this.prox[i]; j != 0; j = this.prox[j])

88.7 (Dúvida)

88.8 Não equivalente. O código não irá imprimir a mensagem projetada no programa original.

Código mutado: Removido o println desta linha.

95.2 (Dúvida)

95.4 Não equivalente. Colocar true dentro da condicional fará o código considerar que a lista não
está vazia para qualquer entrada.

Código mutado: if (!this.listaAdjVazia (v)) {

98.2 (Dúvida)

