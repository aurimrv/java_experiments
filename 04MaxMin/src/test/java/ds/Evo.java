/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 03 19:09:44 GMT 2016
 */

package ds;

import static org.junit.Assert.*;

import org.junit.Test;

import ds.MaxMin3;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Evo {

  //Test case number: 0
  /*
   * 115 covered goals:
   * Goal 1. cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true
   * Goal 2. cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true
   * Goal 3. cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - true
   * Goal 4. cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - false
   * Goal 5. cap1.MaxMin3.maxMin3([II)[I: I79 Branch 4 IF_ICMPLE L12 - false
   * Goal 6. cap1.MaxMin3.maxMin3([II)[I: I92 Branch 5 IF_ICMPGE L13 - true
   * Goal 7. Branch cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 8. Branch cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 9. Branch cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 10. Branch cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 11. Branch cap1.MaxMin3.maxMin3([II)[I: I79 Branch 4 IF_ICMPLE L12 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 12. Branch cap1.MaxMin3.maxMin3([II)[I: I92 Branch 5 IF_ICMPGE L13 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 13. maxMin3([II)[I_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 14. cap1.MaxMin3.maxMin3([II)[I: Line 5
   * Goal 15. cap1.MaxMin3.maxMin3([II)[I: Line 6
   * Goal 16. cap1.MaxMin3.maxMin3([II)[I: Line 7
   * Goal 17. cap1.MaxMin3.maxMin3([II)[I: Line 8
   * Goal 18. cap1.MaxMin3.maxMin3([II)[I: Line 9
   * Goal 19. cap1.MaxMin3.maxMin3([II)[I: Line 10
   * Goal 20. cap1.MaxMin3.maxMin3([II)[I: Line 11
   * Goal 21. cap1.MaxMin3.maxMin3([II)[I: Line 12
   * Goal 22. cap1.MaxMin3.maxMin3([II)[I: Line 13
   * Goal 23. cap1.MaxMin3.maxMin3([II)[I: Line 19
   * Goal 24. [METHOD] cap1.MaxMin3.maxMin3([II)[I
   * Goal 25. Weak Mutation 0: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 26. Weak Mutation 1: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 27. Weak Mutation 2: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 28. Weak Mutation 3: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 0
   * Goal 29. Weak Mutation 4: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 1
   * Goal 30. Weak Mutation 5: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> -1
   * Goal 31. Weak Mutation 6: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 3
   * Goal 32. Weak Mutation 7: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> +
   * Goal 33. Weak Mutation 8: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> -
   * Goal 34. Weak Mutation 9: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> *
   * Goal 35. Weak Mutation 10: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> /
   * Goal 36. Weak Mutation 13: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceComparisonOperator <= -> <
   * Goal 37. Weak Mutation 28: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp Negation of n
   * Goal 38. Weak Mutation 29: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC 1 n
   * Goal 39. Weak Mutation 30: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC -1 n
   * Goal 40. Weak Mutation 31: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceConstant - 1 -> 0
   * Goal 41. Weak Mutation 32: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> +
   * Goal 42. Weak Mutation 33: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> %
   * Goal 43. Weak Mutation 34: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> *
   * Goal 44. Weak Mutation 35: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> /
   * Goal 45. Weak Mutation 36: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 37: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 40: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceComparisonOperator <= -> ==
   * Goal 48. Weak Mutation 43: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 1 -> 0
   * Goal 49. Weak Mutation 44: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 0 -> 1
   * Goal 50. Weak Mutation 45: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 51. Weak Mutation 46: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 52. Weak Mutation 47: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 53. Weak Mutation 48: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 3
   * Goal 54. Weak Mutation 49: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> min
   * Goal 55. Weak Mutation 50: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> FimDoAnel
   * Goal 56. Weak Mutation 51: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> max
   * Goal 57. Weak Mutation 52: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> n
   * Goal 58. Weak Mutation 53: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp Negation of i
   * Goal 59. Weak Mutation 54: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC 1 i
   * Goal 60. Weak Mutation 55: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC -1 i
   * Goal 61. Weak Mutation 56: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> min
   * Goal 62. Weak Mutation 57: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> FimDoAnel
   * Goal 63. Weak Mutation 58: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> max
   * Goal 64. Weak Mutation 59: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> n
   * Goal 65. Weak Mutation 60: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp Negation of i
   * Goal 66. Weak Mutation 61: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC 1 i
   * Goal 67. Weak Mutation 62: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC -1 i
   * Goal 68. Weak Mutation 63: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceConstant - 1 -> 0
   * Goal 69. Weak Mutation 64: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> %
   * Goal 70. Weak Mutation 65: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> -
   * Goal 71. Weak Mutation 66: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> *
   * Goal 72. Weak Mutation 67: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> /
   * Goal 73. Weak Mutation 68: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceComparisonOperator <= -> -1
   * Goal 74. Weak Mutation 71: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> min
   * Goal 75. Weak Mutation 72: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> FimDoAnel
   * Goal 76. Weak Mutation 73: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> max
   * Goal 77. Weak Mutation 74: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> n
   * Goal 78. Weak Mutation 75: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp Negation of i
   * Goal 79. Weak Mutation 76: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC 1 i
   * Goal 80. Weak Mutation 77: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC -1 i
   * Goal 81. Weak Mutation 78: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> i
   * Goal 82. Weak Mutation 79: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> min
   * Goal 83. Weak Mutation 80: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> FimDoAnel
   * Goal 84. Weak Mutation 81: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> n
   * Goal 85. Weak Mutation 82: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp Negation of max
   * Goal 86. Weak Mutation 83: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC 1 max
   * Goal 87. Weak Mutation 84: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC -1 max
   * Goal 88. Weak Mutation 85: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceComparisonOperator <= -> -1
   * Goal 89. Weak Mutation 88: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> min
   * Goal 90. Weak Mutation 89: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> FimDoAnel
   * Goal 91. Weak Mutation 90: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> max
   * Goal 92. Weak Mutation 91: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> n
   * Goal 93. Weak Mutation 92: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp Negation of i
   * Goal 94. Weak Mutation 93: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC 1 i
   * Goal 95. Weak Mutation 94: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC -1 i
   * Goal 96. Weak Mutation 95: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> min
   * Goal 97. Weak Mutation 96: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> FimDoAnel
   * Goal 98. Weak Mutation 97: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> max
   * Goal 99. Weak Mutation 98: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> n
   * Goal 100. Weak Mutation 99: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp Negation of i
   * Goal 101. Weak Mutation 100: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC 1 i
   * Goal 102. Weak Mutation 101: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC -1 i
   * Goal 103. Weak Mutation 102: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceConstant - 1 -> 0
   * Goal 104. Weak Mutation 103: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> %
   * Goal 105. Weak Mutation 104: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> -
   * Goal 106. Weak Mutation 105: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> *
   * Goal 107. Weak Mutation 106: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> /
   * Goal 108. Weak Mutation 107: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> i
   * Goal 109. Weak Mutation 108: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> FimDoAnel
   * Goal 110. Weak Mutation 109: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> max
   * Goal 111. Weak Mutation 110: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> n
   * Goal 112. Weak Mutation 111: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp Negation of min
   * Goal 113. Weak Mutation 112: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC 1 min
   * Goal 114. Weak Mutation 113: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC -1 min
   * Goal 115. Weak Mutation 116: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceComparisonOperator >= -> ==
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3356);
      intArray0[2] = 58;
      // Undeclared exception!
      try { 
        MaxMin3.maxMin3(intArray0, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         assertTrue(true);//assertThrownBy("cap1.MaxMin3", e);
      }
  }

  //Test case number: 1
  /*
   * 51 covered goals:
   * Goal 1. cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - false
   * Goal 2. cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true
   * Goal 3. cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - false
   * Goal 4. Branch cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 5. Branch cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 6. Branch cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 7. [Output]: cap1.MaxMin3.maxMin3([II)[I:NonEmptyArray
   * Goal 8. cap1.MaxMin3.maxMin3([II)[I: Line 5
   * Goal 9. cap1.MaxMin3.maxMin3([II)[I: Line 7
   * Goal 10. cap1.MaxMin3.maxMin3([II)[I: Line 8
   * Goal 11. cap1.MaxMin3.maxMin3([II)[I: Line 9
   * Goal 12. cap1.MaxMin3.maxMin3([II)[I: Line 10
   * Goal 13. cap1.MaxMin3.maxMin3([II)[I: Line 21
   * Goal 14. cap1.MaxMin3.maxMin3([II)[I: Line 22
   * Goal 15. cap1.MaxMin3.maxMin3([II)[I: Line 23
   * Goal 16. [METHOD] cap1.MaxMin3.maxMin3([II)[I
   * Goal 17. [METHODNOEX] cap1.MaxMin3.maxMin3([II)[I
   * Goal 18. Weak Mutation 0: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 19. Weak Mutation 1: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 20. Weak Mutation 2: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 21. Weak Mutation 3: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 0
   * Goal 22. Weak Mutation 4: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 1
   * Goal 23. Weak Mutation 5: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> -1
   * Goal 24. Weak Mutation 6: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 3
   * Goal 25. Weak Mutation 7: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> +
   * Goal 26. Weak Mutation 8: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> -
   * Goal 27. Weak Mutation 9: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> *
   * Goal 28. Weak Mutation 10: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> /
   * Goal 29. Weak Mutation 11: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceComparisonOperator <= -> -1
   * Goal 30. Weak Mutation 14: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 31. Weak Mutation 15: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 32. Weak Mutation 16: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 33. Weak Mutation 17: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 34. Weak Mutation 18: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 35. Weak Mutation 19: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 36. Weak Mutation 20: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 1 -> 0
   * Goal 37. Weak Mutation 21: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator - -> +
   * Goal 38. Weak Mutation 23: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator - -> *
   * Goal 39. Weak Mutation 24: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator - -> /
   * Goal 40. Weak Mutation 25: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 41. Weak Mutation 26: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 42. Weak Mutation 27: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 43. Weak Mutation 36: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 0 -> 1
   * Goal 44. Weak Mutation 37: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 1 -> 0
   * Goal 45. Weak Mutation 39: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceComparisonOperator <= -> <
   * Goal 46. Weak Mutation 43: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 44: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 0 -> 1
   * Goal 48. Weak Mutation 45: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 49. Weak Mutation 46: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 50. Weak Mutation 47: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 51. Weak Mutation 48: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 3
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = MaxMin3.maxMin3(intArray0, 1);
      assertNotSame(intArray0, intArray1);
  }

  //Test case number: 2
  /*
   * 47 covered goals:
   * Goal 1. cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true
   * Goal 2. cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true
   * Goal 3. cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - false
   * Goal 4. Branch cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 5. Branch cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 6. Branch cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 7. [Output]: cap1.MaxMin3.maxMin3([II)[I:NonEmptyArray
   * Goal 8. cap1.MaxMin3.maxMin3([II)[I: Line 5
   * Goal 9. cap1.MaxMin3.maxMin3([II)[I: Line 6
   * Goal 10. cap1.MaxMin3.maxMin3([II)[I: Line 7
   * Goal 11. cap1.MaxMin3.maxMin3([II)[I: Line 8
   * Goal 12. cap1.MaxMin3.maxMin3([II)[I: Line 9
   * Goal 13. cap1.MaxMin3.maxMin3([II)[I: Line 10
   * Goal 14. cap1.MaxMin3.maxMin3([II)[I: Line 21
   * Goal 15. cap1.MaxMin3.maxMin3([II)[I: Line 22
   * Goal 16. cap1.MaxMin3.maxMin3([II)[I: Line 23
   * Goal 17. [METHOD] cap1.MaxMin3.maxMin3([II)[I
   * Goal 18. [METHODNOEX] cap1.MaxMin3.maxMin3([II)[I
   * Goal 19. Weak Mutation 0: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 20. Weak Mutation 1: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 21. Weak Mutation 2: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 22. Weak Mutation 3: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 0
   * Goal 23. Weak Mutation 4: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 1
   * Goal 24. Weak Mutation 5: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> -1
   * Goal 25. Weak Mutation 6: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 3
   * Goal 26. Weak Mutation 7: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> +
   * Goal 27. Weak Mutation 8: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> -
   * Goal 28. Weak Mutation 9: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> *
   * Goal 29. Weak Mutation 10: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> /
   * Goal 30. Weak Mutation 12: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceComparisonOperator <= -> ==
   * Goal 31. Weak Mutation 28: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp Negation of n
   * Goal 32. Weak Mutation 29: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC 1 n
   * Goal 33. Weak Mutation 30: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC -1 n
   * Goal 34. Weak Mutation 31: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceConstant - 1 -> 0
   * Goal 35. Weak Mutation 32: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> +
   * Goal 36. Weak Mutation 33: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> %
   * Goal 37. Weak Mutation 34: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> *
   * Goal 38. Weak Mutation 35: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> /
   * Goal 39. Weak Mutation 36: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 0 -> 1
   * Goal 40. Weak Mutation 37: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 1 -> 0
   * Goal 41. Weak Mutation 39: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceComparisonOperator <= -> <
   * Goal 42. Weak Mutation 43: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 1 -> 0
   * Goal 43. Weak Mutation 44: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 0 -> 1
   * Goal 44. Weak Mutation 45: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 45. Weak Mutation 46: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 46. Weak Mutation 47: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 47. Weak Mutation 48: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 3
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = MaxMin3.maxMin3(intArray0, (-505));
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  //Test case number: 3
  /*
   * 91 covered goals:
   * Goal 1. cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true
   * Goal 2. cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true
   * Goal 3. cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - true
   * Goal 4. cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - true
   * Goal 5. cap1.MaxMin3.maxMin3([II)[I: I108 Branch 6 IF_ICMPGE L16 - true
   * Goal 6. cap1.MaxMin3.maxMin3([II)[I: I121 Branch 7 IF_ICMPLE L17 - false
   * Goal 7. Branch cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 8. Branch cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 9. Branch cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 10. Branch cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 11. Branch cap1.MaxMin3.maxMin3([II)[I: I108 Branch 6 IF_ICMPGE L16 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 12. Branch cap1.MaxMin3.maxMin3([II)[I: I121 Branch 7 IF_ICMPLE L17 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 13. maxMin3([II)[I_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 14. cap1.MaxMin3.maxMin3([II)[I: Line 5
   * Goal 15. cap1.MaxMin3.maxMin3([II)[I: Line 6
   * Goal 16. cap1.MaxMin3.maxMin3([II)[I: Line 7
   * Goal 17. cap1.MaxMin3.maxMin3([II)[I: Line 8
   * Goal 18. cap1.MaxMin3.maxMin3([II)[I: Line 9
   * Goal 19. cap1.MaxMin3.maxMin3([II)[I: Line 10
   * Goal 20. cap1.MaxMin3.maxMin3([II)[I: Line 11
   * Goal 21. cap1.MaxMin3.maxMin3([II)[I: Line 16
   * Goal 22. cap1.MaxMin3.maxMin3([II)[I: Line 17
   * Goal 23. cap1.MaxMin3.maxMin3([II)[I: Line 19
   * Goal 24. [METHOD] cap1.MaxMin3.maxMin3([II)[I
   * Goal 25. Weak Mutation 0: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 26. Weak Mutation 1: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 27. Weak Mutation 2: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 28. Weak Mutation 3: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 0
   * Goal 29. Weak Mutation 4: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 1
   * Goal 30. Weak Mutation 5: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> -1
   * Goal 31. Weak Mutation 6: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 3
   * Goal 32. Weak Mutation 7: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> +
   * Goal 33. Weak Mutation 8: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> -
   * Goal 34. Weak Mutation 9: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> *
   * Goal 35. Weak Mutation 10: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> /
   * Goal 36. Weak Mutation 13: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceComparisonOperator <= -> <
   * Goal 37. Weak Mutation 28: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp Negation of n
   * Goal 38. Weak Mutation 29: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC 1 n
   * Goal 39. Weak Mutation 30: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC -1 n
   * Goal 40. Weak Mutation 31: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceConstant - 1 -> 0
   * Goal 41. Weak Mutation 32: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> +
   * Goal 42. Weak Mutation 33: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> %
   * Goal 43. Weak Mutation 34: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> *
   * Goal 44. Weak Mutation 35: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> /
   * Goal 45. Weak Mutation 36: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 37: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 39: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceComparisonOperator <= -> <
   * Goal 48. Weak Mutation 43: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 1 -> 0
   * Goal 49. Weak Mutation 44: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 0 -> 1
   * Goal 50. Weak Mutation 45: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 51. Weak Mutation 46: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 52. Weak Mutation 47: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 53. Weak Mutation 48: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 3
   * Goal 54. Weak Mutation 49: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> min
   * Goal 55. Weak Mutation 50: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> FimDoAnel
   * Goal 56. Weak Mutation 51: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> max
   * Goal 57. Weak Mutation 52: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> n
   * Goal 58. Weak Mutation 53: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp Negation of i
   * Goal 59. Weak Mutation 54: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC 1 i
   * Goal 60. Weak Mutation 55: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC -1 i
   * Goal 61. Weak Mutation 56: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> min
   * Goal 62. Weak Mutation 57: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> FimDoAnel
   * Goal 63. Weak Mutation 58: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> max
   * Goal 64. Weak Mutation 59: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> n
   * Goal 65. Weak Mutation 60: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp Negation of i
   * Goal 66. Weak Mutation 61: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC 1 i
   * Goal 67. Weak Mutation 62: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC -1 i
   * Goal 68. Weak Mutation 63: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceConstant - 1 -> 0
   * Goal 69. Weak Mutation 64: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> %
   * Goal 70. Weak Mutation 65: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> -
   * Goal 71. Weak Mutation 66: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> *
   * Goal 72. Weak Mutation 67: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> /
   * Goal 73. Weak Mutation 70: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceComparisonOperator <= -> ==
   * Goal 74. Weak Mutation 129: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> min
   * Goal 75. Weak Mutation 130: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> FimDoAnel
   * Goal 76. Weak Mutation 131: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> max
   * Goal 77. Weak Mutation 132: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> n
   * Goal 78. Weak Mutation 133: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp Negation of i
   * Goal 79. Weak Mutation 134: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC 1 i
   * Goal 80. Weak Mutation 135: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC -1 i
   * Goal 81. Weak Mutation 136: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> i
   * Goal 82. Weak Mutation 137: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> FimDoAnel
   * Goal 83. Weak Mutation 139: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> n
   * Goal 84. Weak Mutation 140: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp Negation of min
   * Goal 85. Weak Mutation 141: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC 1 min
   * Goal 86. Weak Mutation 142: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC -1 min
   * Goal 87. Weak Mutation 144: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceComparisonOperator >= -> >
   * Goal 88. Weak Mutation 153: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> min
   * Goal 89. Weak Mutation 154: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> FimDoAnel
   * Goal 90. Weak Mutation 155: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> max
   * Goal 91. Weak Mutation 156: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> n
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = 2854;
      // Undeclared exception!
      try { 
        MaxMin3.maxMin3(intArray0, 2854);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         assertTrue(true);//assertThrownBy("cap1.MaxMin3", e);
      }
  }

  //Test case number: 4
  /*
   * 102 covered goals:
   * Goal 1. cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true
   * Goal 2. cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true
   * Goal 3. cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - true
   * Goal 4. cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - true
   * Goal 5. cap1.MaxMin3.maxMin3([II)[I: I108 Branch 6 IF_ICMPGE L16 - true
   * Goal 6. cap1.MaxMin3.maxMin3([II)[I: I108 Branch 6 IF_ICMPGE L16 - false
   * Goal 7. cap1.MaxMin3.maxMin3([II)[I: I121 Branch 7 IF_ICMPLE L17 - true
   * Goal 8. Branch cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 9. Branch cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 10. Branch cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 11. Branch cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 12. Branch cap1.MaxMin3.maxMin3([II)[I: I108 Branch 6 IF_ICMPGE L16 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 13. Branch cap1.MaxMin3.maxMin3([II)[I: I108 Branch 6 IF_ICMPGE L16 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 14. Branch cap1.MaxMin3.maxMin3([II)[I: I121 Branch 7 IF_ICMPLE L17 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 15. maxMin3([II)[I_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 16. cap1.MaxMin3.maxMin3([II)[I: Line 5
   * Goal 17. cap1.MaxMin3.maxMin3([II)[I: Line 6
   * Goal 18. cap1.MaxMin3.maxMin3([II)[I: Line 7
   * Goal 19. cap1.MaxMin3.maxMin3([II)[I: Line 8
   * Goal 20. cap1.MaxMin3.maxMin3([II)[I: Line 9
   * Goal 21. cap1.MaxMin3.maxMin3([II)[I: Line 10
   * Goal 22. cap1.MaxMin3.maxMin3([II)[I: Line 11
   * Goal 23. cap1.MaxMin3.maxMin3([II)[I: Line 16
   * Goal 24. cap1.MaxMin3.maxMin3([II)[I: Line 17
   * Goal 25. cap1.MaxMin3.maxMin3([II)[I: Line 19
   * Goal 26. [METHOD] cap1.MaxMin3.maxMin3([II)[I
   * Goal 27. Weak Mutation 0: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 28. Weak Mutation 1: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 29. Weak Mutation 2: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 30. Weak Mutation 3: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 0
   * Goal 31. Weak Mutation 4: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 1
   * Goal 32. Weak Mutation 5: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> -1
   * Goal 33. Weak Mutation 6: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 3
   * Goal 34. Weak Mutation 7: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> +
   * Goal 35. Weak Mutation 8: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> -
   * Goal 36. Weak Mutation 9: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> *
   * Goal 37. Weak Mutation 10: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> /
   * Goal 38. Weak Mutation 13: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceComparisonOperator <= -> <
   * Goal 39. Weak Mutation 28: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp Negation of n
   * Goal 40. Weak Mutation 29: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC 1 n
   * Goal 41. Weak Mutation 30: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC -1 n
   * Goal 42. Weak Mutation 31: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceConstant - 1 -> 0
   * Goal 43. Weak Mutation 32: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> +
   * Goal 44. Weak Mutation 33: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> %
   * Goal 45. Weak Mutation 34: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> *
   * Goal 46. Weak Mutation 35: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> /
   * Goal 47. Weak Mutation 36: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 0 -> 1
   * Goal 48. Weak Mutation 37: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 1 -> 0
   * Goal 49. Weak Mutation 40: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceComparisonOperator <= -> ==
   * Goal 50. Weak Mutation 43: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 1 -> 0
   * Goal 51. Weak Mutation 44: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 0 -> 1
   * Goal 52. Weak Mutation 45: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 53. Weak Mutation 46: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 54. Weak Mutation 47: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 55. Weak Mutation 48: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 3
   * Goal 56. Weak Mutation 49: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> min
   * Goal 57. Weak Mutation 50: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> FimDoAnel
   * Goal 58. Weak Mutation 51: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> max
   * Goal 59. Weak Mutation 52: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> n
   * Goal 60. Weak Mutation 53: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp Negation of i
   * Goal 61. Weak Mutation 54: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC 1 i
   * Goal 62. Weak Mutation 55: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC -1 i
   * Goal 63. Weak Mutation 56: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> min
   * Goal 64. Weak Mutation 57: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> FimDoAnel
   * Goal 65. Weak Mutation 58: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> max
   * Goal 66. Weak Mutation 59: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> n
   * Goal 67. Weak Mutation 60: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp Negation of i
   * Goal 68. Weak Mutation 61: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC 1 i
   * Goal 69. Weak Mutation 62: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC -1 i
   * Goal 70. Weak Mutation 63: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceConstant - 1 -> 0
   * Goal 71. Weak Mutation 64: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> %
   * Goal 72. Weak Mutation 65: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> -
   * Goal 73. Weak Mutation 66: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> *
   * Goal 74. Weak Mutation 67: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> /
   * Goal 75. Weak Mutation 69: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceComparisonOperator <= -> <
   * Goal 76. Weak Mutation 129: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> min
   * Goal 77. Weak Mutation 130: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> FimDoAnel
   * Goal 78. Weak Mutation 131: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> max
   * Goal 79. Weak Mutation 132: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> n
   * Goal 80. Weak Mutation 133: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp Negation of i
   * Goal 81. Weak Mutation 134: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC 1 i
   * Goal 82. Weak Mutation 135: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC -1 i
   * Goal 83. Weak Mutation 136: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> i
   * Goal 84. Weak Mutation 137: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> FimDoAnel
   * Goal 85. Weak Mutation 138: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> max
   * Goal 86. Weak Mutation 139: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> n
   * Goal 87. Weak Mutation 140: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp Negation of min
   * Goal 88. Weak Mutation 141: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC 1 min
   * Goal 89. Weak Mutation 142: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC -1 min
   * Goal 90. Weak Mutation 143: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceComparisonOperator >= -> -1
   * Goal 91. Weak Mutation 144: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceComparisonOperator >= -> >
   * Goal 92. Weak Mutation 146: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> min
   * Goal 93. Weak Mutation 147: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> FimDoAnel
   * Goal 94. Weak Mutation 148: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> max
   * Goal 95. Weak Mutation 149: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> n
   * Goal 96. Weak Mutation 150: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp Negation of i
   * Goal 97. Weak Mutation 151: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC 1 i
   * Goal 98. Weak Mutation 152: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC -1 i
   * Goal 99. Weak Mutation 153: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> min
   * Goal 100. Weak Mutation 154: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> FimDoAnel
   * Goal 101. Weak Mutation 155: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> max
   * Goal 102. Weak Mutation 156: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> n
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 58;
      intArray0[1] = 1935;
      // Undeclared exception!
      try { 
        MaxMin3.maxMin3(intArray0, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         assertTrue(true);//assertThrownBy("cap1.MaxMin3", e);
      }
  }

  //Test case number: 5
  /*
   * 147 covered goals:
   * Goal 1. cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true
   * Goal 2. cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true
   * Goal 3. cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - true
   * Goal 4. cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - true
   * Goal 5. cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - false
   * Goal 6. cap1.MaxMin3.maxMin3([II)[I: I79 Branch 4 IF_ICMPLE L12 - true
   * Goal 7. cap1.MaxMin3.maxMin3([II)[I: I92 Branch 5 IF_ICMPGE L13 - false
   * Goal 8. cap1.MaxMin3.maxMin3([II)[I: I108 Branch 6 IF_ICMPGE L16 - true
   * Goal 9. cap1.MaxMin3.maxMin3([II)[I: I121 Branch 7 IF_ICMPLE L17 - true
   * Goal 10. Branch cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 11. Branch cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 12. Branch cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 13. Branch cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 14. Branch cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 15. Branch cap1.MaxMin3.maxMin3([II)[I: I79 Branch 4 IF_ICMPLE L12 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 16. Branch cap1.MaxMin3.maxMin3([II)[I: I92 Branch 5 IF_ICMPGE L13 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 17. Branch cap1.MaxMin3.maxMin3([II)[I: I108 Branch 6 IF_ICMPGE L16 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 18. Branch cap1.MaxMin3.maxMin3([II)[I: I121 Branch 7 IF_ICMPLE L17 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 19. maxMin3([II)[I_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 20. cap1.MaxMin3.maxMin3([II)[I: Line 5
   * Goal 21. cap1.MaxMin3.maxMin3([II)[I: Line 6
   * Goal 22. cap1.MaxMin3.maxMin3([II)[I: Line 7
   * Goal 23. cap1.MaxMin3.maxMin3([II)[I: Line 8
   * Goal 24. cap1.MaxMin3.maxMin3([II)[I: Line 9
   * Goal 25. cap1.MaxMin3.maxMin3([II)[I: Line 10
   * Goal 26. cap1.MaxMin3.maxMin3([II)[I: Line 11
   * Goal 27. cap1.MaxMin3.maxMin3([II)[I: Line 12
   * Goal 28. cap1.MaxMin3.maxMin3([II)[I: Line 13
   * Goal 29. cap1.MaxMin3.maxMin3([II)[I: Line 14
   * Goal 30. cap1.MaxMin3.maxMin3([II)[I: Line 16
   * Goal 31. cap1.MaxMin3.maxMin3([II)[I: Line 17
   * Goal 32. cap1.MaxMin3.maxMin3([II)[I: Line 19
   * Goal 33. [METHOD] cap1.MaxMin3.maxMin3([II)[I
   * Goal 34. Weak Mutation 0: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 35. Weak Mutation 1: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 36. Weak Mutation 2: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 37. Weak Mutation 3: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 0
   * Goal 38. Weak Mutation 4: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 1
   * Goal 39. Weak Mutation 5: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> -1
   * Goal 40. Weak Mutation 6: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 3
   * Goal 41. Weak Mutation 7: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> +
   * Goal 42. Weak Mutation 8: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> -
   * Goal 43. Weak Mutation 9: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> *
   * Goal 44. Weak Mutation 10: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> /
   * Goal 45. Weak Mutation 13: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceComparisonOperator <= -> <
   * Goal 46. Weak Mutation 28: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp Negation of n
   * Goal 47. Weak Mutation 29: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC 1 n
   * Goal 48. Weak Mutation 30: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC -1 n
   * Goal 49. Weak Mutation 31: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceConstant - 1 -> 0
   * Goal 50. Weak Mutation 32: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> +
   * Goal 51. Weak Mutation 33: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> %
   * Goal 52. Weak Mutation 34: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> *
   * Goal 53. Weak Mutation 35: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> /
   * Goal 54. Weak Mutation 36: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 0 -> 1
   * Goal 55. Weak Mutation 37: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 1 -> 0
   * Goal 56. Weak Mutation 39: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceComparisonOperator <= -> <
   * Goal 57. Weak Mutation 43: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 1 -> 0
   * Goal 58. Weak Mutation 44: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 0 -> 1
   * Goal 59. Weak Mutation 45: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 60. Weak Mutation 46: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 61. Weak Mutation 47: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 62. Weak Mutation 48: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 3
   * Goal 63. Weak Mutation 49: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> min
   * Goal 64. Weak Mutation 50: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> FimDoAnel
   * Goal 65. Weak Mutation 51: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> max
   * Goal 66. Weak Mutation 52: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> n
   * Goal 67. Weak Mutation 53: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp Negation of i
   * Goal 68. Weak Mutation 54: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC 1 i
   * Goal 69. Weak Mutation 55: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC -1 i
   * Goal 70. Weak Mutation 56: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> min
   * Goal 71. Weak Mutation 57: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> FimDoAnel
   * Goal 72. Weak Mutation 58: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> max
   * Goal 73. Weak Mutation 59: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> n
   * Goal 74. Weak Mutation 60: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp Negation of i
   * Goal 75. Weak Mutation 61: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC 1 i
   * Goal 76. Weak Mutation 62: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC -1 i
   * Goal 77. Weak Mutation 63: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceConstant - 1 -> 0
   * Goal 78. Weak Mutation 64: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> %
   * Goal 79. Weak Mutation 65: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> -
   * Goal 80. Weak Mutation 66: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> *
   * Goal 81. Weak Mutation 67: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> /
   * Goal 82. Weak Mutation 68: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceComparisonOperator <= -> -1
   * Goal 83. Weak Mutation 69: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceComparisonOperator <= -> <
   * Goal 84. Weak Mutation 71: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> min
   * Goal 85. Weak Mutation 72: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> FimDoAnel
   * Goal 86. Weak Mutation 73: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> max
   * Goal 87. Weak Mutation 74: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> n
   * Goal 88. Weak Mutation 75: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp Negation of i
   * Goal 89. Weak Mutation 76: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC 1 i
   * Goal 90. Weak Mutation 77: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC -1 i
   * Goal 91. Weak Mutation 78: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> i
   * Goal 92. Weak Mutation 80: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> FimDoAnel
   * Goal 93. Weak Mutation 81: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> n
   * Goal 94. Weak Mutation 82: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp Negation of max
   * Goal 95. Weak Mutation 83: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC 1 max
   * Goal 96. Weak Mutation 84: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC -1 max
   * Goal 97. Weak Mutation 86: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceComparisonOperator <= -> <
   * Goal 98. Weak Mutation 95: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> min
   * Goal 99. Weak Mutation 96: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> FimDoAnel
   * Goal 100. Weak Mutation 97: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> max
   * Goal 101. Weak Mutation 98: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> n
   * Goal 102. Weak Mutation 99: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp Negation of i
   * Goal 103. Weak Mutation 100: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC 1 i
   * Goal 104. Weak Mutation 101: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC -1 i
   * Goal 105. Weak Mutation 102: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceConstant - 1 -> 0
   * Goal 106. Weak Mutation 103: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> %
   * Goal 107. Weak Mutation 104: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> -
   * Goal 108. Weak Mutation 105: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> *
   * Goal 109. Weak Mutation 106: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> /
   * Goal 110. Weak Mutation 107: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> i
   * Goal 111. Weak Mutation 108: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> FimDoAnel
   * Goal 112. Weak Mutation 110: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> n
   * Goal 113. Weak Mutation 111: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp Negation of min
   * Goal 114. Weak Mutation 112: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC 1 min
   * Goal 115. Weak Mutation 113: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC -1 min
   * Goal 116. Weak Mutation 114: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceComparisonOperator >= -> -1
   * Goal 117. Weak Mutation 117: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> min
   * Goal 118. Weak Mutation 118: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> FimDoAnel
   * Goal 119. Weak Mutation 119: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> max
   * Goal 120. Weak Mutation 120: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> n
   * Goal 121. Weak Mutation 121: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp Negation of i
   * Goal 122. Weak Mutation 122: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC 1 i
   * Goal 123. Weak Mutation 123: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC -1 i
   * Goal 124. Weak Mutation 124: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceConstant - 1 -> 0
   * Goal 125. Weak Mutation 125: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> %
   * Goal 126. Weak Mutation 126: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> -
   * Goal 127. Weak Mutation 127: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> *
   * Goal 128. Weak Mutation 128: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> /
   * Goal 129. Weak Mutation 129: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> min
   * Goal 130. Weak Mutation 130: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> FimDoAnel
   * Goal 131. Weak Mutation 131: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> max
   * Goal 132. Weak Mutation 132: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable i -> n
   * Goal 133. Weak Mutation 133: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp Negation of i
   * Goal 134. Weak Mutation 134: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC 1 i
   * Goal 135. Weak Mutation 135: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC -1 i
   * Goal 136. Weak Mutation 136: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> i
   * Goal 137. Weak Mutation 137: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> FimDoAnel
   * Goal 138. Weak Mutation 138: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> max
   * Goal 139. Weak Mutation 139: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceVariable min -> n
   * Goal 140. Weak Mutation 140: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp Negation of min
   * Goal 141. Weak Mutation 141: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC 1 min
   * Goal 142. Weak Mutation 142: cap1.MaxMin3.maxMin3([II)[I:16 - InsertUnaryOp IINC -1 min
   * Goal 143. Weak Mutation 145: cap1.MaxMin3.maxMin3([II)[I:16 - ReplaceComparisonOperator >= -> ==
   * Goal 144. Weak Mutation 153: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> min
   * Goal 145. Weak Mutation 154: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> FimDoAnel
   * Goal 146. Weak Mutation 155: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> max
   * Goal 147. Weak Mutation 156: cap1.MaxMin3.maxMin3([II)[I:17 - ReplaceVariable i -> n
   */

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = (-1);
      // Undeclared exception!
      try { 
        MaxMin3.maxMin3(intArray0, 1180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         assertTrue(true);//assertThrownBy("cap1.MaxMin3", e);
      }
  }

  //Test case number: 6
  /*
   * 108 covered goals:
   * Goal 1. cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true
   * Goal 2. cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true
   * Goal 3. cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - true
   * Goal 4. cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - false
   * Goal 5. cap1.MaxMin3.maxMin3([II)[I: I79 Branch 4 IF_ICMPLE L12 - true
   * Goal 6. cap1.MaxMin3.maxMin3([II)[I: I92 Branch 5 IF_ICMPGE L13 - true
   * Goal 7. Branch cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 8. Branch cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 9. Branch cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 10. Branch cap1.MaxMin3.maxMin3([II)[I: I72 Branch 3 IF_ICMPLE L11 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 11. Branch cap1.MaxMin3.maxMin3([II)[I: I79 Branch 4 IF_ICMPLE L12 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 12. Branch cap1.MaxMin3.maxMin3([II)[I: I92 Branch 5 IF_ICMPGE L13 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 13. maxMin3([II)[I_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 14. cap1.MaxMin3.maxMin3([II)[I: Line 5
   * Goal 15. cap1.MaxMin3.maxMin3([II)[I: Line 6
   * Goal 16. cap1.MaxMin3.maxMin3([II)[I: Line 7
   * Goal 17. cap1.MaxMin3.maxMin3([II)[I: Line 8
   * Goal 18. cap1.MaxMin3.maxMin3([II)[I: Line 9
   * Goal 19. cap1.MaxMin3.maxMin3([II)[I: Line 10
   * Goal 20. cap1.MaxMin3.maxMin3([II)[I: Line 11
   * Goal 21. cap1.MaxMin3.maxMin3([II)[I: Line 12
   * Goal 22. cap1.MaxMin3.maxMin3([II)[I: Line 13
   * Goal 23. cap1.MaxMin3.maxMin3([II)[I: Line 19
   * Goal 24. [METHOD] cap1.MaxMin3.maxMin3([II)[I
   * Goal 25. Weak Mutation 0: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 26. Weak Mutation 1: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 27. Weak Mutation 2: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 28. Weak Mutation 3: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 0
   * Goal 29. Weak Mutation 4: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 1
   * Goal 30. Weak Mutation 5: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> -1
   * Goal 31. Weak Mutation 6: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 3
   * Goal 32. Weak Mutation 7: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> +
   * Goal 33. Weak Mutation 8: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> -
   * Goal 34. Weak Mutation 9: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> *
   * Goal 35. Weak Mutation 10: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> /
   * Goal 36. Weak Mutation 13: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceComparisonOperator <= -> <
   * Goal 37. Weak Mutation 28: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp Negation of n
   * Goal 38. Weak Mutation 29: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC 1 n
   * Goal 39. Weak Mutation 30: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC -1 n
   * Goal 40. Weak Mutation 31: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceConstant - 1 -> 0
   * Goal 41. Weak Mutation 32: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> +
   * Goal 42. Weak Mutation 33: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> %
   * Goal 43. Weak Mutation 34: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> *
   * Goal 44. Weak Mutation 35: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> /
   * Goal 45. Weak Mutation 36: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 37: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 40: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceComparisonOperator <= -> ==
   * Goal 48. Weak Mutation 43: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 1 -> 0
   * Goal 49. Weak Mutation 44: cap1.MaxMin3.maxMin3([II)[I:8 - ReplaceConstant - 0 -> 1
   * Goal 50. Weak Mutation 45: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 51. Weak Mutation 46: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 52. Weak Mutation 47: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 53. Weak Mutation 48: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 3
   * Goal 54. Weak Mutation 49: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> min
   * Goal 55. Weak Mutation 50: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> FimDoAnel
   * Goal 56. Weak Mutation 51: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> max
   * Goal 57. Weak Mutation 52: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> n
   * Goal 58. Weak Mutation 53: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp Negation of i
   * Goal 59. Weak Mutation 54: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC 1 i
   * Goal 60. Weak Mutation 55: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC -1 i
   * Goal 61. Weak Mutation 56: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> min
   * Goal 62. Weak Mutation 57: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> FimDoAnel
   * Goal 63. Weak Mutation 58: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> max
   * Goal 64. Weak Mutation 59: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceVariable i -> n
   * Goal 65. Weak Mutation 60: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp Negation of i
   * Goal 66. Weak Mutation 61: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC 1 i
   * Goal 67. Weak Mutation 62: cap1.MaxMin3.maxMin3([II)[I:11 - InsertUnaryOp IINC -1 i
   * Goal 68. Weak Mutation 63: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceConstant - 1 -> 0
   * Goal 69. Weak Mutation 64: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> %
   * Goal 70. Weak Mutation 65: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> -
   * Goal 71. Weak Mutation 66: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> *
   * Goal 72. Weak Mutation 67: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceArithmeticOperator + -> /
   * Goal 73. Weak Mutation 68: cap1.MaxMin3.maxMin3([II)[I:11 - ReplaceComparisonOperator <= -> -1
   * Goal 74. Weak Mutation 71: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> min
   * Goal 75. Weak Mutation 72: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> FimDoAnel
   * Goal 76. Weak Mutation 73: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> max
   * Goal 77. Weak Mutation 74: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable i -> n
   * Goal 78. Weak Mutation 75: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp Negation of i
   * Goal 79. Weak Mutation 76: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC 1 i
   * Goal 80. Weak Mutation 77: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC -1 i
   * Goal 81. Weak Mutation 78: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> i
   * Goal 82. Weak Mutation 79: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> min
   * Goal 83. Weak Mutation 80: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> FimDoAnel
   * Goal 84. Weak Mutation 81: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceVariable max -> n
   * Goal 85. Weak Mutation 82: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp Negation of max
   * Goal 86. Weak Mutation 83: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC 1 max
   * Goal 87. Weak Mutation 84: cap1.MaxMin3.maxMin3([II)[I:12 - InsertUnaryOp IINC -1 max
   * Goal 88. Weak Mutation 87: cap1.MaxMin3.maxMin3([II)[I:12 - ReplaceComparisonOperator <= -> ==
   * Goal 89. Weak Mutation 95: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> min
   * Goal 90. Weak Mutation 96: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> FimDoAnel
   * Goal 91. Weak Mutation 97: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> max
   * Goal 92. Weak Mutation 98: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable i -> n
   * Goal 93. Weak Mutation 99: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp Negation of i
   * Goal 94. Weak Mutation 100: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC 1 i
   * Goal 95. Weak Mutation 101: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC -1 i
   * Goal 96. Weak Mutation 102: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceConstant - 1 -> 0
   * Goal 97. Weak Mutation 103: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> %
   * Goal 98. Weak Mutation 104: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> -
   * Goal 99. Weak Mutation 105: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> *
   * Goal 100. Weak Mutation 106: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceArithmeticOperator + -> /
   * Goal 101. Weak Mutation 107: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> i
   * Goal 102. Weak Mutation 108: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> FimDoAnel
   * Goal 103. Weak Mutation 109: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> max
   * Goal 104. Weak Mutation 110: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceVariable min -> n
   * Goal 105. Weak Mutation 111: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp Negation of min
   * Goal 106. Weak Mutation 112: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC 1 min
   * Goal 107. Weak Mutation 113: cap1.MaxMin3.maxMin3([II)[I:13 - InsertUnaryOp IINC -1 min
   * Goal 108. Weak Mutation 115: cap1.MaxMin3.maxMin3([II)[I:13 - ReplaceComparisonOperator >= -> >
   */

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 811;
      intArray0[2] = 58;
      // Undeclared exception!
      try { 
        MaxMin3.maxMin3(intArray0, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         assertTrue(true);//assertThrownBy("cap1.MaxMin3", e);
      }
  }

  //Test case number: 7
  /*
   * 44 covered goals:
   * Goal 1. cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true
   * Goal 2. cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - false
   * Goal 3. cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - false
   * Goal 4. Branch cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - true in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 5. Branch cap1.MaxMin3.maxMin3([II)[I: I32 Branch 2 IF_ICMPLE L7 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 6. Branch cap1.MaxMin3.maxMin3([II)[I: I135 Branch 8 IF_ICMPLT L10 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 7. [Output]: cap1.MaxMin3.maxMin3([II)[I:NonEmptyArray
   * Goal 8. cap1.MaxMin3.maxMin3([II)[I: Line 5
   * Goal 9. cap1.MaxMin3.maxMin3([II)[I: Line 6
   * Goal 10. cap1.MaxMin3.maxMin3([II)[I: Line 7
   * Goal 11. cap1.MaxMin3.maxMin3([II)[I: Line 9
   * Goal 12. cap1.MaxMin3.maxMin3([II)[I: Line 10
   * Goal 13. cap1.MaxMin3.maxMin3([II)[I: Line 21
   * Goal 14. cap1.MaxMin3.maxMin3([II)[I: Line 22
   * Goal 15. cap1.MaxMin3.maxMin3([II)[I: Line 23
   * Goal 16. [METHOD] cap1.MaxMin3.maxMin3([II)[I
   * Goal 17. [METHODNOEX] cap1.MaxMin3.maxMin3([II)[I
   * Goal 18. Weak Mutation 0: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 19. Weak Mutation 1: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 20. Weak Mutation 2: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 21. Weak Mutation 3: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 0
   * Goal 22. Weak Mutation 4: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 1
   * Goal 23. Weak Mutation 5: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> -1
   * Goal 24. Weak Mutation 6: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 3
   * Goal 25. Weak Mutation 7: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> +
   * Goal 26. Weak Mutation 8: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> -
   * Goal 27. Weak Mutation 13: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceComparisonOperator <= -> <
   * Goal 28. Weak Mutation 28: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp Negation of n
   * Goal 29. Weak Mutation 29: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC 1 n
   * Goal 30. Weak Mutation 30: cap1.MaxMin3.maxMin3([II)[I:6 - InsertUnaryOp IINC -1 n
   * Goal 31. Weak Mutation 31: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceConstant - 1 -> 0
   * Goal 32. Weak Mutation 32: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> +
   * Goal 33. Weak Mutation 33: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> %
   * Goal 34. Weak Mutation 34: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> *
   * Goal 35. Weak Mutation 35: cap1.MaxMin3.maxMin3([II)[I:6 - ReplaceArithmeticOperator - -> /
   * Goal 36. Weak Mutation 36: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 0 -> 1
   * Goal 37. Weak Mutation 37: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 1 -> 0
   * Goal 38. Weak Mutation 38: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceComparisonOperator <= -> -1
   * Goal 39. Weak Mutation 41: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 0 -> 1
   * Goal 40. Weak Mutation 42: cap1.MaxMin3.maxMin3([II)[I:7 - ReplaceConstant - 1 -> 0
   * Goal 41. Weak Mutation 45: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 42. Weak Mutation 46: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 43. Weak Mutation 47: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 44. Weak Mutation 48: cap1.MaxMin3.maxMin3([II)[I:9 - ReplaceConstant - 2 -> 3
   */

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 460;
      int[] intArray1 = MaxMin3.maxMin3(intArray0, 0);
      assertArrayEquals(new int[] {460, 0}, intArray1);
  }

  //Test case number: 8
  /*
   * 28 covered goals:
   * Goal 1. cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - false
   * Goal 2. Branch cap1.MaxMin3.maxMin3([II)[I: I5 Branch 1 IFLE L5 - false in context: cap1.MaxMin3:maxMin3([II)[I
   * Goal 3. maxMin3([II)[I_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 4. cap1.MaxMin3.maxMin3([II)[I: Line 5
   * Goal 5. [METHOD] cap1.MaxMin3.maxMin3([II)[I
   * Goal 6. Weak Mutation 0: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 7. Weak Mutation 1: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 8. Weak Mutation 2: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 9. Weak Mutation 3: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 0
   * Goal 10. Weak Mutation 4: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 1
   * Goal 11. Weak Mutation 5: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> -1
   * Goal 12. Weak Mutation 6: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 2 -> 3
   * Goal 13. Weak Mutation 7: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> +
   * Goal 14. Weak Mutation 8: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> -
   * Goal 15. Weak Mutation 9: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> *
   * Goal 16. Weak Mutation 10: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator % -> /
   * Goal 17. Weak Mutation 11: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceComparisonOperator <= -> -1
   * Goal 18. Weak Mutation 14: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 19. Weak Mutation 15: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 20. Weak Mutation 16: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 21. Weak Mutation 17: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 22. Weak Mutation 18: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 23. Weak Mutation 19: cap1.MaxMin3.maxMin3([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 24. Weak Mutation 20: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceConstant - 1 -> 0
   * Goal 25. Weak Mutation 21: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator - -> +
   * Goal 26. Weak Mutation 22: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator - -> %
   * Goal 27. Weak Mutation 23: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator - -> *
   * Goal 28. Weak Mutation 24: cap1.MaxMin3.maxMin3([II)[I:5 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MaxMin3.maxMin3(intArray0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 122
         //
         assertTrue(true);//assertThrownBy("cap1.MaxMin3", e);
      }
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * Goal 1. cap1.MaxMin3.<init>()V: root-Branch
   * Goal 2. Branch cap1.MaxMin3.<init>()V: root-Branch in context: cap1.MaxMin3:<init>()V
   * Goal 3. [METHOD] cap1.MaxMin3.<init>()V
   * Goal 4. [METHODNOEX] cap1.MaxMin3.<init>()V
   */

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MaxMin3 maxMin3_0 = new MaxMin3();
  }
}
