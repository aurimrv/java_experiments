/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 04 20:07:51 GMT 2020
 */

package ds.seed7992;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ds.Item;
import ds.MeuItem;
import ds.Tabela;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Evo extends Tabela_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Tabela tabela0 = new Tabela();
      Item[] itemArray0 = new Item[3];
      MeuItem meuItem0 = new MeuItem(0);
      itemArray0[2] = (Item) meuItem0;
      tabela0.insere(itemArray0[2]);
      tabela0.insere((Item) null);
      MeuItem meuItem1 = new MeuItem(2);
      // Undeclared exception!
      try { 
        tabela0.binaria(meuItem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Tabela tabela0 = new Tabela();
      Item[] itemArray0 = new Item[3];
      MeuItem meuItem0 = new MeuItem(0);
      itemArray0[2] = (Item) meuItem0;
      tabela0.insere(itemArray0[2]);
      MeuItem meuItem1 = new MeuItem(2);
      int int0 = tabela0.binaria(meuItem1);
      assertEquals(1, tabela0.n);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Tabela tabela0 = new Tabela();
      MeuItem meuItem0 = new MeuItem(0);
      int int0 = tabela0.binaria(meuItem0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Tabela tabela0 = new Tabela();
      MeuItem meuItem0 = new MeuItem(0);
      tabela0.insere(meuItem0);
      int int0 = tabela0.binaria(meuItem0);
      assertEquals(1, tabela0.n);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Tabela tabela0 = new Tabela();
      tabela0.n = 10;
      MeuItem meuItem0 = new MeuItem(11);
      try { 
        tabela0.insere(meuItem0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Erro: A tabela esta cheia
         //
         verifyException("ds.Tabela", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Tabela tabela0 = new Tabela();
      MeuItem meuItem0 = new MeuItem(0);
      tabela0.insere(meuItem0);
      MeuItem meuItem1 = new MeuItem(1);
      int int0 = tabela0.pesquisa(meuItem1);
      assertEquals(1, tabela0.n);
      assertEquals(0, int0);
  }
}
