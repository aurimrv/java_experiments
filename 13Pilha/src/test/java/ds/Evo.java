/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 03 19:54:34 GMT 2016
 */

package ds;

import org.junit.Test;
import static org.junit.Assert.*;

//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import ds.Pilha;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Evo {

  //Test case number: 0
  /*
   * 40 covered goals:
   * Goal 1. cap3.arranjo.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.arranjo.Pilha.tamanho()I: root-Branch
   * Goal 3. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - true
   * Goal 4. Branch cap3.arranjo.Pilha.tamanho()I: root-Branch in context: cap3.arranjo.Pilha:tamanho()I
   * Goal 5. Branch cap3.arranjo.Pilha.<init>()V: root-Branch in context: cap3.arranjo.Pilha:<init>()V
   * Goal 6. Branch cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - true in context: cap3.arranjo.Pilha:empilha(Ljava/lang/Object;)V
   * Goal 7. [Output]: cap3.arranjo.Pilha.tamanho()I:Positive
   * Goal 8. cap3.arranjo.Pilha.<init>()V: Line 7
   * Goal 9. cap3.arranjo.Pilha.<init>()V: Line 8
   * Goal 10. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 10
   * Goal 11. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 12
   * Goal 12. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 13
   * Goal 13. cap3.arranjo.Pilha.tamanho()I: Line 23
   * Goal 14. [METHOD] cap3.arranjo.Pilha.<init>()V
   * Goal 15. [METHOD] cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 16. [METHOD] cap3.arranjo.Pilha.tamanho()I
   * Goal 17. [METHODNOEX] cap3.arranjo.Pilha.<init>()V
   * Goal 18. [METHODNOEX] cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 19. [METHODNOEX] cap3.arranjo.Pilha.tamanho()I
   * Goal 20. Weak Mutation 0: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 0
   * Goal 21. Weak Mutation 1: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1
   * Goal 22. Weak Mutation 2: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> -1
   * Goal 23. Weak Mutation 3: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 999
   * Goal 24. Weak Mutation 4: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1001
   * Goal 25. Weak Mutation 5: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 6: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 7: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp +1
   * Goal 28. Weak Mutation 8: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp -1
   * Goal 29. Weak Mutation 11: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - ReplaceComparisonOperator != -> >
   * Goal 30. Weak Mutation 14: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 15: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp +1
   * Goal 32. Weak Mutation 16: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp -1
   * Goal 33. Weak Mutation 17: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 34. Weak Mutation 18: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> %
   * Goal 35. Weak Mutation 19: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> -
   * Goal 36. Weak Mutation 20: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> *
   * Goal 37. Weak Mutation 21: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> /
   * Goal 38. Weak Mutation 41: cap3.arranjo.Pilha.tamanho()I:23 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 42: cap3.arranjo.Pilha.tamanho()I:23 - InsertUnaryOp +1
   * Goal 40. Weak Mutation 43: cap3.arranjo.Pilha.tamanho()I:23 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      pilha0.empilha(pilha0.topo);
      int int0 = pilha0.tamanho();
      assertEquals(1, pilha0.topo);
      assertEquals(1, int0);
  }

  //Test case number: 1
  /*
   * 21 covered goals:
   * Goal 1. cap3.arranjo.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.arranjo.Pilha.tamanho()I: root-Branch
   * Goal 3. Branch cap3.arranjo.Pilha.tamanho()I: root-Branch in context: cap3.arranjo.Pilha:tamanho()I
   * Goal 4. Branch cap3.arranjo.Pilha.<init>()V: root-Branch in context: cap3.arranjo.Pilha:<init>()V
   * Goal 5. [Output]: cap3.arranjo.Pilha.tamanho()I:Negative
   * Goal 6. cap3.arranjo.Pilha.<init>()V: Line 7
   * Goal 7. cap3.arranjo.Pilha.<init>()V: Line 8
   * Goal 8. cap3.arranjo.Pilha.tamanho()I: Line 23
   * Goal 9. [METHOD] cap3.arranjo.Pilha.<init>()V
   * Goal 10. [METHOD] cap3.arranjo.Pilha.tamanho()I
   * Goal 11. [METHODNOEX] cap3.arranjo.Pilha.<init>()V
   * Goal 12. [METHODNOEX] cap3.arranjo.Pilha.tamanho()I
   * Goal 13. Weak Mutation 0: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 0
   * Goal 14. Weak Mutation 1: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1
   * Goal 15. Weak Mutation 2: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> -1
   * Goal 16. Weak Mutation 3: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 999
   * Goal 17. Weak Mutation 4: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1001
   * Goal 18. Weak Mutation 5: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 41: cap3.arranjo.Pilha.tamanho()I:23 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 42: cap3.arranjo.Pilha.tamanho()I:23 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 43: cap3.arranjo.Pilha.tamanho()I:23 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      pilha0.topo = (-1174);
      int int0 = pilha0.tamanho();
      assertEquals((-1174), int0);
  }

  //Test case number: 2
  /*
   * 53 covered goals:
   * Goal 1. cap3.arranjo.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - true
   * Goal 3. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 2 IFEQ L15 - true
   * Goal 4. cap3.arranjo.Pilha.vazia()Z: I4 Branch 3 IFNE L20 - true
   * Goal 5. Branch cap3.arranjo.Pilha.<init>()V: root-Branch in context: cap3.arranjo.Pilha:<init>()V
   * Goal 6. Branch cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - true in context: cap3.arranjo.Pilha:empilha(Ljava/lang/Object;)V
   * Goal 7. Branch cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 2 IFEQ L15 - true in context: cap3.arranjo.Pilha:desempilha()Ljava/lang/Object;
   * Goal 8. [Output]: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:Null
   * Goal 9. cap3.arranjo.Pilha.<init>()V: Line 7
   * Goal 10. cap3.arranjo.Pilha.<init>()V: Line 8
   * Goal 11. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: Line 15
   * Goal 12. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: Line 17
   * Goal 13. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 10
   * Goal 14. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 12
   * Goal 15. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 13
   * Goal 16. cap3.arranjo.Pilha.vazia()Z: Line 20
   * Goal 17. [METHOD] cap3.arranjo.Pilha.<init>()V
   * Goal 18. [METHOD] cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;
   * Goal 19. [METHOD] cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 20. [METHODNOEX] cap3.arranjo.Pilha.<init>()V
   * Goal 21. [METHODNOEX] cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;
   * Goal 22. [METHODNOEX] cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 23. Weak Mutation 0: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 0
   * Goal 24. Weak Mutation 1: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1
   * Goal 25. Weak Mutation 2: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> -1
   * Goal 26. Weak Mutation 3: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 999
   * Goal 27. Weak Mutation 4: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1001
   * Goal 28. Weak Mutation 5: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 0 -> 1
   * Goal 29. Weak Mutation 6: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 7: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp +1
   * Goal 31. Weak Mutation 8: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp -1
   * Goal 32. Weak Mutation 11: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - ReplaceComparisonOperator != -> >
   * Goal 33. Weak Mutation 14: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp Negation
   * Goal 34. Weak Mutation 15: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp +1
   * Goal 35. Weak Mutation 16: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp -1
   * Goal 36. Weak Mutation 17: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 37. Weak Mutation 18: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> %
   * Goal 38. Weak Mutation 19: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> -
   * Goal 39. Weak Mutation 20: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> *
   * Goal 40. Weak Mutation 21: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> /
   * Goal 41. Weak Mutation 22: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:15 - ReplaceComparisonOperator == -> !=
   * Goal 42. Weak Mutation 25: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 26: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - InsertUnaryOp +1
   * Goal 44. Weak Mutation 27: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - InsertUnaryOp -1
   * Goal 45. Weak Mutation 28: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceConstant - 1 -> 0
   * Goal 46. Weak Mutation 29: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceArithmeticOperator - -> +
   * Goal 47. Weak Mutation 31: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceArithmeticOperator - -> *
   * Goal 48. Weak Mutation 32: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceArithmeticOperator - -> /
   * Goal 49. Weak Mutation 33: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 34: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp +1
   * Goal 51. Weak Mutation 35: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp -1
   * Goal 52. Weak Mutation 37: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceComparisonOperator != -> <
   * Goal 53. Weak Mutation 40: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      pilha0.empilha((Object) null);
      pilha0.desempilha();
      assertEquals(0, pilha0.topo);
  }

  //Test case number: 3
  /*
   * 30 covered goals:
   * Goal 1. cap3.arranjo.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - true
   * Goal 3. Branch cap3.arranjo.Pilha.<init>()V: root-Branch in context: cap3.arranjo.Pilha:<init>()V
   * Goal 4. Branch cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - true in context: cap3.arranjo.Pilha:empilha(Ljava/lang/Object;)V
   * Goal 5. empilha(Ljava/lang/Object;)V_java.lang.ArrayIndexOutOfBoundsException_DECLARED
   * Goal 6. cap3.arranjo.Pilha.<init>()V: Line 7
   * Goal 7. cap3.arranjo.Pilha.<init>()V: Line 8
   * Goal 8. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 10
   * Goal 9. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 12
   * Goal 10. [METHOD] cap3.arranjo.Pilha.<init>()V
   * Goal 11. [METHOD] cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 12. [METHODNOEX] cap3.arranjo.Pilha.<init>()V
   * Goal 13. Weak Mutation 0: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 0
   * Goal 14. Weak Mutation 1: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1
   * Goal 15. Weak Mutation 2: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> -1
   * Goal 16. Weak Mutation 3: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 999
   * Goal 17. Weak Mutation 4: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1001
   * Goal 18. Weak Mutation 5: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 6: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 7: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 8: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp -1
   * Goal 22. Weak Mutation 10: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - ReplaceComparisonOperator != -> <
   * Goal 23. Weak Mutation 14: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 15: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp +1
   * Goal 25. Weak Mutation 16: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp -1
   * Goal 26. Weak Mutation 17: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 27. Weak Mutation 18: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> %
   * Goal 28. Weak Mutation 19: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> -
   * Goal 29. Weak Mutation 20: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> *
   * Goal 30. Weak Mutation 21: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      Object object0 = new Object();
      pilha0.topo = 2295;
      try { 
        pilha0.empilha(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2295
         //
    	  assertTrue(true);//assertThrownBy("cap3.arranjo.Pilha", e);
      }
  }

  //Test case number: 4
  /*
   * 34 covered goals:
   * Goal 1. cap3.arranjo.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 2 IFEQ L15 - true
   * Goal 3. cap3.arranjo.Pilha.vazia()Z: I4 Branch 3 IFNE L20 - true
   * Goal 4. Branch cap3.arranjo.Pilha.<init>()V: root-Branch in context: cap3.arranjo.Pilha:<init>()V
   * Goal 5. Branch cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 2 IFEQ L15 - true in context: cap3.arranjo.Pilha:desempilha()Ljava/lang/Object;
   * Goal 6. desempilha()Ljava/lang/Object;_java.lang.ArrayIndexOutOfBoundsException_DECLARED
   * Goal 7. cap3.arranjo.Pilha.<init>()V: Line 7
   * Goal 8. cap3.arranjo.Pilha.<init>()V: Line 8
   * Goal 9. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: Line 15
   * Goal 10. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: Line 17
   * Goal 11. cap3.arranjo.Pilha.vazia()Z: Line 20
   * Goal 12. [METHOD] cap3.arranjo.Pilha.<init>()V
   * Goal 13. [METHOD] cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;
   * Goal 14. [METHODNOEX] cap3.arranjo.Pilha.<init>()V
   * Goal 15. Weak Mutation 0: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 0
   * Goal 16. Weak Mutation 1: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1
   * Goal 17. Weak Mutation 2: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> -1
   * Goal 18. Weak Mutation 3: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 999
   * Goal 19. Weak Mutation 4: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1001
   * Goal 20. Weak Mutation 5: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 22: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:15 - ReplaceComparisonOperator == -> !=
   * Goal 22. Weak Mutation 25: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - InsertUnaryOp Negation
   * Goal 23. Weak Mutation 26: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - InsertUnaryOp +1
   * Goal 24. Weak Mutation 27: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - InsertUnaryOp -1
   * Goal 25. Weak Mutation 28: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceConstant - 1 -> 0
   * Goal 26. Weak Mutation 29: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceArithmeticOperator - -> +
   * Goal 27. Weak Mutation 30: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceArithmeticOperator - -> %
   * Goal 28. Weak Mutation 31: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceArithmeticOperator - -> *
   * Goal 29. Weak Mutation 32: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceArithmeticOperator - -> /
   * Goal 30. Weak Mutation 33: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 34: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp +1
   * Goal 32. Weak Mutation 35: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp -1
   * Goal 33. Weak Mutation 38: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceComparisonOperator != -> >
   * Goal 34. Weak Mutation 40: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      pilha0.topo = (-2683);
      try { 
        pilha0.desempilha();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2684
         //
    	  assertTrue(true);//assertThrownBy("cap3.arranjo.Pilha", e);
      }
  }

  //Test case number: 5
  /*
   * 60 covered goals:
   * Goal 1. cap3.arranjo.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - true
   * Goal 3. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 2 IFEQ L15 - true
   * Goal 4. cap3.arranjo.Pilha.vazia()Z: I4 Branch 3 IFNE L20 - true
   * Goal 5. cap3.arranjo.Pilha.vazia()Z: I4 Branch 3 IFNE L20 - false
   * Goal 6. Branch cap3.arranjo.Pilha.<init>()V: root-Branch in context: cap3.arranjo.Pilha:<init>()V
   * Goal 7. Branch cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - true in context: cap3.arranjo.Pilha:empilha(Ljava/lang/Object;)V
   * Goal 8. Branch cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 2 IFEQ L15 - true in context: cap3.arranjo.Pilha:desempilha()Ljava/lang/Object;
   * Goal 9. Branch cap3.arranjo.Pilha.vazia()Z: I4 Branch 3 IFNE L20 - false in context: cap3.arranjo.Pilha:vazia()Z
   * Goal 10. [Output]: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:NonNull
   * Goal 11. [Output]: cap3.arranjo.Pilha.vazia()Z:True
   * Goal 12. cap3.arranjo.Pilha.<init>()V: Line 7
   * Goal 13. cap3.arranjo.Pilha.<init>()V: Line 8
   * Goal 14. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: Line 15
   * Goal 15. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: Line 17
   * Goal 16. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 10
   * Goal 17. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 12
   * Goal 18. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 13
   * Goal 19. cap3.arranjo.Pilha.vazia()Z: Line 20
   * Goal 20. [METHOD] cap3.arranjo.Pilha.<init>()V
   * Goal 21. [METHOD] cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;
   * Goal 22. [METHOD] cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 23. [METHOD] cap3.arranjo.Pilha.vazia()Z
   * Goal 24. [METHODNOEX] cap3.arranjo.Pilha.<init>()V
   * Goal 25. [METHODNOEX] cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;
   * Goal 26. [METHODNOEX] cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 27. [METHODNOEX] cap3.arranjo.Pilha.vazia()Z
   * Goal 28. Weak Mutation 0: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 0
   * Goal 29. Weak Mutation 1: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1
   * Goal 30. Weak Mutation 2: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> -1
   * Goal 31. Weak Mutation 3: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 999
   * Goal 32. Weak Mutation 4: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1001
   * Goal 33. Weak Mutation 5: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 0 -> 1
   * Goal 34. Weak Mutation 6: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 7: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp +1
   * Goal 36. Weak Mutation 8: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp -1
   * Goal 37. Weak Mutation 11: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - ReplaceComparisonOperator != -> >
   * Goal 38. Weak Mutation 14: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 15: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp +1
   * Goal 40. Weak Mutation 16: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp -1
   * Goal 41. Weak Mutation 17: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 42. Weak Mutation 18: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> %
   * Goal 43. Weak Mutation 19: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> -
   * Goal 44. Weak Mutation 20: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> *
   * Goal 45. Weak Mutation 21: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> /
   * Goal 46. Weak Mutation 22: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:15 - ReplaceComparisonOperator == -> !=
   * Goal 47. Weak Mutation 25: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - InsertUnaryOp Negation
   * Goal 48. Weak Mutation 26: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - InsertUnaryOp +1
   * Goal 49. Weak Mutation 27: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - InsertUnaryOp -1
   * Goal 50. Weak Mutation 28: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceConstant - 1 -> 0
   * Goal 51. Weak Mutation 29: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceArithmeticOperator - -> +
   * Goal 52. Weak Mutation 31: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceArithmeticOperator - -> *
   * Goal 53. Weak Mutation 32: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:17 - ReplaceArithmeticOperator - -> /
   * Goal 54. Weak Mutation 33: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp Negation
   * Goal 55. Weak Mutation 34: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp +1
   * Goal 56. Weak Mutation 35: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp -1
   * Goal 57. Weak Mutation 36: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceComparisonOperator != -> -1
   * Goal 58. Weak Mutation 37: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceComparisonOperator != -> <
   * Goal 59. Weak Mutation 39: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceConstant - 1 -> 0
   * Goal 60. Weak Mutation 40: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      pilha0.empilha("+XSNhhOG:IotKO,W");
      assertEquals(1, pilha0.topo);
      
      pilha0.desempilha();
      boolean boolean0 = pilha0.vazia();
      assertTrue(boolean0);
  }

  //Test case number: 6
  /*
   * 42 covered goals:
   * Goal 1. cap3.arranjo.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - true
   * Goal 3. cap3.arranjo.Pilha.vazia()Z: I4 Branch 3 IFNE L20 - true
   * Goal 4. Branch cap3.arranjo.Pilha.<init>()V: root-Branch in context: cap3.arranjo.Pilha:<init>()V
   * Goal 5. Branch cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - true in context: cap3.arranjo.Pilha:empilha(Ljava/lang/Object;)V
   * Goal 6. Branch cap3.arranjo.Pilha.vazia()Z: I4 Branch 3 IFNE L20 - true in context: cap3.arranjo.Pilha:vazia()Z
   * Goal 7. [Output]: cap3.arranjo.Pilha.vazia()Z:False
   * Goal 8. cap3.arranjo.Pilha.<init>()V: Line 7
   * Goal 9. cap3.arranjo.Pilha.<init>()V: Line 8
   * Goal 10. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 10
   * Goal 11. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 12
   * Goal 12. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 13
   * Goal 13. cap3.arranjo.Pilha.vazia()Z: Line 20
   * Goal 14. [METHOD] cap3.arranjo.Pilha.<init>()V
   * Goal 15. [METHOD] cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 16. [METHOD] cap3.arranjo.Pilha.vazia()Z
   * Goal 17. [METHODNOEX] cap3.arranjo.Pilha.<init>()V
   * Goal 18. [METHODNOEX] cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 19. [METHODNOEX] cap3.arranjo.Pilha.vazia()Z
   * Goal 20. Weak Mutation 0: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 0
   * Goal 21. Weak Mutation 1: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1
   * Goal 22. Weak Mutation 2: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> -1
   * Goal 23. Weak Mutation 3: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 999
   * Goal 24. Weak Mutation 4: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1001
   * Goal 25. Weak Mutation 5: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 6: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 7: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp +1
   * Goal 28. Weak Mutation 8: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp -1
   * Goal 29. Weak Mutation 11: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - ReplaceComparisonOperator != -> >
   * Goal 30. Weak Mutation 14: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 15: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp +1
   * Goal 32. Weak Mutation 16: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - InsertUnaryOp -1
   * Goal 33. Weak Mutation 17: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceConstant - 1 -> 0
   * Goal 34. Weak Mutation 18: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> %
   * Goal 35. Weak Mutation 19: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> -
   * Goal 36. Weak Mutation 20: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> *
   * Goal 37. Weak Mutation 21: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:12 - ReplaceArithmeticOperator + -> /
   * Goal 38. Weak Mutation 33: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 34: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp +1
   * Goal 40. Weak Mutation 35: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp -1
   * Goal 41. Weak Mutation 37: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceComparisonOperator != -> <
   * Goal 42. Weak Mutation 40: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      pilha0.empilha(pilha0.topo);
      boolean boolean0 = pilha0.vazia();
      assertEquals(1, pilha0.topo);
      assertFalse(boolean0);
  }

  //Test case number: 7
  /*
   * 28 covered goals:
   * Goal 1. cap3.arranjo.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 2 IFEQ L15 - false
   * Goal 3. cap3.arranjo.Pilha.vazia()Z: I4 Branch 3 IFNE L20 - false
   * Goal 4. Branch cap3.arranjo.Pilha.<init>()V: root-Branch in context: cap3.arranjo.Pilha:<init>()V
   * Goal 5. Branch cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: I4 Branch 2 IFEQ L15 - false in context: cap3.arranjo.Pilha:desempilha()Ljava/lang/Object;
   * Goal 6. desempilha()Ljava/lang/Object;_java.lang.Exception_DECLARED
   * Goal 7. cap3.arranjo.Pilha.<init>()V: Line 7
   * Goal 8. cap3.arranjo.Pilha.<init>()V: Line 8
   * Goal 9. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: Line 15
   * Goal 10. cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;: Line 16
   * Goal 11. cap3.arranjo.Pilha.vazia()Z: Line 20
   * Goal 12. [METHOD] cap3.arranjo.Pilha.<init>()V
   * Goal 13. [METHOD] cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;
   * Goal 14. [METHODNOEX] cap3.arranjo.Pilha.<init>()V
   * Goal 15. Weak Mutation 0: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 0
   * Goal 16. Weak Mutation 1: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1
   * Goal 17. Weak Mutation 2: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> -1
   * Goal 18. Weak Mutation 3: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 999
   * Goal 19. Weak Mutation 4: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1001
   * Goal 20. Weak Mutation 5: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 22: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:15 - ReplaceComparisonOperator == -> !=
   * Goal 22. Weak Mutation 23: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:16 - ReplaceConstant - Erro: A pilha esta vazia -> 
   * Goal 23. Weak Mutation 24: cap3.arranjo.Pilha.desempilha()Ljava/lang/Object;:16 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 33: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 34: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp +1
   * Goal 26. Weak Mutation 35: cap3.arranjo.Pilha.vazia()Z:20 - InsertUnaryOp -1
   * Goal 27. Weak Mutation 36: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceComparisonOperator != -> -1
   * Goal 28. Weak Mutation 39: cap3.arranjo.Pilha.vazia()Z:20 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      try { 
        pilha0.desempilha();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Erro: A pilha esta vazia
         //
    	  assertTrue(true);//assertThrownBy("cap3.arranjo.Pilha", e);
      }
  }

  //Test case number: 8
  /*
   * 24 covered goals:
   * Goal 1. cap3.arranjo.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - false
   * Goal 3. Branch cap3.arranjo.Pilha.<init>()V: root-Branch in context: cap3.arranjo.Pilha:<init>()V
   * Goal 4. Branch cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: I7 Branch 1 IF_ICMPNE L10 - false in context: cap3.arranjo.Pilha:empilha(Ljava/lang/Object;)V
   * Goal 5. empilha(Ljava/lang/Object;)V_java.lang.Exception_DECLARED
   * Goal 6. cap3.arranjo.Pilha.<init>()V: Line 7
   * Goal 7. cap3.arranjo.Pilha.<init>()V: Line 8
   * Goal 8. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 10
   * Goal 9. cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V: Line 11
   * Goal 10. [METHOD] cap3.arranjo.Pilha.<init>()V
   * Goal 11. [METHOD] cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V
   * Goal 12. [METHODNOEX] cap3.arranjo.Pilha.<init>()V
   * Goal 13. Weak Mutation 0: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 0
   * Goal 14. Weak Mutation 1: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1
   * Goal 15. Weak Mutation 2: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> -1
   * Goal 16. Weak Mutation 3: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 999
   * Goal 17. Weak Mutation 4: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1001
   * Goal 18. Weak Mutation 5: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 6: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 7: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 8: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - InsertUnaryOp -1
   * Goal 22. Weak Mutation 9: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:10 - ReplaceComparisonOperator != -> -1
   * Goal 23. Weak Mutation 12: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:11 - ReplaceConstant - Erro: A pilha esta cheia -> 
   * Goal 24. Weak Mutation 13: cap3.arranjo.Pilha.empilha(Ljava/lang/Object;)V:11 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      Object[] objectArray0 = new Object[0];
      pilha0.item = objectArray0;
      try { 
        pilha0.empilha("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Erro: A pilha esta cheia
         //
    	  assertTrue(true);//assertThrownBy("cap3.arranjo.Pilha", e);
      }
  }

  //Test case number: 9
  /*
   * 21 covered goals:
   * Goal 1. cap3.arranjo.Pilha.<init>()V: root-Branch
   * Goal 2. cap3.arranjo.Pilha.tamanho()I: root-Branch
   * Goal 3. Branch cap3.arranjo.Pilha.tamanho()I: root-Branch in context: cap3.arranjo.Pilha:tamanho()I
   * Goal 4. Branch cap3.arranjo.Pilha.<init>()V: root-Branch in context: cap3.arranjo.Pilha:<init>()V
   * Goal 5. [Output]: cap3.arranjo.Pilha.tamanho()I:Zero
   * Goal 6. cap3.arranjo.Pilha.<init>()V: Line 7
   * Goal 7. cap3.arranjo.Pilha.<init>()V: Line 8
   * Goal 8. cap3.arranjo.Pilha.tamanho()I: Line 23
   * Goal 9. [METHOD] cap3.arranjo.Pilha.<init>()V
   * Goal 10. [METHOD] cap3.arranjo.Pilha.tamanho()I
   * Goal 11. [METHODNOEX] cap3.arranjo.Pilha.<init>()V
   * Goal 12. [METHODNOEX] cap3.arranjo.Pilha.tamanho()I
   * Goal 13. Weak Mutation 0: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 0
   * Goal 14. Weak Mutation 1: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1
   * Goal 15. Weak Mutation 2: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> -1
   * Goal 16. Weak Mutation 3: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 999
   * Goal 17. Weak Mutation 4: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 1000 -> 1001
   * Goal 18. Weak Mutation 5: cap3.arranjo.Pilha.<init>()V:7 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 41: cap3.arranjo.Pilha.tamanho()I:23 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 42: cap3.arranjo.Pilha.tamanho()I:23 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 43: cap3.arranjo.Pilha.tamanho()I:23 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Pilha pilha0 = new Pilha();
      int int0 = pilha0.tamanho();
      assertEquals(0, int0);
  }
}
