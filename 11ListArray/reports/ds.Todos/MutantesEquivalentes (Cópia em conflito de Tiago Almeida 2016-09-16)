8.2 Equivalente. Por padrão, a variável seria inicializada com 0. portanto a alteração não faz diferença.

Código mutado: this.ultimo = this.primeiro;

8.3 Equivalente. Como, por padrão, a variável seria inicializada com 0 e como 0 é o valor atribuido a
this.primeiro, não haverá nenhuma alteração no resultado.

Código mutado: this.primeiro = 0;

12.1 Equivalente (Dúvida). Se >= for substituído por >, o programa tentará colocar o elemento em uma posição
inexistente quando tentar armazenar em item[1000]. Isso vai retornar uma exceção diferente da especificada na
condicional, mas o elemento não será armazenado na lista. 

Código mutado: if (this.ultimo > this.item.length)

12.3 Equivalente (Dǘvida). Se o programa nunca passar pela condicional, o código tentará colocar elementos quando
a fila já estiver cheio e gerará uma exceção diferente da especificada na condicional, mas o elemento não será arma-
zenado na lista.

Código mutado: if (false)

13.1 Equivalente. O programa funcionará corretamente. A única diferença é que não haverá aviso algum quando o
código não armazenar o elemento na lista por ela estar cheia.

Código mutado: o Thrown Exception foi removido

20.4 Equivalente. O for será executado até que tente acessar um local inválido da lista e ocorra uma exceção.
Apesar disso, o resultado do imprime estará correto.

Código mutado: for (int aux = this.primeiro; false; aux++)

21.1 Equivalente (dúvida). O teste percebe que imprime retorna Null. Portanto, como o resultado não é tomado como
o que será escrito na tela, a remoção do ToString() não causará erro no teste. A diferença será vista apenas pra quem
está lendo o resultado do programa. O teste ainda receberá o resultado null.

Código mutado: System.out.println (this.item[aux]);

21.2 Equivalente (dúvida). O caso é muito semelhante a 21.1. A remoção do comanto println não afeta o teste, já que o
resultado importante para ele é o return, que no caso, continuará sendo null.

Código mutado: O trecho System.out.println(this.item[aux]); foi removido
