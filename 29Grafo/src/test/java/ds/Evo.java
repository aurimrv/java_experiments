/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 03 21:25:22 GMT 2016
 */

package ds;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Test;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Evo {

  //Test case number: 0
  /*
   * 38 covered goals:
   * Goal 1. cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z: root-Branch
   * Goal 2. cap7.listaadj.autoreferencia.Grafo.<init>(I)V: I32 Branch 2 IF_ICMPLT L25 - true
   * Goal 3. cap7.listaadj.autoreferencia.Grafo.<init>(I)V: I32 Branch 2 IF_ICMPLT L25 - false
   * Goal 4. Branch cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z: root-Branch in context: cap7.listaadj.autoreferencia.Grafo:listaAdjVazia(I)Z
   * Goal 5. Branch cap7.listaadj.autoreferencia.Grafo.<init>(I)V: I32 Branch 2 IF_ICMPLT L25 - false in context: cap7.listaadj.autoreferencia.Grafo:<init>(I)V
   * Goal 6. Branch cap7.listaadj.autoreferencia.Grafo.<init>(I)V: I32 Branch 2 IF_ICMPLT L25 - true in context: cap7.listaadj.autoreferencia.Grafo:<init>(I)V
   * Goal 7. listaAdjVazia(I)Z_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 8. cap7.listaadj.autoreferencia.Grafo.<init>(I)V: Line 24
   * Goal 9. cap7.listaadj.autoreferencia.Grafo.<init>(I)V: Line 25
   * Goal 10. cap7.listaadj.autoreferencia.Grafo.<init>(I)V: Line 26
   * Goal 11. cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z: Line 36
   * Goal 12. [METHOD] cap7.listaadj.autoreferencia.Grafo.<init>(I)V
   * Goal 13. [METHOD] cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z
   * Goal 14. [METHODNOEX] cap7.listaadj.autoreferencia.Grafo.<init>(I)V
   * Goal 15. Weak Mutation 50: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp Negation of numVertices
   * Goal 16. Weak Mutation 51: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp IINC 1 numVertices
   * Goal 17. Weak Mutation 52: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp IINC -1 numVertices
   * Goal 18. Weak Mutation 53: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp Negation of numVertices
   * Goal 19. Weak Mutation 54: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp IINC 1 numVertices
   * Goal 20. Weak Mutation 55: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp IINC -1 numVertices
   * Goal 21. Weak Mutation 56: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 57: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceVariable i -> numVertices
   * Goal 23. Weak Mutation 58: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp Negation of i
   * Goal 24. Weak Mutation 59: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp IINC 1 i
   * Goal 25. Weak Mutation 60: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp IINC -1 i
   * Goal 26. Weak Mutation 61: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceVariable i -> numVertices
   * Goal 27. Weak Mutation 62: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceVariable i -> numVertices
   * Goal 28. Weak Mutation 63: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp Negation of i
   * Goal 29. Weak Mutation 64: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp IINC 1 i
   * Goal 30. Weak Mutation 65: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp IINC -1 i
   * Goal 31. Weak Mutation 66: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp Negation
   * Goal 32. Weak Mutation 67: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp +1
   * Goal 33. Weak Mutation 68: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp -1
   * Goal 34. Weak Mutation 70: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceComparisonOperator < -> -2
   * Goal 35. Weak Mutation 71: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceComparisonOperator < -> <=
   * Goal 36. Weak Mutation 99: cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z:36 - InsertUnaryOp Negation of v
   * Goal 37. Weak Mutation 100: cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z:36 - InsertUnaryOp IINC 1 v
   * Goal 38. Weak Mutation 101: cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z:36 - InsertUnaryOp IINC -1 v
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Grafo grafo0 = new Grafo(1809);
      // Undeclared exception!
      try { 
        grafo0.listaAdjVazia(4669);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4669
         //
    	  assertTrue(true);//assertThrownBy("cap7.listaadj.autoreferencia.Grafo", e);
      }
  }

  //Test case number: 1
  /*
   * 25 covered goals:
   * Goal 1. cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V: root-Branch
   * Goal 2. cap7.listaadj.autoreferencia.Grafo$Aresta.peso()I: root-Branch
   * Goal 3. Branch cap7.listaadj.autoreferencia.Grafo$Aresta.peso()I: root-Branch in context: cap7.listaadj.autoreferencia.Grafo$Aresta:peso()I
   * Goal 4. Branch cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V: root-Branch in context: cap7.listaadj.autoreferencia.Grafo$Aresta:<init>(III)V
   * Goal 5. cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V: Line 7
   * Goal 6. cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V: Line 8
   * Goal 7. cap7.listaadj.autoreferencia.Grafo$Aresta.peso()I: Line 9
   * Goal 8. Weak Mutation 26: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - ReplaceVariable v1 -> v2
   * Goal 9. Weak Mutation 27: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - ReplaceVariable v1 -> peso
   * Goal 10. Weak Mutation 28: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - InsertUnaryOp Negation of v1
   * Goal 11. Weak Mutation 29: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - InsertUnaryOp IINC 1 v1
   * Goal 12. Weak Mutation 30: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - InsertUnaryOp IINC -1 v1
   * Goal 13. Weak Mutation 31: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - ReplaceVariable v2 -> peso
   * Goal 14. Weak Mutation 32: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - ReplaceVariable v2 -> v1
   * Goal 15. Weak Mutation 33: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - InsertUnaryOp Negation of v2
   * Goal 16. Weak Mutation 34: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - InsertUnaryOp IINC 1 v2
   * Goal 17. Weak Mutation 35: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - InsertUnaryOp IINC -1 v2
   * Goal 18. Weak Mutation 36: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - ReplaceVariable peso -> v2
   * Goal 19. Weak Mutation 37: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - ReplaceVariable peso -> v1
   * Goal 20. Weak Mutation 38: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - InsertUnaryOp Negation of peso
   * Goal 21. Weak Mutation 39: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - InsertUnaryOp IINC 1 peso
   * Goal 22. Weak Mutation 40: cap7.listaadj.autoreferencia.Grafo$Aresta.<init>(III)V:7 - InsertUnaryOp IINC -1 peso
   * Goal 23. Weak Mutation 41: cap7.listaadj.autoreferencia.Grafo$Aresta.peso()I:9 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 42: cap7.listaadj.autoreferencia.Grafo$Aresta.peso()I:9 - InsertUnaryOp +1
   * Goal 25. Weak Mutation 43: cap7.listaadj.autoreferencia.Grafo$Aresta.peso()I:9 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Grafo.Aresta grafo_Aresta0 = new Grafo.Aresta(0, (-340), 1809);
      int int0 = grafo_Aresta0.peso();
      assertEquals(0, grafo_Aresta0.v1());
      assertEquals(-340, grafo_Aresta0.v2());
      assertEquals(1809, int0);
  }

  //Test case number: 2
  /*
   * 39 covered goals:
   * Goal 1. cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z: root-Branch
   * Goal 2. cap7.listaadj.autoreferencia.Grafo.<init>(I)V: I32 Branch 2 IF_ICMPLT L25 - true
   * Goal 3. cap7.listaadj.autoreferencia.Grafo.<init>(I)V: I32 Branch 2 IF_ICMPLT L25 - false
   * Goal 4. Branch cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z: root-Branch in context: cap7.listaadj.autoreferencia.Grafo:listaAdjVazia(I)Z
   * Goal 5. Branch cap7.listaadj.autoreferencia.Grafo.<init>(I)V: I32 Branch 2 IF_ICMPLT L25 - false in context: cap7.listaadj.autoreferencia.Grafo:<init>(I)V
   * Goal 6. Branch cap7.listaadj.autoreferencia.Grafo.<init>(I)V: I32 Branch 2 IF_ICMPLT L25 - true in context: cap7.listaadj.autoreferencia.Grafo:<init>(I)V
   * Goal 7. [Output]: cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z:True
   * Goal 8. cap7.listaadj.autoreferencia.Grafo.<init>(I)V: Line 24
   * Goal 9. cap7.listaadj.autoreferencia.Grafo.<init>(I)V: Line 25
   * Goal 10. cap7.listaadj.autoreferencia.Grafo.<init>(I)V: Line 26
   * Goal 11. cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z: Line 36
   * Goal 12. [METHOD] cap7.listaadj.autoreferencia.Grafo.<init>(I)V
   * Goal 13. [METHOD] cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z
   * Goal 14. [METHODNOEX] cap7.listaadj.autoreferencia.Grafo.<init>(I)V
   * Goal 15. [METHODNOEX] cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z
   * Goal 16. Weak Mutation 50: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp Negation of numVertices
   * Goal 17. Weak Mutation 51: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp IINC 1 numVertices
   * Goal 18. Weak Mutation 52: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp IINC -1 numVertices
   * Goal 19. Weak Mutation 53: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp Negation of numVertices
   * Goal 20. Weak Mutation 54: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp IINC 1 numVertices
   * Goal 21. Weak Mutation 55: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:24 - InsertUnaryOp IINC -1 numVertices
   * Goal 22. Weak Mutation 56: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceConstant - 0 -> 1
   * Goal 23. Weak Mutation 57: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceVariable i -> numVertices
   * Goal 24. Weak Mutation 58: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp Negation of i
   * Goal 25. Weak Mutation 59: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp IINC 1 i
   * Goal 26. Weak Mutation 60: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp IINC -1 i
   * Goal 27. Weak Mutation 61: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceVariable i -> numVertices
   * Goal 28. Weak Mutation 62: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceVariable i -> numVertices
   * Goal 29. Weak Mutation 63: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp Negation of i
   * Goal 30. Weak Mutation 64: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp IINC 1 i
   * Goal 31. Weak Mutation 65: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp IINC -1 i
   * Goal 32. Weak Mutation 66: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp Negation
   * Goal 33. Weak Mutation 67: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp +1
   * Goal 34. Weak Mutation 68: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - InsertUnaryOp -1
   * Goal 35. Weak Mutation 70: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceComparisonOperator < -> -2
   * Goal 36. Weak Mutation 71: cap7.listaadj.autoreferencia.Grafo.<init>(I)V:25 - ReplaceComparisonOperator < -> <=
   * Goal 37. Weak Mutation 99: cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z:36 - InsertUnaryOp Negation of v
   * Goal 38. Weak Mutation 100: cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z:36 - InsertUnaryOp IINC 1 v
   * Goal 39. Weak Mutation 101: cap7.listaadj.autoreferencia.Grafo.listaAdjVazia(I)Z:36 - InsertUnaryOp IINC -1 v
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Grafo grafo0 = new Grafo(1809);
      grafo0.listaAdjVazia(1554);
      assertEquals(1809, grafo0.numVertices());
  }
}
