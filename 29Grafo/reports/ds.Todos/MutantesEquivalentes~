32.1 Não equivalente. item será inicializado com o valor padrão java ao invés do resultado de new Celula().

Código mutado: removida a chamada a new Celula()

32.2 Não equivalente. new Celula() está recebendo 1 como parâmetro, no lugar de 0.

Código mutado: Celula item = new Celula (v2, 1);

33.1 (Dúvida)

33.2 (Dúvida)

33.3 (Dúvida)

33.4 Não equivalente. Com a condicional negada, o programa retornará o oposto ao correto para todas as
entradas.

Código mutado: return (this.adj[v1].pesquisa (item) == null);

33.5 (Dúvida)

33.6 Não equivalente. O código sempre retornará false, mesmo quando deveria retornar true.

Código mutado: return (false);

33.7 Não equivalente. O código sempre retornará true, mesmo quando deveria retornar false.

Código mutado: return (true);

33.8 (Dúvida)

47.1 Não equivalente. item será inicializado com o valor padrão java ao invés do retorno de this.adj[v].proximo().

Código mutado: removida a chamada a this.adj[v].proximo()

45.1 Não equivalente.  O código irá retornar null tanto para true quanto para false.

Código mutado: removida a chamada a new Aresta()

48.3 Não equivalente. O código irá retornar false mesmo quando deveria chamar new Aresta().

Código mutado: return false ? new Aresta (v, item.vertice, item.peso) : null;

51.1 Não equivalente. chave será inicializado com o valor padrão java ao invés de new Celula().

Código mutado: removida a chamada a new Celula().

51.2 Não equivalente. new Celula() está recebendo 1 como parâmetro, no código original deve receber 0.

Código mutado: Celula chave = new Celula (v2, 1);

52.1 (Dúvida)

52.2 Não equivalente. item está recebendo o valor padrão java ao invés do retorno de this.adj[v1].retira (chave).

Código mutado: removida a chamada a this.adj[v1].retira (chave);

53.1 Não equilvante. O código retornará null tanto para true quando para false.

Código mutado: removida a chamada a new Aresta()

53.2 Não equivalente. O código retornará o valor oposto ao correto para todas as entradas.

Código mutado: return item == null ? new Aresta (v1, v2, item.peso) : null;

53.3 Não equivalente. Será retornado sempre null, mesmo quando deveria chamar new Aresta().

Código mutado: return false ? new Aresta (v1, v2, item.peso) : null;

53.4 Não equivalente. Será chamada sempre new Aresta, mesmo quando deveria ser retornado null.

Código mutado: return true ? new Aresta (v1, v2, item.peso) : null;

53.3 (Dúvida)

56.3 Não equivalente. O laço pulará a primeira iteração, referente a 	this.adj[0].primeiro ().

Código mutado: for (int i = 1; i < this.numVertices; i++) {

56.5 Não equivalente. O laço não fará o número total de iterações.

Código mutado: for (int i = 0; false; i++) {

57.6 (Dúvida)

57.7 Não equivalente. O método não irá imprimir a mensagem projetada com código original.

Código mutado: removido o println desta linha.

58.1 Não equivalente. item receberá o valor padrão java, e não o retorno de this.adj[i].primeiro ().

Código mutado: removida a chamada a this.adj[i].primeiro ();

59.2 Não equivalente. O código nunca entrará no bloco while se houve false em sua condicional.

Código mutado: while (false) {

60.7 (Dúvida)

60.8 Não equivalente. O código não irá imprimir a mensagem projetada no programa original.

Código mutado: removido o println desta linha.

61.1 Não equivalente. item receberá o valor padrão java ao invés do resultado de this.adj[i].proximo ().

Código mutado: removida a chamada a this.adj[i].proximo ()

69.2 (Dúvida)

69.4 Não equivalente. O código irá assumir que a lista nunca está vazia, mesmo podendo estar.

Código mutado: if (true) {

72.2 (Dúvida)

72.3 (Dúvida)

73.1 Não equivalente. adj receberá o valor padrão java no lugar de this.proxAdj(v).

Código mutado: removida a chamada a this.proxAdj(v)


