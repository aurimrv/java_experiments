/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 03 18:46:15 GMT 2016
 */

package ds;

import org.junit.Test;
import static org.junit.Assert.*;

//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import ds.MaxMin1;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Evo {

  //Test case number: 0
  /*
   * 84 covered goals:
   * Goal 1. cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - true
   * Goal 2. cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - false
   * Goal 3. cap1.MaxMin1.maxMin1([II)[I: I23 Branch 1 IF_ICMPLE L6 - false
   * Goal 4. cap1.MaxMin1.maxMin1([II)[I: I34 Branch 2 IF_ICMPGE L7 - true
   * Goal 5. Branch cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - true in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 6. Branch cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - false in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 7. Branch cap1.MaxMin1.maxMin1([II)[I: I23 Branch 1 IF_ICMPLE L6 - false in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 8. Branch cap1.MaxMin1.maxMin1([II)[I: I34 Branch 2 IF_ICMPGE L7 - true in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 9. [Output]: cap1.MaxMin1.maxMin1([II)[I:NonEmptyArray
   * Goal 10. cap1.MaxMin1.maxMin1([II)[I: Line 4
   * Goal 11. cap1.MaxMin1.maxMin1([II)[I: Line 5
   * Goal 12. cap1.MaxMin1.maxMin1([II)[I: Line 6
   * Goal 13. cap1.MaxMin1.maxMin1([II)[I: Line 7
   * Goal 14. cap1.MaxMin1.maxMin1([II)[I: Line 9
   * Goal 15. cap1.MaxMin1.maxMin1([II)[I: Line 10
   * Goal 16. cap1.MaxMin1.maxMin1([II)[I: Line 11
   * Goal 17. [METHOD] cap1.MaxMin1.maxMin1([II)[I
   * Goal 18. [METHODNOEX] cap1.MaxMin1.maxMin1([II)[I
   * Goal 19. Weak Mutation 0: cap1.MaxMin1.maxMin1([II)[I:4 - ReplaceConstant - 0 -> 1
   * Goal 20. Weak Mutation 1: cap1.MaxMin1.maxMin1([II)[I:4 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 2: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceConstant - 1 -> 0
   * Goal 22. Weak Mutation 45: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> min
   * Goal 23. Weak Mutation 46: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> max
   * Goal 24. Weak Mutation 47: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> n
   * Goal 25. Weak Mutation 48: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> min
   * Goal 26. Weak Mutation 49: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> max
   * Goal 27. Weak Mutation 50: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> n
   * Goal 28. Weak Mutation 51: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp Negation of i
   * Goal 29. Weak Mutation 52: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC 1 i
   * Goal 30. Weak Mutation 53: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC -1 i
   * Goal 31. Weak Mutation 54: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> i
   * Goal 32. Weak Mutation 55: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> min
   * Goal 33. Weak Mutation 56: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> max
   * Goal 34. Weak Mutation 57: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 35. Weak Mutation 58: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 36. Weak Mutation 59: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 37. Weak Mutation 61: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceComparisonOperator < -> -2
   * Goal 38. Weak Mutation 62: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceComparisonOperator < -> <=
   * Goal 39. Weak Mutation 3: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> min
   * Goal 40. Weak Mutation 4: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> max
   * Goal 41. Weak Mutation 5: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> n
   * Goal 42. Weak Mutation 6: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp Negation of i
   * Goal 43. Weak Mutation 7: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC 1 i
   * Goal 44. Weak Mutation 8: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC -1 i
   * Goal 45. Weak Mutation 9: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable max -> i
   * Goal 46. Weak Mutation 11: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable max -> n
   * Goal 47. Weak Mutation 12: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp Negation of max
   * Goal 48. Weak Mutation 13: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC 1 max
   * Goal 49. Weak Mutation 14: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC -1 max
   * Goal 50. Weak Mutation 15: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceComparisonOperator <= -> -1
   * Goal 51. Weak Mutation 18: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> min
   * Goal 52. Weak Mutation 19: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> max
   * Goal 53. Weak Mutation 20: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> n
   * Goal 54. Weak Mutation 21: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp Negation of i
   * Goal 55. Weak Mutation 22: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC 1 i
   * Goal 56. Weak Mutation 23: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC -1 i
   * Goal 57. Weak Mutation 24: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> min
   * Goal 58. Weak Mutation 25: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> max
   * Goal 59. Weak Mutation 26: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> n
   * Goal 60. Weak Mutation 27: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp Negation of i
   * Goal 61. Weak Mutation 28: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC 1 i
   * Goal 62. Weak Mutation 29: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC -1 i
   * Goal 63. Weak Mutation 30: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable min -> i
   * Goal 64. Weak Mutation 31: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable min -> max
   * Goal 65. Weak Mutation 32: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable min -> n
   * Goal 66. Weak Mutation 33: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp Negation of min
   * Goal 67. Weak Mutation 34: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC 1 min
   * Goal 68. Weak Mutation 35: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC -1 min
   * Goal 69. Weak Mutation 38: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceComparisonOperator >= -> ==
   * Goal 70. Weak Mutation 63: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 71. Weak Mutation 64: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 72. Weak Mutation 65: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 73. Weak Mutation 66: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> 3
   * Goal 74. Weak Mutation 67: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable maxMin -> v
   * Goal 75. Weak Mutation 68: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceConstant - 0 -> 1
   * Goal 76. Weak Mutation 69: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable max -> n
   * Goal 77. Weak Mutation 70: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable max -> min
   * Goal 78. Weak Mutation 71: cap1.MaxMin1.maxMin1([II)[I:10 - InsertUnaryOp Negation of max
   * Goal 79. Weak Mutation 72: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable maxMin -> v
   * Goal 80. Weak Mutation 73: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceConstant - 1 -> 0
   * Goal 81. Weak Mutation 74: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable min -> max
   * Goal 82. Weak Mutation 75: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable min -> n
   * Goal 83. Weak Mutation 76: cap1.MaxMin1.maxMin1([II)[I:10 - InsertUnaryOp Negation of min
   * Goal 84. Weak Mutation 77: cap1.MaxMin1.maxMin1([II)[I:11 - ReplaceVariable maxMin -> v
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1242);
      int[] intArray1 = MaxMin1.maxMin1(intArray0, 2);
      assertArrayEquals(new int[] {0, (-1242)}, intArray1);
      assertArrayEquals(new int[] {(-1242), 0, 0}, intArray0);
  }

  //Test case number: 1
  /*
   * 75 covered goals:
   * Goal 1. cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - true
   * Goal 2. cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - false
   * Goal 3. cap1.MaxMin1.maxMin1([II)[I: I23 Branch 1 IF_ICMPLE L6 - true
   * Goal 4. cap1.MaxMin1.maxMin1([II)[I: I34 Branch 2 IF_ICMPGE L7 - true
   * Goal 5. Branch cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - true in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 6. Branch cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - false in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 7. Branch cap1.MaxMin1.maxMin1([II)[I: I23 Branch 1 IF_ICMPLE L6 - true in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 8. Branch cap1.MaxMin1.maxMin1([II)[I: I34 Branch 2 IF_ICMPGE L7 - true in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 9. [Output]: cap1.MaxMin1.maxMin1([II)[I:NonEmptyArray
   * Goal 10. cap1.MaxMin1.maxMin1([II)[I: Line 4
   * Goal 11. cap1.MaxMin1.maxMin1([II)[I: Line 5
   * Goal 12. cap1.MaxMin1.maxMin1([II)[I: Line 6
   * Goal 13. cap1.MaxMin1.maxMin1([II)[I: Line 7
   * Goal 14. cap1.MaxMin1.maxMin1([II)[I: Line 9
   * Goal 15. cap1.MaxMin1.maxMin1([II)[I: Line 10
   * Goal 16. cap1.MaxMin1.maxMin1([II)[I: Line 11
   * Goal 17. [METHOD] cap1.MaxMin1.maxMin1([II)[I
   * Goal 18. [METHODNOEX] cap1.MaxMin1.maxMin1([II)[I
   * Goal 19. Weak Mutation 0: cap1.MaxMin1.maxMin1([II)[I:4 - ReplaceConstant - 0 -> 1
   * Goal 20. Weak Mutation 1: cap1.MaxMin1.maxMin1([II)[I:4 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 2: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceConstant - 1 -> 0
   * Goal 22. Weak Mutation 45: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> min
   * Goal 23. Weak Mutation 46: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> max
   * Goal 24. Weak Mutation 47: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> n
   * Goal 25. Weak Mutation 48: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> min
   * Goal 26. Weak Mutation 49: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> max
   * Goal 27. Weak Mutation 50: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> n
   * Goal 28. Weak Mutation 51: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp Negation of i
   * Goal 29. Weak Mutation 52: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC 1 i
   * Goal 30. Weak Mutation 53: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC -1 i
   * Goal 31. Weak Mutation 54: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> i
   * Goal 32. Weak Mutation 55: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> min
   * Goal 33. Weak Mutation 56: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> max
   * Goal 34. Weak Mutation 57: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 35. Weak Mutation 58: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 36. Weak Mutation 59: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 37. Weak Mutation 61: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceComparisonOperator < -> -2
   * Goal 38. Weak Mutation 62: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceComparisonOperator < -> <=
   * Goal 39. Weak Mutation 3: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> min
   * Goal 40. Weak Mutation 4: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> max
   * Goal 41. Weak Mutation 5: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> n
   * Goal 42. Weak Mutation 6: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp Negation of i
   * Goal 43. Weak Mutation 7: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC 1 i
   * Goal 44. Weak Mutation 8: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC -1 i
   * Goal 45. Weak Mutation 9: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable max -> i
   * Goal 46. Weak Mutation 11: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable max -> n
   * Goal 47. Weak Mutation 12: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp Negation of max
   * Goal 48. Weak Mutation 13: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC 1 max
   * Goal 49. Weak Mutation 14: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC -1 max
   * Goal 50. Weak Mutation 16: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceComparisonOperator <= -> <
   * Goal 51. Weak Mutation 24: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> min
   * Goal 52. Weak Mutation 25: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> max
   * Goal 53. Weak Mutation 26: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> n
   * Goal 54. Weak Mutation 27: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp Negation of i
   * Goal 55. Weak Mutation 28: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC 1 i
   * Goal 56. Weak Mutation 29: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC -1 i
   * Goal 57. Weak Mutation 30: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable min -> i
   * Goal 58. Weak Mutation 32: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable min -> n
   * Goal 59. Weak Mutation 33: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp Negation of min
   * Goal 60. Weak Mutation 34: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC 1 min
   * Goal 61. Weak Mutation 35: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC -1 min
   * Goal 62. Weak Mutation 37: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceComparisonOperator >= -> >
   * Goal 63. Weak Mutation 63: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 64. Weak Mutation 64: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 65. Weak Mutation 65: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 66. Weak Mutation 66: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> 3
   * Goal 67. Weak Mutation 67: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable maxMin -> v
   * Goal 68. Weak Mutation 68: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceConstant - 0 -> 1
   * Goal 69. Weak Mutation 69: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable max -> n
   * Goal 70. Weak Mutation 71: cap1.MaxMin1.maxMin1([II)[I:10 - InsertUnaryOp Negation of max
   * Goal 71. Weak Mutation 72: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable maxMin -> v
   * Goal 72. Weak Mutation 73: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceConstant - 1 -> 0
   * Goal 73. Weak Mutation 75: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable min -> n
   * Goal 74. Weak Mutation 76: cap1.MaxMin1.maxMin1([II)[I:10 - InsertUnaryOp Negation of min
   * Goal 75. Weak Mutation 77: cap1.MaxMin1.maxMin1([II)[I:11 - ReplaceVariable maxMin -> v
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = MaxMin1.maxMin1(intArray0, 2);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  //Test case number: 2
  /*
   * 58 covered goals:
   * Goal 1. cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - true
   * Goal 2. cap1.MaxMin1.maxMin1([II)[I: I23 Branch 1 IF_ICMPLE L6 - true
   * Goal 3. cap1.MaxMin1.maxMin1([II)[I: I34 Branch 2 IF_ICMPGE L7 - false
   * Goal 4. Branch cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - true in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 5. Branch cap1.MaxMin1.maxMin1([II)[I: I23 Branch 1 IF_ICMPLE L6 - true in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 6. Branch cap1.MaxMin1.maxMin1([II)[I: I34 Branch 2 IF_ICMPGE L7 - false in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 7. maxMin1([II)[I_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 8. cap1.MaxMin1.maxMin1([II)[I: Line 4
   * Goal 9. cap1.MaxMin1.maxMin1([II)[I: Line 5
   * Goal 10. cap1.MaxMin1.maxMin1([II)[I: Line 6
   * Goal 11. cap1.MaxMin1.maxMin1([II)[I: Line 7
   * Goal 12. [METHOD] cap1.MaxMin1.maxMin1([II)[I
   * Goal 13. Weak Mutation 0: cap1.MaxMin1.maxMin1([II)[I:4 - ReplaceConstant - 0 -> 1
   * Goal 14. Weak Mutation 1: cap1.MaxMin1.maxMin1([II)[I:4 - ReplaceConstant - 0 -> 1
   * Goal 15. Weak Mutation 2: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceConstant - 1 -> 0
   * Goal 16. Weak Mutation 45: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> min
   * Goal 17. Weak Mutation 46: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> max
   * Goal 18. Weak Mutation 47: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> n
   * Goal 19. Weak Mutation 48: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> min
   * Goal 20. Weak Mutation 49: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> max
   * Goal 21. Weak Mutation 50: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> n
   * Goal 22. Weak Mutation 51: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp Negation of i
   * Goal 23. Weak Mutation 52: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC 1 i
   * Goal 24. Weak Mutation 53: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC -1 i
   * Goal 25. Weak Mutation 54: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> i
   * Goal 26. Weak Mutation 55: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> min
   * Goal 27. Weak Mutation 57: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 28. Weak Mutation 58: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 29. Weak Mutation 59: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 30. Weak Mutation 61: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceComparisonOperator < -> -2
   * Goal 31. Weak Mutation 3: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> min
   * Goal 32. Weak Mutation 4: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> max
   * Goal 33. Weak Mutation 5: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> n
   * Goal 34. Weak Mutation 6: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp Negation of i
   * Goal 35. Weak Mutation 7: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC 1 i
   * Goal 36. Weak Mutation 8: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC -1 i
   * Goal 37. Weak Mutation 9: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable max -> i
   * Goal 38. Weak Mutation 12: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp Negation of max
   * Goal 39. Weak Mutation 13: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC 1 max
   * Goal 40. Weak Mutation 14: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC -1 max
   * Goal 41. Weak Mutation 17: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceComparisonOperator <= -> ==
   * Goal 42. Weak Mutation 24: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> min
   * Goal 43. Weak Mutation 25: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> max
   * Goal 44. Weak Mutation 26: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> n
   * Goal 45. Weak Mutation 27: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp Negation of i
   * Goal 46. Weak Mutation 28: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC 1 i
   * Goal 47. Weak Mutation 29: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC -1 i
   * Goal 48. Weak Mutation 30: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable min -> i
   * Goal 49. Weak Mutation 33: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp Negation of min
   * Goal 50. Weak Mutation 34: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC 1 min
   * Goal 51. Weak Mutation 35: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC -1 min
   * Goal 52. Weak Mutation 36: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceComparisonOperator >= -> -1
   * Goal 53. Weak Mutation 39: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> min
   * Goal 54. Weak Mutation 40: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> max
   * Goal 55. Weak Mutation 41: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> n
   * Goal 56. Weak Mutation 42: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp Negation of i
   * Goal 57. Weak Mutation 43: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC 1 i
   * Goal 58. Weak Mutation 44: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC -1 i
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 205;
      // Undeclared exception!
      try { 
        MaxMin1.maxMin1(intArray0, 205);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 66 covered goals:
   * Goal 1. cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - true
   * Goal 2. cap1.MaxMin1.maxMin1([II)[I: I23 Branch 1 IF_ICMPLE L6 - true
   * Goal 3. cap1.MaxMin1.maxMin1([II)[I: I23 Branch 1 IF_ICMPLE L6 - false
   * Goal 4. cap1.MaxMin1.maxMin1([II)[I: I34 Branch 2 IF_ICMPGE L7 - true
   * Goal 5. Branch cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - true in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 6. Branch cap1.MaxMin1.maxMin1([II)[I: I23 Branch 1 IF_ICMPLE L6 - false in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 7. Branch cap1.MaxMin1.maxMin1([II)[I: I23 Branch 1 IF_ICMPLE L6 - true in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 8. Branch cap1.MaxMin1.maxMin1([II)[I: I34 Branch 2 IF_ICMPGE L7 - true in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 9. maxMin1([II)[I_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 10. cap1.MaxMin1.maxMin1([II)[I: Line 4
   * Goal 11. cap1.MaxMin1.maxMin1([II)[I: Line 5
   * Goal 12. cap1.MaxMin1.maxMin1([II)[I: Line 6
   * Goal 13. cap1.MaxMin1.maxMin1([II)[I: Line 7
   * Goal 14. [METHOD] cap1.MaxMin1.maxMin1([II)[I
   * Goal 15. Weak Mutation 0: cap1.MaxMin1.maxMin1([II)[I:4 - ReplaceConstant - 0 -> 1
   * Goal 16. Weak Mutation 1: cap1.MaxMin1.maxMin1([II)[I:4 - ReplaceConstant - 0 -> 1
   * Goal 17. Weak Mutation 2: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceConstant - 1 -> 0
   * Goal 18. Weak Mutation 45: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> min
   * Goal 19. Weak Mutation 46: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> max
   * Goal 20. Weak Mutation 47: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> n
   * Goal 21. Weak Mutation 48: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> min
   * Goal 22. Weak Mutation 49: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> max
   * Goal 23. Weak Mutation 50: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> n
   * Goal 24. Weak Mutation 51: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp Negation of i
   * Goal 25. Weak Mutation 52: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC 1 i
   * Goal 26. Weak Mutation 53: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC -1 i
   * Goal 27. Weak Mutation 54: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> i
   * Goal 28. Weak Mutation 55: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> min
   * Goal 29. Weak Mutation 56: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> max
   * Goal 30. Weak Mutation 57: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 31. Weak Mutation 58: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 32. Weak Mutation 59: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 33. Weak Mutation 61: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceComparisonOperator < -> -2
   * Goal 34. Weak Mutation 3: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> min
   * Goal 35. Weak Mutation 4: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> max
   * Goal 36. Weak Mutation 5: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> n
   * Goal 37. Weak Mutation 6: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp Negation of i
   * Goal 38. Weak Mutation 7: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC 1 i
   * Goal 39. Weak Mutation 8: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC -1 i
   * Goal 40. Weak Mutation 9: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable max -> i
   * Goal 41. Weak Mutation 10: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable max -> min
   * Goal 42. Weak Mutation 11: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable max -> n
   * Goal 43. Weak Mutation 12: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp Negation of max
   * Goal 44. Weak Mutation 13: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC 1 max
   * Goal 45. Weak Mutation 14: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC -1 max
   * Goal 46. Weak Mutation 15: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceComparisonOperator <= -> -1
   * Goal 47. Weak Mutation 16: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceComparisonOperator <= -> <
   * Goal 48. Weak Mutation 18: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> min
   * Goal 49. Weak Mutation 19: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> max
   * Goal 50. Weak Mutation 20: cap1.MaxMin1.maxMin1([II)[I:6 - ReplaceVariable i -> n
   * Goal 51. Weak Mutation 21: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp Negation of i
   * Goal 52. Weak Mutation 22: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC 1 i
   * Goal 53. Weak Mutation 23: cap1.MaxMin1.maxMin1([II)[I:6 - InsertUnaryOp IINC -1 i
   * Goal 54. Weak Mutation 24: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> min
   * Goal 55. Weak Mutation 25: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> max
   * Goal 56. Weak Mutation 26: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable i -> n
   * Goal 57. Weak Mutation 27: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp Negation of i
   * Goal 58. Weak Mutation 28: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC 1 i
   * Goal 59. Weak Mutation 29: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC -1 i
   * Goal 60. Weak Mutation 30: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable min -> i
   * Goal 61. Weak Mutation 31: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable min -> max
   * Goal 62. Weak Mutation 32: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceVariable min -> n
   * Goal 63. Weak Mutation 33: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp Negation of min
   * Goal 64. Weak Mutation 34: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC 1 min
   * Goal 65. Weak Mutation 35: cap1.MaxMin1.maxMin1([II)[I:7 - InsertUnaryOp IINC -1 min
   * Goal 66. Weak Mutation 38: cap1.MaxMin1.maxMin1([II)[I:7 - ReplaceComparisonOperator >= -> ==
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1061);
      // Undeclared exception!
      try { 
        MaxMin1.maxMin1(intArray0, 2713);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 39 covered goals:
   * Goal 1. cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - false
   * Goal 2. Branch cap1.MaxMin1.maxMin1([II)[I: I45 Branch 3 IF_ICMPLT L5 - false in context: cap1.MaxMin1:maxMin1([II)[I
   * Goal 3. [Output]: cap1.MaxMin1.maxMin1([II)[I:NonEmptyArray
   * Goal 4. cap1.MaxMin1.maxMin1([II)[I: Line 4
   * Goal 5. cap1.MaxMin1.maxMin1([II)[I: Line 5
   * Goal 6. cap1.MaxMin1.maxMin1([II)[I: Line 9
   * Goal 7. cap1.MaxMin1.maxMin1([II)[I: Line 10
   * Goal 8. cap1.MaxMin1.maxMin1([II)[I: Line 11
   * Goal 9. [METHOD] cap1.MaxMin1.maxMin1([II)[I
   * Goal 10. [METHODNOEX] cap1.MaxMin1.maxMin1([II)[I
   * Goal 11. Weak Mutation 0: cap1.MaxMin1.maxMin1([II)[I:4 - ReplaceConstant - 0 -> 1
   * Goal 12. Weak Mutation 1: cap1.MaxMin1.maxMin1([II)[I:4 - ReplaceConstant - 0 -> 1
   * Goal 13. Weak Mutation 2: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceConstant - 1 -> 0
   * Goal 14. Weak Mutation 48: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> min
   * Goal 15. Weak Mutation 49: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> max
   * Goal 16. Weak Mutation 50: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable i -> n
   * Goal 17. Weak Mutation 51: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp Negation of i
   * Goal 18. Weak Mutation 52: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC 1 i
   * Goal 19. Weak Mutation 53: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC -1 i
   * Goal 20. Weak Mutation 54: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> i
   * Goal 21. Weak Mutation 55: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> min
   * Goal 22. Weak Mutation 56: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceVariable n -> max
   * Goal 23. Weak Mutation 57: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp Negation of n
   * Goal 24. Weak Mutation 58: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC 1 n
   * Goal 25. Weak Mutation 59: cap1.MaxMin1.maxMin1([II)[I:5 - InsertUnaryOp IINC -1 n
   * Goal 26. Weak Mutation 60: cap1.MaxMin1.maxMin1([II)[I:5 - ReplaceComparisonOperator < -> !=
   * Goal 27. Weak Mutation 63: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> 0
   * Goal 28. Weak Mutation 64: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> 1
   * Goal 29. Weak Mutation 65: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> -1
   * Goal 30. Weak Mutation 66: cap1.MaxMin1.maxMin1([II)[I:9 - ReplaceConstant - 2 -> 3
   * Goal 31. Weak Mutation 67: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable maxMin -> v
   * Goal 32. Weak Mutation 68: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceConstant - 0 -> 1
   * Goal 33. Weak Mutation 69: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable max -> n
   * Goal 34. Weak Mutation 71: cap1.MaxMin1.maxMin1([II)[I:10 - InsertUnaryOp Negation of max
   * Goal 35. Weak Mutation 72: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable maxMin -> v
   * Goal 36. Weak Mutation 73: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceConstant - 1 -> 0
   * Goal 37. Weak Mutation 75: cap1.MaxMin1.maxMin1([II)[I:10 - ReplaceVariable min -> n
   * Goal 38. Weak Mutation 76: cap1.MaxMin1.maxMin1([II)[I:10 - InsertUnaryOp Negation of min
   * Goal 39. Weak Mutation 77: cap1.MaxMin1.maxMin1([II)[I:11 - ReplaceVariable maxMin -> v
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = MaxMin1.maxMin1(intArray0, (-1400));
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * Goal 1. cap1.MaxMin1.<init>()V: root-Branch
   * Goal 2. Branch cap1.MaxMin1.<init>()V: root-Branch in context: cap1.MaxMin1:<init>()V
   * Goal 3. [METHOD] cap1.MaxMin1.<init>()V
   * Goal 4. [METHODNOEX] cap1.MaxMin1.<init>()V
   */

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MaxMin1 maxMin1_0 = new MaxMin1();
  }
}
