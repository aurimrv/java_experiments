/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 03 19:26:57 GMT 2016
 */

package ds;

import static org.junit.Assert.assertArrayEquals;

import org.junit.Test;

import ds.Ordenacao;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Evo {

  //Test case number: 0
  /*
   * 120 covered goals:
   * Goal 1. cap1.Ordenacao.ordena([II)V: I66 Branch 3 IF_ICMPLT L4 - true
   * Goal 2. cap1.Ordenacao.ordena([II)V: I66 Branch 3 IF_ICMPLT L4 - false
   * Goal 3. cap1.Ordenacao.ordena([II)V: I37 Branch 2 IF_ICMPLT L6 - true
   * Goal 4. cap1.Ordenacao.ordena([II)V: I37 Branch 2 IF_ICMPLT L6 - false
   * Goal 5. cap1.Ordenacao.ordena([II)V: I26 Branch 1 IF_ICMPGE L7 - true
   * Goal 6. cap1.Ordenacao.ordena([II)V: I26 Branch 1 IF_ICMPGE L7 - false
   * Goal 7. Branch cap1.Ordenacao.ordena([II)V: I66 Branch 3 IF_ICMPLT L4 - false in context: cap1.Ordenacao:ordena([II)V
   * Goal 8. Branch cap1.Ordenacao.ordena([II)V: I66 Branch 3 IF_ICMPLT L4 - true in context: cap1.Ordenacao:ordena([II)V
   * Goal 9. Branch cap1.Ordenacao.ordena([II)V: I37 Branch 2 IF_ICMPLT L6 - true in context: cap1.Ordenacao:ordena([II)V
   * Goal 10. Branch cap1.Ordenacao.ordena([II)V: I37 Branch 2 IF_ICMPLT L6 - false in context: cap1.Ordenacao:ordena([II)V
   * Goal 11. Branch cap1.Ordenacao.ordena([II)V: I26 Branch 1 IF_ICMPGE L7 - true in context: cap1.Ordenacao:ordena([II)V
   * Goal 12. Branch cap1.Ordenacao.ordena([II)V: I26 Branch 1 IF_ICMPGE L7 - false in context: cap1.Ordenacao:ordena([II)V
   * Goal 13. cap1.Ordenacao.ordena([II)V: Line 4
   * Goal 14. cap1.Ordenacao.ordena([II)V: Line 5
   * Goal 15. cap1.Ordenacao.ordena([II)V: Line 6
   * Goal 16. cap1.Ordenacao.ordena([II)V: Line 7
   * Goal 17. cap1.Ordenacao.ordena([II)V: Line 8
   * Goal 18. cap1.Ordenacao.ordena([II)V: Line 10
   * Goal 19. cap1.Ordenacao.ordena([II)V: Line 11
   * Goal 20. cap1.Ordenacao.ordena([II)V: Line 12
   * Goal 21. cap1.Ordenacao.ordena([II)V: Line 14
   * Goal 22. [METHOD] cap1.Ordenacao.ordena([II)V
   * Goal 23. [METHODNOEX] cap1.Ordenacao.ordena([II)V
   * Goal 24. Weak Mutation 0: cap1.Ordenacao.ordena([II)V:4 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 83: cap1.Ordenacao.ordena([II)V:4 - ReplaceVariable i -> n
   * Goal 26. Weak Mutation 84: cap1.Ordenacao.ordena([II)V:4 - ReplaceVariable i -> n
   * Goal 27. Weak Mutation 85: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp Negation of i
   * Goal 28. Weak Mutation 86: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC 1 i
   * Goal 29. Weak Mutation 87: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC -1 i
   * Goal 30. Weak Mutation 88: cap1.Ordenacao.ordena([II)V:4 - ReplaceVariable n -> i
   * Goal 31. Weak Mutation 89: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp Negation of n
   * Goal 32. Weak Mutation 90: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC 1 n
   * Goal 33. Weak Mutation 91: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC -1 n
   * Goal 34. Weak Mutation 92: cap1.Ordenacao.ordena([II)V:4 - ReplaceConstant - 1 -> 0
   * Goal 35. Weak Mutation 93: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> +
   * Goal 36. Weak Mutation 94: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> %
   * Goal 37. Weak Mutation 95: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> *
   * Goal 38. Weak Mutation 96: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> /
   * Goal 39. Weak Mutation 98: cap1.Ordenacao.ordena([II)V:4 - ReplaceComparisonOperator < -> -2
   * Goal 40. Weak Mutation 99: cap1.Ordenacao.ordena([II)V:4 - ReplaceComparisonOperator < -> <=
   * Goal 41. Weak Mutation 1: cap1.Ordenacao.ordena([II)V:5 - ReplaceVariable i -> n
   * Goal 42. Weak Mutation 2: cap1.Ordenacao.ordena([II)V:5 - InsertUnaryOp Negation of i
   * Goal 43. Weak Mutation 3: cap1.Ordenacao.ordena([II)V:5 - InsertUnaryOp IINC 1 i
   * Goal 44. Weak Mutation 4: cap1.Ordenacao.ordena([II)V:5 - InsertUnaryOp IINC -1 i
   * Goal 45. Weak Mutation 5: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable i -> n
   * Goal 46. Weak Mutation 7: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp Negation of i
   * Goal 47. Weak Mutation 8: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC 1 i
   * Goal 48. Weak Mutation 9: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC -1 i
   * Goal 49. Weak Mutation 10: cap1.Ordenacao.ordena([II)V:6 - ReplaceConstant - 1 -> 0
   * Goal 50. Weak Mutation 11: cap1.Ordenacao.ordena([II)V:6 - ReplaceArithmeticOperator + -> %
   * Goal 51. Weak Mutation 12: cap1.Ordenacao.ordena([II)V:6 - ReplaceArithmeticOperator + -> -
   * Goal 52. Weak Mutation 13: cap1.Ordenacao.ordena([II)V:6 - ReplaceArithmeticOperator + -> *
   * Goal 53. Weak Mutation 14: cap1.Ordenacao.ordena([II)V:6 - ReplaceArithmeticOperator + -> /
   * Goal 54. Weak Mutation 36: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> i
   * Goal 55. Weak Mutation 37: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> min
   * Goal 56. Weak Mutation 38: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> n
   * Goal 57. Weak Mutation 39: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> i
   * Goal 58. Weak Mutation 40: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> min
   * Goal 59. Weak Mutation 41: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> n
   * Goal 60. Weak Mutation 42: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp Negation of j
   * Goal 61. Weak Mutation 43: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC 1 j
   * Goal 62. Weak Mutation 44: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC -1 j
   * Goal 63. Weak Mutation 45: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable n -> i
   * Goal 64. Weak Mutation 46: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable n -> j
   * Goal 65. Weak Mutation 47: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable n -> min
   * Goal 66. Weak Mutation 48: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp Negation of n
   * Goal 67. Weak Mutation 49: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC 1 n
   * Goal 68. Weak Mutation 50: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC -1 n
   * Goal 69. Weak Mutation 52: cap1.Ordenacao.ordena([II)V:6 - ReplaceComparisonOperator < -> -2
   * Goal 70. Weak Mutation 53: cap1.Ordenacao.ordena([II)V:6 - ReplaceComparisonOperator < -> <=
   * Goal 71. Weak Mutation 15: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable j -> i
   * Goal 72. Weak Mutation 16: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable j -> min
   * Goal 73. Weak Mutation 17: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable j -> n
   * Goal 74. Weak Mutation 18: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp Negation of j
   * Goal 75. Weak Mutation 19: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp IINC 1 j
   * Goal 76. Weak Mutation 20: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp IINC -1 j
   * Goal 77. Weak Mutation 21: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable min -> i
   * Goal 78. Weak Mutation 22: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable min -> j
   * Goal 79. Weak Mutation 23: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable min -> n
   * Goal 80. Weak Mutation 24: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp Negation of min
   * Goal 81. Weak Mutation 25: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp IINC 1 min
   * Goal 82. Weak Mutation 26: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp IINC -1 min
   * Goal 83. Weak Mutation 27: cap1.Ordenacao.ordena([II)V:7 - ReplaceComparisonOperator >= -> -1
   * Goal 84. Weak Mutation 28: cap1.Ordenacao.ordena([II)V:7 - ReplaceComparisonOperator >= -> >
   * Goal 85. Weak Mutation 29: cap1.Ordenacao.ordena([II)V:7 - ReplaceComparisonOperator >= -> ==
   * Goal 86. Weak Mutation 30: cap1.Ordenacao.ordena([II)V:8 - ReplaceVariable j -> i
   * Goal 87. Weak Mutation 31: cap1.Ordenacao.ordena([II)V:8 - ReplaceVariable j -> min
   * Goal 88. Weak Mutation 32: cap1.Ordenacao.ordena([II)V:8 - ReplaceVariable j -> n
   * Goal 89. Weak Mutation 33: cap1.Ordenacao.ordena([II)V:8 - InsertUnaryOp Negation of j
   * Goal 90. Weak Mutation 34: cap1.Ordenacao.ordena([II)V:8 - InsertUnaryOp IINC 1 j
   * Goal 91. Weak Mutation 35: cap1.Ordenacao.ordena([II)V:8 - InsertUnaryOp IINC -1 j
   * Goal 92. Weak Mutation 54: cap1.Ordenacao.ordena([II)V:10 - ReplaceVariable min -> i
   * Goal 93. Weak Mutation 55: cap1.Ordenacao.ordena([II)V:10 - ReplaceVariable min -> n
   * Goal 94. Weak Mutation 56: cap1.Ordenacao.ordena([II)V:10 - InsertUnaryOp Negation of min
   * Goal 95. Weak Mutation 57: cap1.Ordenacao.ordena([II)V:10 - InsertUnaryOp IINC 1 min
   * Goal 96. Weak Mutation 58: cap1.Ordenacao.ordena([II)V:10 - InsertUnaryOp IINC -1 min
   * Goal 97. Weak Mutation 59: cap1.Ordenacao.ordena([II)V:11 - ReplaceVariable min -> x
   * Goal 98. Weak Mutation 60: cap1.Ordenacao.ordena([II)V:11 - ReplaceVariable min -> i
   * Goal 99. Weak Mutation 61: cap1.Ordenacao.ordena([II)V:11 - ReplaceVariable min -> n
   * Goal 100. Weak Mutation 62: cap1.Ordenacao.ordena([II)V:11 - InsertUnaryOp Negation of min
   * Goal 101. Weak Mutation 63: cap1.Ordenacao.ordena([II)V:11 - InsertUnaryOp IINC 1 min
   * Goal 102. Weak Mutation 64: cap1.Ordenacao.ordena([II)V:11 - InsertUnaryOp IINC -1 min
   * Goal 103. Weak Mutation 65: cap1.Ordenacao.ordena([II)V:11 - ReplaceVariable i -> x
   * Goal 104. Weak Mutation 66: cap1.Ordenacao.ordena([II)V:11 - ReplaceVariable i -> min
   * Goal 105. Weak Mutation 67: cap1.Ordenacao.ordena([II)V:11 - ReplaceVariable i -> n
   * Goal 106. Weak Mutation 68: cap1.Ordenacao.ordena([II)V:11 - InsertUnaryOp Negation of i
   * Goal 107. Weak Mutation 69: cap1.Ordenacao.ordena([II)V:11 - InsertUnaryOp IINC 1 i
   * Goal 108. Weak Mutation 70: cap1.Ordenacao.ordena([II)V:11 - InsertUnaryOp IINC -1 i
   * Goal 109. Weak Mutation 71: cap1.Ordenacao.ordena([II)V:12 - ReplaceVariable i -> x
   * Goal 110. Weak Mutation 72: cap1.Ordenacao.ordena([II)V:12 - ReplaceVariable i -> min
   * Goal 111. Weak Mutation 73: cap1.Ordenacao.ordena([II)V:12 - ReplaceVariable i -> n
   * Goal 112. Weak Mutation 74: cap1.Ordenacao.ordena([II)V:12 - InsertUnaryOp Negation of i
   * Goal 113. Weak Mutation 75: cap1.Ordenacao.ordena([II)V:12 - InsertUnaryOp IINC 1 i
   * Goal 114. Weak Mutation 76: cap1.Ordenacao.ordena([II)V:12 - InsertUnaryOp IINC -1 i
   * Goal 115. Weak Mutation 77: cap1.Ordenacao.ordena([II)V:12 - ReplaceVariable x -> i
   * Goal 116. Weak Mutation 78: cap1.Ordenacao.ordena([II)V:12 - ReplaceVariable x -> min
   * Goal 117. Weak Mutation 79: cap1.Ordenacao.ordena([II)V:12 - ReplaceVariable x -> n
   * Goal 118. Weak Mutation 80: cap1.Ordenacao.ordena([II)V:12 - InsertUnaryOp Negation of x
   * Goal 119. Weak Mutation 81: cap1.Ordenacao.ordena([II)V:12 - InsertUnaryOp IINC 1 x
   * Goal 120. Weak Mutation 82: cap1.Ordenacao.ordena([II)V:12 - InsertUnaryOp IINC -1 x
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-1218);
      Ordenacao.ordena(intArray0, 4);
      assertArrayEquals(new int[] {(-1218), 0, 0, 0}, intArray0);
  }

  //Test case number: 1
  /*
   * 21 covered goals:
   * Goal 1. cap1.Ordenacao.ordena([II)V: I66 Branch 3 IF_ICMPLT L4 - false
   * Goal 2. Branch cap1.Ordenacao.ordena([II)V: I66 Branch 3 IF_ICMPLT L4 - false in context: cap1.Ordenacao:ordena([II)V
   * Goal 3. cap1.Ordenacao.ordena([II)V: Line 4
   * Goal 4. cap1.Ordenacao.ordena([II)V: Line 14
   * Goal 5. [METHOD] cap1.Ordenacao.ordena([II)V
   * Goal 6. [METHODNOEX] cap1.Ordenacao.ordena([II)V
   * Goal 7. Weak Mutation 0: cap1.Ordenacao.ordena([II)V:4 - ReplaceConstant - 0 -> 1
   * Goal 8. Weak Mutation 84: cap1.Ordenacao.ordena([II)V:4 - ReplaceVariable i -> n
   * Goal 9. Weak Mutation 85: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp Negation of i
   * Goal 10. Weak Mutation 86: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC 1 i
   * Goal 11. Weak Mutation 87: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC -1 i
   * Goal 12. Weak Mutation 88: cap1.Ordenacao.ordena([II)V:4 - ReplaceVariable n -> i
   * Goal 13. Weak Mutation 89: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp Negation of n
   * Goal 14. Weak Mutation 90: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC 1 n
   * Goal 15. Weak Mutation 91: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC -1 n
   * Goal 16. Weak Mutation 92: cap1.Ordenacao.ordena([II)V:4 - ReplaceConstant - 1 -> 0
   * Goal 17. Weak Mutation 93: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> +
   * Goal 18. Weak Mutation 94: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> %
   * Goal 19. Weak Mutation 95: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> *
   * Goal 20. Weak Mutation 96: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> /
   * Goal 21. Weak Mutation 97: cap1.Ordenacao.ordena([II)V:4 - ReplaceComparisonOperator < -> !=
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[4];
      Ordenacao.ordena(intArray0, (-1218));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  //Test case number: 2
  /*
   * 68 covered goals:
   * Goal 1. cap1.Ordenacao.ordena([II)V: I66 Branch 3 IF_ICMPLT L4 - true
   * Goal 2. cap1.Ordenacao.ordena([II)V: I37 Branch 2 IF_ICMPLT L6 - true
   * Goal 3. cap1.Ordenacao.ordena([II)V: I26 Branch 1 IF_ICMPGE L7 - true
   * Goal 4. Branch cap1.Ordenacao.ordena([II)V: I66 Branch 3 IF_ICMPLT L4 - true in context: cap1.Ordenacao:ordena([II)V
   * Goal 5. Branch cap1.Ordenacao.ordena([II)V: I37 Branch 2 IF_ICMPLT L6 - true in context: cap1.Ordenacao:ordena([II)V
   * Goal 6. Branch cap1.Ordenacao.ordena([II)V: I26 Branch 1 IF_ICMPGE L7 - true in context: cap1.Ordenacao:ordena([II)V
   * Goal 7. ordena([II)V_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 8. cap1.Ordenacao.ordena([II)V: Line 4
   * Goal 9. cap1.Ordenacao.ordena([II)V: Line 5
   * Goal 10. cap1.Ordenacao.ordena([II)V: Line 6
   * Goal 11. cap1.Ordenacao.ordena([II)V: Line 7
   * Goal 12. [METHOD] cap1.Ordenacao.ordena([II)V
   * Goal 13. Weak Mutation 0: cap1.Ordenacao.ordena([II)V:4 - ReplaceConstant - 0 -> 1
   * Goal 14. Weak Mutation 84: cap1.Ordenacao.ordena([II)V:4 - ReplaceVariable i -> n
   * Goal 15. Weak Mutation 85: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp Negation of i
   * Goal 16. Weak Mutation 86: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC 1 i
   * Goal 17. Weak Mutation 87: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC -1 i
   * Goal 18. Weak Mutation 88: cap1.Ordenacao.ordena([II)V:4 - ReplaceVariable n -> i
   * Goal 19. Weak Mutation 89: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp Negation of n
   * Goal 20. Weak Mutation 90: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC 1 n
   * Goal 21. Weak Mutation 91: cap1.Ordenacao.ordena([II)V:4 - InsertUnaryOp IINC -1 n
   * Goal 22. Weak Mutation 92: cap1.Ordenacao.ordena([II)V:4 - ReplaceConstant - 1 -> 0
   * Goal 23. Weak Mutation 93: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> +
   * Goal 24. Weak Mutation 94: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> %
   * Goal 25. Weak Mutation 95: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> *
   * Goal 26. Weak Mutation 96: cap1.Ordenacao.ordena([II)V:4 - ReplaceArithmeticOperator - -> /
   * Goal 27. Weak Mutation 98: cap1.Ordenacao.ordena([II)V:4 - ReplaceComparisonOperator < -> -2
   * Goal 28. Weak Mutation 1: cap1.Ordenacao.ordena([II)V:5 - ReplaceVariable i -> n
   * Goal 29. Weak Mutation 2: cap1.Ordenacao.ordena([II)V:5 - InsertUnaryOp Negation of i
   * Goal 30. Weak Mutation 3: cap1.Ordenacao.ordena([II)V:5 - InsertUnaryOp IINC 1 i
   * Goal 31. Weak Mutation 4: cap1.Ordenacao.ordena([II)V:5 - InsertUnaryOp IINC -1 i
   * Goal 32. Weak Mutation 5: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable i -> n
   * Goal 33. Weak Mutation 7: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp Negation of i
   * Goal 34. Weak Mutation 8: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC 1 i
   * Goal 35. Weak Mutation 9: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC -1 i
   * Goal 36. Weak Mutation 10: cap1.Ordenacao.ordena([II)V:6 - ReplaceConstant - 1 -> 0
   * Goal 37. Weak Mutation 11: cap1.Ordenacao.ordena([II)V:6 - ReplaceArithmeticOperator + -> %
   * Goal 38. Weak Mutation 12: cap1.Ordenacao.ordena([II)V:6 - ReplaceArithmeticOperator + -> -
   * Goal 39. Weak Mutation 13: cap1.Ordenacao.ordena([II)V:6 - ReplaceArithmeticOperator + -> *
   * Goal 40. Weak Mutation 14: cap1.Ordenacao.ordena([II)V:6 - ReplaceArithmeticOperator + -> /
   * Goal 41. Weak Mutation 36: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> i
   * Goal 42. Weak Mutation 37: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> min
   * Goal 43. Weak Mutation 38: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> n
   * Goal 44. Weak Mutation 39: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> i
   * Goal 45. Weak Mutation 40: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> min
   * Goal 46. Weak Mutation 41: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable j -> n
   * Goal 47. Weak Mutation 42: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp Negation of j
   * Goal 48. Weak Mutation 43: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC 1 j
   * Goal 49. Weak Mutation 44: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC -1 j
   * Goal 50. Weak Mutation 45: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable n -> i
   * Goal 51. Weak Mutation 46: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable n -> j
   * Goal 52. Weak Mutation 47: cap1.Ordenacao.ordena([II)V:6 - ReplaceVariable n -> min
   * Goal 53. Weak Mutation 48: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp Negation of n
   * Goal 54. Weak Mutation 49: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC 1 n
   * Goal 55. Weak Mutation 50: cap1.Ordenacao.ordena([II)V:6 - InsertUnaryOp IINC -1 n
   * Goal 56. Weak Mutation 52: cap1.Ordenacao.ordena([II)V:6 - ReplaceComparisonOperator < -> -2
   * Goal 57. Weak Mutation 15: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable j -> i
   * Goal 58. Weak Mutation 16: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable j -> min
   * Goal 59. Weak Mutation 17: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable j -> n
   * Goal 60. Weak Mutation 18: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp Negation of j
   * Goal 61. Weak Mutation 19: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp IINC 1 j
   * Goal 62. Weak Mutation 20: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp IINC -1 j
   * Goal 63. Weak Mutation 22: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable min -> j
   * Goal 64. Weak Mutation 23: cap1.Ordenacao.ordena([II)V:7 - ReplaceVariable min -> n
   * Goal 65. Weak Mutation 24: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp Negation of min
   * Goal 66. Weak Mutation 25: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp IINC 1 min
   * Goal 67. Weak Mutation 26: cap1.Ordenacao.ordena([II)V:7 - InsertUnaryOp IINC -1 min
   * Goal 68. Weak Mutation 28: cap1.Ordenacao.ordena([II)V:7 - ReplaceComparisonOperator >= -> >
   */

  @Test(timeout = 4000, expected=ArrayIndexOutOfBoundsException.class)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[6];
      // Undeclared exception!
        Ordenacao.ordena(intArray0, 133);
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * Goal 1. cap1.Ordenacao.<init>()V: root-Branch
   * Goal 2. Branch cap1.Ordenacao.<init>()V: root-Branch in context: cap1.Ordenacao:<init>()V
   * Goal 3. [METHOD] cap1.Ordenacao.<init>()V
   * Goal 4. [METHODNOEX] cap1.Ordenacao.<init>()V
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Ordenacao ordenacao0 = new Ordenacao();
  }
}
